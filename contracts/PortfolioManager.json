{
  "address": "0xEa250cbf97b47522fda27a2875868491509Ca393",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "ConsoleLog",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXCHANGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOnReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancer",
      "outputs": [
        {
          "internalType": "contract Balancer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchanger",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "invest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_balancer",
          "type": "address"
        }
      ],
      "name": "setBalancer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchanger",
          "type": "address"
        }
      ],
      "name": "setExchanger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardManager",
          "type": "address"
        }
      ],
      "name": "setRewardManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract Vault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8674fab58da7ba0e29c87efea7d18d6b07aa028a68d373ddfcc0c1a16b0794e7",
  "receipt": {
    "to": null,
    "from": "0x5CB01385d3097b6a189d1ac8BA3364D900666445",
    "contractAddress": "0xEa250cbf97b47522fda27a2875868491509Ca393",
    "transactionIndex": 68,
    "gasUsed": "2440795",
    "logsBloom": "0x
    "blockHash": "0x92c8beb5be4b17c9be7b5251b8d9654a287b166320d7ee662290fc32538cc42c",
    "transactionHash": "0x8674fab58da7ba0e29c87efea7d18d6b07aa028a68d373ddfcc0c1a16b0794e7",
    "logs": [
      {
        "transactionIndex": 68,
        "blockNumber": 21746795,
        "transactionHash": "0x8674fab58da7ba0e29c87efea7d18d6b07aa028a68d373ddfcc0c1a16b0794e7",
        "address": "0xEa250cbf97b47522fda27a2875868491509Ca393",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005cb01385d3097b6a189d1ac8ba3364d900666445",
          "0x0000000000000000000000005cb01385d3097b6a189d1ac8ba3364d900666445"
        ],
        "data": "0x",
        "logIndex": 392,
        "blockHash": "0x92c8beb5be4b17c9be7b5251b8d9654a287b166320d7ee662290fc32538cc42c"
      },
      {
        "transactionIndex": 68,
        "blockNumber": 21746795,
        "transactionHash": "0x8674fab58da7ba0e29c87efea7d18d6b07aa028a68d373ddfcc0c1a16b0794e7",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005cb01385d3097b6a189d1ac8ba3364d900666445",
          "0x000000000000000000000000f0245f6251bef9447a08766b9da2b07b28ad80b0"
        ],
        "data": "0x000000000000000000000000000000000000000000000000010424b420562400000000000000000000000000000000000000000000000000fd554d29e066b98000000000000000000000000000000000000000000000005217a3bf48ed62549a000000000000000000000000000000000000000000000000fc512875c010958000000000000000000000000000000000000000000000005218a7e3fd0db8789a",
        "logIndex": 393,
        "blockHash": "0x92c8beb5be4b17c9be7b5251b8d9654a287b166320d7ee662290fc32538cc42c"
      }
    ],
    "blockNumber": 21746795,
    "cumulativeGasUsed": "13415953",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "4b2c02ad00a20f5dc92f2cdd9d4eb77f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"ConsoleLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXCHANGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOnReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancer\",\"outputs\":[{\"internalType\":\"contract Balancer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchanger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_balancer\",\"type\":\"address\"}],\"name\":\"setBalancer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchanger\",\"type\":\"address\"}],\"name\":\"setExchanger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardManager\",\"type\":\"address\"}],\"name\":\"setRewardManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimRewards()\":{\"notice\":\"Claim rewards from Curve gauge where we have staked LP tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PortfolioManager.sol\":\"PortfolioManager\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x084f583de2c714665b0304529fe8b826a2809f29d03314e4dd9eea926e4bb0f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/Balancer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./interfaces/IMark2Market.sol\\\";\\nimport \\\"./interfaces/IActionBuilder.sol\\\";\\nimport \\\"./interfaces/ITokenExchange.sol\\\";\\nimport \\\"./token_exchanges/Usdc2AUsdcTokenExchange.sol\\\";\\n\\n//TODO: use AccessControl or Ownable from zeppelin\\ncontract Balancer is AccessControl {\\n    // ---  fields\\n\\n    IMark2Market public m2m;\\n    address[] public actionBuildersInOrder;\\n\\n    // ---  events\\n\\n    //TODO: remove\\n    event ConsoleLog(string str);\\n\\n    // ---  modifiers\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    // ---  constructor\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    // ---  setters\\n\\n    function setMark2Market(address _m2m) external onlyAdmin {\\n        require(_m2m != address(0), \\\"Zero address not allowed\\\");\\n        m2m = IMark2Market(_m2m);\\n    }\\n\\n    function setActionBuilders(address[] calldata _actionBuildersInOrder) external onlyAdmin {\\n        for (uint8 i = 0; i < _actionBuildersInOrder.length; i++) {\\n            _addActionBuilderAt(_actionBuildersInOrder[i], i);\\n        }\\n        // truncate array if needed\\n        if (actionBuildersInOrder.length > _actionBuildersInOrder.length) {\\n            uint256 removeCount = actionBuildersInOrder.length - _actionBuildersInOrder.length;\\n            for (uint8 i = 0; i < removeCount; i++) {\\n                actionBuildersInOrder.pop();\\n            }\\n        }\\n    }\\n\\n    function addActionBuilderAt(address actionBuilder, uint256 index) external onlyAdmin {\\n        _addActionBuilderAt(actionBuilder, index);\\n    }\\n\\n    function _addActionBuilderAt(address actionBuilder, uint256 index) internal {\\n        uint256 currentlength = actionBuildersInOrder.length;\\n        // expand array id needed\\n        if (currentlength == 0 || currentlength - 1 < index) {\\n            uint256 additionalCount = index - currentlength + 1;\\n            for (uint8 i = 0; i < additionalCount; i++) {\\n                actionBuildersInOrder.push();\\n            }\\n        }\\n        actionBuildersInOrder[index] = actionBuilder;\\n    }\\n\\n    // ---  logic\\n\\n    function buildBalanceActions() public returns (IActionBuilder.ExchangeAction[] memory) {\\n        // Same to zero withdrawal balance\\n        return buildBalanceActions(IERC20(address(0)), 0);\\n    }\\n\\n    function buildBalanceActions(IERC20 withdrawToken, uint256 withdrawAmount)\\n        public\\n        returns (IActionBuilder.ExchangeAction[] memory)\\n    {\\n        try m2m.assetPricesForBalance(address(withdrawToken), withdrawAmount) returns (\\n            IMark2Market.TotalAssetPrices memory assetPrices\\n        ) {\\n            // // 1. get current prices from M2M\\n            // IMark2Market.TotalAssetPrices memory assetPrices = m2m.assetPricesForBalance(\\n            //     address(withdrawToken),\\n            //     withdrawAmount\\n            // );\\n\\n            // 2. calc total price\\n            uint256 totalUsdcPrice = assetPrices.totalUsdcPrice;\\n\\n            //TODO: remove\\n            log(\\\"totalUsdcPrice: \\\", totalUsdcPrice);\\n\\n            // 3. make actions\\n            IActionBuilder.ExchangeAction[]\\n                memory actionOrder = new IActionBuilder.ExchangeAction[](\\n                    actionBuildersInOrder.length\\n                );\\n            //TODO: remove\\n            log(\\\"actionBuildersInOrder.length: \\\", actionBuildersInOrder.length);\\n\\n            for (uint8 i = 0; i < actionBuildersInOrder.length; i++) {\\n                try\\n                    IActionBuilder(actionBuildersInOrder[i]).buildAction(assetPrices, actionOrder)\\n                returns (IActionBuilder.ExchangeAction memory action) {\\n                    actionOrder[i] = action;\\n                } catch Error(string memory reason) {\\n                    revert(\\n                        string(\\n                            abi.encodePacked(\\n                                uint2str(i),\\n                                \\\" \\\",\\n                                reason,\\n                                \\\"| IActionBuilder.buildAction: code: \\\",\\n                                IActionBuilder(actionBuildersInOrder[i]).getActionCode()\\n                            )\\n                        )\\n                    );\\n                } catch {\\n                    revert(\\n                        string(\\n                            abi.encodePacked(\\n                                uint2str(i),\\n                                \\\"| IActionBuilder.buildAction: code: \\\",\\n                                IActionBuilder(actionBuildersInOrder[i]).getActionCode()\\n                            )\\n                        )\\n                    );\\n                }\\n\\n                // IActionBuilder.ExchangeAction memory action = IActionBuilder(actionBuildersInOrder[i])\\n                //     .buildAction(assetPrices, actionOrder);\\n                // actionOrder[i] = action;\\n            }\\n            //TODO: remove\\n            log(\\\"actionOrder.length: \\\", actionOrder.length);\\n\\n            return actionOrder;\\n        } catch Error(string memory reason) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        reason,\\n                        \\\"| m2m.assetPricesForBalance: No reason \\\",\\n                        \\\" withdrawToken \\\",\\n                        toAsciiString(address(withdrawToken)),\\n                        \\\" withdrawAmount \\\",\\n                        uint2str(withdrawAmount)\\n                    )\\n                )\\n            );\\n        } catch {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"m2m.assetPricesForBalance: No reason \\\",\\n                        \\\" withdrawToken \\\",\\n                        toAsciiString(address(withdrawToken)),\\n                        \\\" withdrawAmount \\\",\\n                        uint2str(withdrawAmount)\\n                    )\\n                )\\n            );\\n        }\\n\\n        // // 1. get current prices from M2M\\n        // IMark2Market.TotalAssetPrices memory assetPrices = m2m.assetPricesForBalance(\\n        //     address(withdrawToken),\\n        //     withdrawAmount\\n        // );\\n\\n        // // 2. calc total price\\n        // uint256 totalUsdcPrice = assetPrices.totalUsdcPrice;\\n\\n        // //TODO: remove\\n        // log(\\\"totalUsdcPrice: \\\", totalUsdcPrice);\\n\\n        // // 3. make actions\\n        // IActionBuilder.ExchangeAction[]\\n        //     memory actionOrder = new IActionBuilder.ExchangeAction[](\\n        //         actionBuildersInOrder.length\\n        //     );\\n        // //TODO: remove\\n        // log(\\\"actionBuildersInOrder.length: \\\", actionBuildersInOrder.length);\\n\\n        // for (uint8 i = 0; i < actionBuildersInOrder.length; i++) {\\n        //     IActionBuilder.ExchangeAction memory action = IActionBuilder(actionBuildersInOrder[i])\\n        //         .buildAction(assetPrices, actionOrder);\\n        //     actionOrder[i] = action;\\n        // }\\n        // //TODO: remove\\n        // log(\\\"actionOrder.length: \\\", actionOrder.length);\\n\\n        // return actionOrder;\\n    }\\n\\n    //TODO: remove\\n    function log(string memory message, uint value) internal {\\n        emit ConsoleLog(string(abi.encodePacked(message, uint2str(value))));\\n    }\\n\\n    //TODO: remove\\n    function toAsciiString(address x) internal pure returns (string memory) {\\n        bytes memory s = new bytes(40);\\n        for (uint i = 0; i < 20; i++) {\\n            bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8 * (19 - i)))));\\n            bytes1 hi = bytes1(uint8(b) / 16);\\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n            s[2 * i] = char(hi);\\n            s[2 * i + 1] = char(lo);\\n        }\\n        return string(s);\\n    }\\n\\n    //TODO: remove\\n    function char(bytes1 b) internal pure returns (bytes1 c) {\\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n        else return bytes1(uint8(b) + 0x57);\\n    }\\n\\n    //TODO: remove\\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = _i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            bstr[k] = bytes1(uint8(48 + (_i % 10)));\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n}\\n\",\"keccak256\":\"0xb257bb180e7d2f7ca0367edf3370096d10a4734e12d2eda0b776d69d72c1990c\",\"license\":\"MIT\"},\"contracts/PortfolioManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./interfaces/IPortfolioManager.sol\\\";\\nimport \\\"./interfaces/IConnector.sol\\\";\\nimport \\\"./interfaces/IMark2Market.sol\\\";\\nimport \\\"./interfaces/IActionBuilder.sol\\\";\\nimport \\\"./connectors/curve/interfaces/IRewardOnlyGauge.sol\\\";\\nimport \\\"./registries/InvestmentPortfolio.sol\\\";\\n\\nimport \\\"./Vault.sol\\\";\\nimport \\\"./Balancer.sol\\\";\\nimport \\\"./interfaces/IRewardManager.sol\\\";\\n\\ncontract PortfolioManager is IPortfolioManager, AccessControl {\\n    bytes32 public constant EXCHANGER = keccak256(\\\"EXCHANGER\\\");\\n\\n    // ---  fields\\n\\n    Vault public vault;\\n    Balancer public balancer;\\n    address public exchanger;\\n    IRewardManager rewardManager;\\n\\n    // ---  events\\n\\n    //TODO: remove\\n    event ConsoleLog(string str);\\n\\n    // ---  modifiers\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    modifier onlyExchanger() {\\n        require(hasRole(EXCHANGER, msg.sender), \\\"Caller is not the EXCHANGER\\\");\\n        _;\\n    }\\n\\n    // ---  constructor\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    // ---  setters\\n\\n    function setExchanger(address _exchanger) public onlyAdmin {\\n        require(_exchanger != address(0), \\\"Zero address not allowed\\\");\\n        exchanger = _exchanger;\\n        grantRole(EXCHANGER, exchanger);\\n    }\\n\\n    function setVault(address _vault) external onlyAdmin {\\n        require(_vault != address(0), \\\"Zero address not allowed\\\");\\n        vault = Vault(_vault);\\n    }\\n\\n    function setBalancer(address _balancer) external onlyAdmin {\\n        require(_balancer != address(0), \\\"Zero address not allowed\\\");\\n        balancer = Balancer(_balancer);\\n    }\\n\\n    function setRewardManager(address _rewardManager) external onlyAdmin {\\n        require(_rewardManager != address(0), \\\"Zero address not allowed\\\");\\n        rewardManager = IRewardManager(_rewardManager);\\n    }\\n\\n\\n    // ---  logic\\n\\n    //TODO: exchange only\\n    function invest(IERC20 _token, uint256 _amount) external override onlyExchanger {\\n        // 1. put tokens into Vault\\n        _token.transfer(address(vault), _amount);\\n\\n        // 2. start balancing\\n        balanceOnInvest();\\n    }\\n\\n    function balanceOnInvest() internal {\\n        try balancer.buildBalanceActions() returns (\\n            IActionBuilder.ExchangeAction[] memory actionOrder\\n        ) {\\n            //TODO: remove\\n            emit ConsoleLog(string(abi.encodePacked(uint2str(actionOrder.length), \\\" actions\\\")));\\n\\n            // 2. execute them\\n            executeActions(actionOrder);\\n        } catch Error(string memory reason) {\\n            // This may occur if there is an overflow with the two numbers and the `AddNumbers` contract explicitly fails with a `revert()`\\n            emit ConsoleLog(reason);\\n            revert(reason);\\n        } catch {\\n            emit ConsoleLog(\\\"balanceOnInvest:buildBalanceActions: No reason\\\");\\n            revert(\\\"balanceOnInvest:buildBalanceActions: No reason\\\");\\n        }\\n\\n        // // 1. got action to balance\\n        // IActionBuilder.ExchangeAction[] memory actionOrder = balancer.buildBalanceActions();\\n        // //TODO: remove\\n        // emit ConsoleLog(string(abi.encodePacked(uint2str(actionOrder.length), \\\" actions\\\")));\\n\\n        // // 2. execute them\\n        // executeActions(actionOrder);\\n    }\\n\\n    function withdraw(IERC20 _token, uint256 _amount)\\n    external\\n    override\\n    onlyExchanger\\n    returns (uint256)\\n    {\\n        // 0.1 TODO: check that _token is one off used\\n        // 0.2 TODO: check total balance would be in balancer where wi will correct total price, is enough?\\n\\n        // 1. balance to needed amount\\n        balanceOnWithdraw(_token, _amount);\\n\\n        // 2. transfer back tokens\\n        // TODO: transfer amount should be reduced by fees\\n\\n        //TODO: crunch to get logs, remove\\n        uint256 currentBalance = _token.balanceOf(address(vault));\\n        if (_amount > currentBalance) {\\n            _amount = currentBalance;\\n        }\\n\\n        require(\\n            _token.balanceOf(address(vault)) >= _amount,\\n            string(\\n                abi.encodePacked(\\n                    \\\"In vault not enough for transfer _amount: \\\",\\n                    uint2str(_token.balanceOf(address(vault))),\\n                    \\\" < \\\",\\n                    uint2str(_amount)\\n                )\\n            )\\n        );\\n        vault.transfer(_token, msg.sender, _amount);\\n\\n        return _amount;\\n    }\\n\\n    function balanceOnReward() external override onlyExchanger {\\n        balanceOnInvest();\\n    }\\n\\n    function balanceOnWithdraw(IERC20 _token, uint256 _amount) internal {\\n        // 1. got action to balance\\n        // try balancer.buildBalanceActions(_token, _amount) returns (\\n        //     IActionBuilder.ExchangeAction[] memory actionOrder\\n        // ) {\\n        //     //TODO: remove\\n        //     emit ConsoleLog(string(abi.encodePacked(uint2str(actionOrder.length), \\\" actions\\\")));\\n\\n        //     // 2. execute them\\n        //     executeActions(actionOrder);\\n        // } catch Error(string memory reason) {\\n        //     // This may occur if there is an overflow with the two numbers and the `AddNumbers` contract explicitly fails with a `revert()`\\n        //     emit ConsoleLog(reason);\\n        //     revert(reason);\\n        // } catch {\\n        //     emit ConsoleLog(\\\"buildBalanceActions: No reason\\\");\\n        //     revert(\\\"buildBalanceActions: No reason\\\");\\n        // }\\n\\n        IActionBuilder.ExchangeAction[] memory actionOrder = balancer.buildBalanceActions(\\n            _token,\\n            _amount\\n        );\\n        //TODO: remove\\n        emit ConsoleLog(string(abi.encodePacked(uint2str(actionOrder.length), \\\" actions\\\")));\\n\\n        // 2. execute them\\n        executeActions(actionOrder);\\n    }\\n\\n    function executeActions(IActionBuilder.ExchangeAction[] memory actionOrder) internal {\\n        //TODO: remove\\n        emit ConsoleLog(\\n            string(abi.encodePacked(uint2str(actionOrder.length), \\\" actions to execute\\\"))\\n        );\\n\\n        bool someActionExecuted = true;\\n        while (someActionExecuted) {\\n            someActionExecuted = false;\\n            for (uint8 i = 0; i < actionOrder.length; i++) {\\n                IActionBuilder.ExchangeAction memory action = actionOrder[i];\\n                if (action.executed) {\\n                    // Skip executed\\n                    //TODO: remove\\n                    emit ConsoleLog(\\n                        string(\\n                            abi.encodePacked(\\n                                uint2str(i),\\n                                \\\" Skip executed: \\\",\\n                                uint2str(action.amount),\\n                                \\\" from \\\",\\n                                IERC20Metadata(address(action.from)).symbol(),\\n                                \\\" to \\\",\\n                                IERC20Metadata(address(action.to)).symbol()\\n                            )\\n                        )\\n                    );\\n                    continue;\\n                }\\n                uint256 amount = action.amount;\\n                uint256 denormalizedAmount;\\n                //TODO: denominator usage\\n                uint256 denominator = 10 ** (18 - IERC20Metadata(address(action.from)).decimals());\\n                if (action.exchangeAll) {\\n                    denormalizedAmount = action.from.balanceOf(address(vault));\\n                    // normalize denormalizedAmount to 10**18\\n                    amount = denormalizedAmount * denominator;\\n                } else {\\n                    // denormalize amount from 10**18 to token decimals\\n                    denormalizedAmount = amount / denominator;\\n                }\\n                if (amount == 0) {\\n                    // Skip zero amount action\\n                    //TODO: remove\\n                    emit ConsoleLog(\\n                        string(\\n                            abi.encodePacked(\\n                                uint2str(i),\\n                                \\\" Skip zero amount action: \\\",\\n                                uint2str(amount),\\n                                \\\" from \\\",\\n                                IERC20Metadata(address(action.from)).symbol(),\\n                                \\\" to \\\",\\n                                IERC20Metadata(address(action.to)).symbol()\\n                            )\\n                        )\\n                    );\\n                    continue;\\n                }\\n\\n                if (action.from.balanceOf(address(vault)) < denormalizedAmount) {\\n                    // Skip not enough blance for execute know\\n                    //TODO: remove\\n                    emit ConsoleLog(\\n                        string(\\n                            abi.encodePacked(\\n                                uint2str(i),\\n                                \\\" Skip not enough balance for execute know: \\\",\\n                                uint2str(denormalizedAmount),\\n                                \\\" from \\\",\\n                                IERC20Metadata(address(action.from)).symbol(),\\n                                \\\" to \\\",\\n                                IERC20Metadata(address(action.to)).symbol(),\\n                                \\\" current \\\",\\n                                uint2str(action.from.balanceOf(address(vault)))\\n                            )\\n                        )\\n                    );\\n                    continue;\\n                }\\n\\n                // move tokens to tokenExchange for executing action, amount - NOT normalized to 10**18\\n                vault.transfer(action.from, address(action.tokenExchange), denormalizedAmount);\\n                // execute exchange\\n                try\\n                action.tokenExchange.exchange(\\n                    address(vault),\\n                    action.from,\\n                    address(vault),\\n                    action.to,\\n                    amount\\n                )\\n                {\\n                    action.executed = true;\\n                    //TODO: remove\\n                    emit ConsoleLog(\\n                        string(\\n                            abi.encodePacked(\\n                                uint2str(i),\\n                                \\\" Exchange \\\",\\n                                uint2str(amount),\\n                                \\\" -> \\\",\\n                                uint2str(denormalizedAmount),\\n                                \\\" from \\\",\\n                                IERC20Metadata(address(action.from)).symbol(),\\n                                \\\" to \\\",\\n                                IERC20Metadata(address(action.to)).symbol()\\n                            )\\n                        )\\n                    );\\n                } catch Error(string memory reason) {\\n                    revert(\\n                    string(\\n                        abi.encodePacked(\\n                            reason,\\n                            \\\"\\\\n+ action.tokenExchange.exchange: \\\",\\n                            uint2str(amount),\\n                            \\\" from \\\",\\n                            IERC20Metadata(address(action.from)).symbol(),\\n                            \\\" to \\\",\\n                            IERC20Metadata(address(action.to)).symbol()\\n                        )\\n                    )\\n                    );\\n                } catch {\\n                    revert(\\n                    string(\\n                        abi.encodePacked(\\n                            \\\"action.tokenExchange.exchange: No reason \\\",\\n                            uint2str(amount),\\n                            \\\" from \\\",\\n                            IERC20Metadata(address(action.from)).symbol(),\\n                            \\\" to \\\",\\n                            IERC20Metadata(address(action.to)).symbol()\\n                        )\\n                    )\\n                    );\\n                }\\n\\n                // action.tokenExchange.exchange(\\n                //     address(vault),\\n                //     action.from,\\n                //     address(vault),\\n                //     action.to,\\n                //     amount\\n                // );\\n                // action.executed = true;\\n                //TODO: remove\\n                emit ConsoleLog(\\n                    string(\\n                        abi.encodePacked(\\n                            \\\"Exchange \\\",\\n                            uint2str(amount),\\n                            \\\" from \\\",\\n                            IERC20Metadata(address(action.from)).symbol(),\\n                            \\\" to \\\",\\n                            IERC20Metadata(address(action.to)).symbol()\\n                        )\\n                    )\\n                );\\n                someActionExecuted = true;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Claim rewards from Curve gauge where we have staked LP tokens\\n     */\\n    function claimRewards() external override {\\n        rewardManager.claimRewards();\\n    }\\n\\n\\n    //TODO: remove\\n    function toAsciiString(address x) internal pure returns (string memory) {\\n        bytes memory s = new bytes(40);\\n        for (uint i = 0; i < 20; i++) {\\n            bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8 * (19 - i)))));\\n            bytes1 hi = bytes1(uint8(b) / 16);\\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n            s[2 * i] = char(hi);\\n            s[2 * i + 1] = char(lo);\\n        }\\n        return string(s);\\n    }\\n\\n    //TODO: remove\\n    function char(bytes1 b) internal pure returns (bytes1 c) {\\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n        else return bytes1(uint8(b) + 0x57);\\n    }\\n\\n    //TODO: remove\\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = _i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            bstr[k] = bytes1(uint8(48 + (_i % 10)));\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n}\\n\",\"keccak256\":\"0x480a620adb3d48693348edbd7b7a6d373ce0592b34ac611cdcaaa28b25b4c8c3\",\"license\":\"MIT\"},\"contracts/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./connectors/aave/interfaces/IAaveIncentivesController.sol\\\";\\n\\n/**\\n * Vault address is used as owner for all tokens for Overnights.\\n * So you able to use Vault address to check any tokens balances.\\n * Vault doesn't know about what it has and how mauch.\\n * Vault can contain any tokens but only IERC20 could be transfered\\n * in real work.\\n * NOTE: currently work with ETH/MATIC or other payments not realised.\\n * NOTE: not used SafeERC20 and it may be changed in future\\n */\\ncontract Vault is AccessControl {\\n    bytes32 public constant PORTFOLIO_MANAGER = keccak256(\\\"PORTFOLIO_MANAGER\\\");\\n    bytes32 public constant REWARD_MANAGER = keccak256(\\\"REWARD_MANAGER\\\");\\n\\n    // Only Vault can claiming aave rewards\\n    IAaveIncentivesController public aaveReward;\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    modifier onlyPortfolioManager() {\\n        require(hasRole(PORTFOLIO_MANAGER, msg.sender), \\\"Caller is not the PORTFOLIO_MANAGER\\\");\\n        _;\\n    }\\n\\n    modifier onlyRewardManager() {\\n        require(hasRole(REWARD_MANAGER, msg.sender), \\\"Caller is not the REWARD_MANAGER\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function setPortfolioManager(address _portfolioManager) public onlyAdmin {\\n        require(_portfolioManager != address(0), \\\"Zero address not allowed\\\");\\n        grantRole(PORTFOLIO_MANAGER, _portfolioManager);\\n    }\\n\\n    function setRewardManager(address _rewardManager) public onlyAdmin {\\n        require(_rewardManager != address(0), \\\"Zero address not allowed\\\");\\n        grantRole(REWARD_MANAGER, _rewardManager);\\n    }\\n\\n\\n    function setAaveReward(address _aaveReward) public onlyAdmin {\\n        require(_aaveReward != address(0), \\\"Zero address not allowed\\\");\\n        aaveReward = IAaveIncentivesController(_aaveReward);\\n    }\\n\\n\\n\\n    //TODO: do we really need this feature?\\n    function removePortfolioManager(address _portfolioManager) public onlyAdmin {\\n        require(_portfolioManager != address(0), \\\"Zero address not allowed\\\");\\n        revokeRole(PORTFOLIO_MANAGER, _portfolioManager);\\n    }\\n\\n\\n    function claimRewardAave(address[] calldata assets, uint256 amount) public onlyRewardManager {\\n        aaveReward.claimRewards(assets, amount, address(this));\\n    }\\n\\n\\n    /**\\n     * @dev proxy to IERC20().totalSupply();\\n     */\\n    function totalSupply(IERC20 token) external view returns (uint256) {\\n        return token.totalSupply();\\n    }\\n\\n    /**\\n     * @dev proxy to IERC20().balanceOf();\\n     */\\n    function balanceOf(IERC20 token, address account) external view returns (uint256) {\\n        return token.balanceOf(account);\\n    }\\n\\n    /**\\n     * @dev proxy to IERC20().allowance();\\n     */\\n    function allowance(\\n        IERC20 token,\\n        address owner,\\n        address spender\\n    ) external view returns (uint256) {\\n        return token.allowance(owner, spender);\\n    }\\n\\n    /**\\n     * @dev proxy to IERC20().approve();\\n     */\\n    function approve(\\n        IERC20 token,\\n        address spender,\\n        uint256 amount\\n    ) external onlyPortfolioManager returns (bool) {\\n        return token.approve(spender, amount);\\n    }\\n\\n    /**\\n     * @dev proxy to IERC20().transfer();\\n     */\\n    function transfer(\\n        IERC20 token,\\n        address recipient,\\n        uint256 amount\\n    ) external onlyPortfolioManager returns (bool) {\\n        return token.transfer(recipient, amount);\\n    }\\n\\n    /**\\n     * @dev proxy to IERC20().transferFrom();\\n     */\\n    function transferFrom(\\n        IERC20 token,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external onlyPortfolioManager returns (bool) {\\n        return token.transferFrom(sender, recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0417317e36c696b5538d5acd6be2705f0e2adc2735b99af4e287718ab98381e1\",\"license\":\"MIT\"},\"contracts/connectors/aave/interfaces/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IAaveIncentivesController {\\n\\n    event RewardsAccrued(address indexed user, uint256 amount);\\n\\n    event RewardsClaimed(\\n        address indexed user,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    event RewardsClaimed(\\n        address indexed user,\\n        address indexed to,\\n        address indexed claimer,\\n        uint256 amount\\n    );\\n\\n    event ClaimerSet(address indexed user, address indexed claimer);\\n\\n    /**\\n     * @dev Whitelists an address to claim the rewards on behalf of another address\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n    function setClaimer(address user, address claimer) external;\\n\\n    /**\\n     * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n   * @param user The address of the user\\n   * @return The claimer address\\n   */\\n    function getClaimer(address user) external view returns (address);\\n\\n    /**\\n     * @dev Configure assets for a certain rewards emission\\n   * @param assets The assets to incentivize\\n   * @param emissionsPerSecond The emission for each asset\\n   */\\n    function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond)\\n    external;\\n\\n\\n    /**\\n     * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param asset The address of the user\\n   * @param userBalance The balance of the user of the asset in the lending pool\\n   * @param totalSupply The total supply of the asset in the lending pool\\n   **/\\n    function handleAction(\\n        address asset,\\n        uint256 userBalance,\\n        uint256 totalSupply\\n    ) external;\\n\\n    /**\\n     * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n   * @param user The address of the user\\n   * @return The rewards\\n   **/\\n    function getRewardsBalance(address[] calldata assets, address user)\\n    external\\n    view\\n    returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n   * @param amount Amount of rewards to claim\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n   * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param amount Amount of rewards to claim\\n   * @param user Address to check and claim rewards\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n    function claimRewardsOnBehalf(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address user,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev returns the unclaimed rewards of the user\\n   * @param user the address of the user\\n   * @return the unclaimed user rewards\\n   */\\n    function getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n    /**\\n    * @dev for backward compatibility with previous implementation of the Incentives controller\\n  */\\n    function REWARD_TOKEN() external view returns (address);\\n}\\n\",\"keccak256\":\"0xbf9877dc6ded4a81eb08f0db651e28b0789a03b38d1fe3afeb4e768894c66d77\",\"license\":\"agpl-3.0\"},\"contracts/connectors/curve/interfaces/IRewardOnlyGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRewardOnlyGauge is IERC20 {\\n    function deposit(\\n        uint256 _value,\\n        address _addr,\\n        bool _claim_rewards\\n    ) external;\\n\\n    function deposit(uint256 _value, address _addr) external;\\n\\n    function deposit(uint256 _value, bool _claim_rewards) external;\\n\\n    function deposit(uint256 _value) external;\\n\\n    function withdraw(uint256 _value, bool _claim_rewards) external;\\n\\n    function withdraw(uint256 _value) external;\\n\\n    function lp_token() external returns (address);\\n\\n    function claim_rewards(address _addr, address _receiver) external;\\n\\n    function claim_rewards(address _addr) external;\\n\\n    function claim_rewards() external;\\n\\n    function claimed_reward(address _addr, address _token) external returns (uint256);\\n\\n    function claimable_reward(address _addr, address _token) external returns (uint256);\\n\\n    function claimable_reward_write(address _addr, address _token) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x9522d8e9d2cc23c1ebf9e606874624e8738f7b6a41c36fe6ddc45c0f5141a076\",\"license\":\"MIT\"},\"contracts/interfaces/IActionBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IMark2Market.sol\\\";\\nimport \\\"./ITokenExchange.sol\\\";\\n\\ninterface IActionBuilder {\\n    struct ExchangeAction {\\n        ITokenExchange tokenExchange;\\n        bytes32 code;\\n        IERC20 from;\\n        IERC20 to;\\n        uint256 amount; // amount at usdc with 6 digit fractions\\n        bool exchangeAll; // mean that we should trade all tokens to zero ownership\\n        bool executed;\\n    }\\n\\n    function getActionCode() external pure returns (bytes32);\\n\\n    function buildAction(\\n        IMark2Market.TotalAssetPrices memory assetPrices,\\n        ExchangeAction[] memory actions\\n    ) external view returns (ExchangeAction memory);\\n}\\n\",\"keccak256\":\"0x9ae4c540203b167b7450eac4b735c820a834fb228825254c9aeeb1c520392119\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/// @title Common inrterface to DeFi protocol connectors\\n/// @author @Stanta\\n/// @notice Every connector have to implement this function\\n/// @dev Choosing of connector releasing by changing address of connector's contract\\ninterface IConnector {\\n    function stake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiar\\n    ) external;\\n\\n    function unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _to\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xf418605c420c689e5cdd7cf9a49d8906f8c5631a629a5d6eea6d9f2eba79fdb8\",\"license\":\"MIT\"},\"contracts/interfaces/IMark2Market.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IMark2Market {\\n    struct AssetPrices {\\n        address asset;\\n        uint256 amountInVault; // balance on Vault\\n        uint256 usdcPriceInVault; // current total price of balance at USDC\\n        uint256 diffToTarget; // diff usdcPriceInVault to target in portfolio\\n        int8 diffToTargetSign; // diff sign usdcPriceInVault to target in portfolio\\n        bool targetIsZero; // mean that we should trade all tokens to zero ownership\\n        //\\n        uint256 usdcPriceDenominator;\\n        uint256 usdcSellPrice;\\n        uint256 usdcBuyPrice;\\n        //\\n        uint256 decimals;\\n        string name;\\n        string symbol;\\n    }\\n\\n    struct TotalAssetPrices {\\n        AssetPrices[] assetPrices;\\n        uint256 totalUsdcPrice;\\n    }\\n\\n    function assetPrices() external view returns (TotalAssetPrices memory);\\n\\n    function assetPricesForBalance() external returns (TotalAssetPrices memory);\\n\\n    function assetPricesForBalance(address withdrawToken, uint256 withdrawAmount)\\n        external\\n        returns (TotalAssetPrices memory);\\n}\\n\",\"keccak256\":\"0x337e6890f27d2fd68742e24f9b367952b8b38a2f0d6c6ad15e67e1795ceaaa0d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPortfolioManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPortfolioManager {\\n    function invest(IERC20 _token, uint256 _amount) external;\\n\\n    function withdraw(IERC20 _token, uint256 _amount) external returns (uint256);\\n\\n    function balanceOnReward() external;\\n\\n    function claimRewards() external;\\n}\\n\",\"keccak256\":\"0x395ed4f8b988318674d3683bb0e260e9fc691edbaff13fa7d445de18c5e19913\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRewardManager {\\n\\n    function claimRewards() external;\\n}\\n\",\"keccak256\":\"0x0efe444f66e7299a23128d17bb016a50da33c38336701d5e1f095afbab1ce028\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenExchange.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITokenExchange {\\n\\n    function exchange(\\n        address spender,\\n        IERC20 from,\\n        address receiver,\\n        IERC20 to,\\n        uint256 amount\\n    ) external;\\n\\n}\\n\",\"keccak256\":\"0x5b882bdf0c53f3ad4e7a281ad884af921b2c7ff16517bf56e50f253fc58b5bbc\",\"license\":\"GPL-3.0\"},\"contracts/registries/InvestmentPortfolio.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract InvestmentPortfolio is AccessControl {\\n    uint256 public constant TOTAL_WEIGHT = 100000; // 100000 ~ 100%\\n\\n    mapping(address => uint256) public assetInfoPositions;\\n    AssetInfo[] public assetInfos;\\n    mapping(address => uint256) public assetWeightPositions;\\n    AssetWeight[] public assetWeights;\\n\\n    event UpdatedAssetWeight(\\n        uint256 index,\\n        address asset,\\n        uint256 minWeight,\\n        uint256 targetWeight,\\n        uint256 maxWeight\\n    );\\n    event UpdatedAssetInfo(uint256 index, address asset, address priceGetter);\\n\\n    struct AssetWeight {\\n        address asset;\\n        uint256 minWeight;\\n        uint256 targetWeight;\\n        uint256 maxWeight;\\n    }\\n\\n    struct AssetInfo {\\n        address asset;\\n        address priceGetter;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function setAssetInfos(AssetInfo[] calldata _assetInfos) external onlyAdmin {\\n        for (uint8 i = 0; i < _assetInfos.length; i++) {\\n            _addAssetInfoAt(_assetInfos[i], i);\\n        }\\n        // truncate array if needed\\n        if (assetInfos.length > _assetInfos.length) {\\n            uint256 removeCount = assetInfos.length - _assetInfos.length;\\n            for (uint8 i = 0; i < removeCount; i++) {\\n                //TODO: do we need remove from mapping?\\n                assetInfos.pop();\\n            }\\n        }\\n    }\\n\\n    function addAssetInfoAt(AssetInfo calldata assetInfo, uint256 index) external onlyAdmin {\\n        _addAssetInfoAt(assetInfo, index);\\n    }\\n\\n    function _addAssetInfoAt(AssetInfo calldata assetInfo, uint256 index) internal {\\n        uint256 currentlength = assetInfos.length;\\n        // expand array id needed\\n        if (currentlength == 0 || currentlength - 1 < index) {\\n            uint256 additionalCount = index - currentlength + 1;\\n            for (uint8 i = 0; i < additionalCount; i++) {\\n                assetInfos.push();\\n            }\\n        }\\n        assetInfos[index] = assetInfo;\\n        assetInfoPositions[assetInfo.asset] = index;\\n        emit UpdatedAssetInfo(index, assetInfo.asset, assetInfo.priceGetter);\\n    }\\n\\n    function setWeights(AssetWeight[] calldata _assetWeights) external onlyAdmin {\\n        uint256 totalTarget = 0;\\n        for (uint8 i = 0; i < _assetWeights.length; i++) {\\n            AssetWeight memory assetWeight = _assetWeights[i];\\n            require(assetWeight.asset != address(0), \\\"weight without asset\\\");\\n            require(\\n                assetWeight.minWeight <= assetWeight.targetWeight,\\n                \\\"minWeight shouldn't higher than targetWeight\\\"\\n            );\\n            require(\\n                assetWeight.targetWeight <= assetWeight.maxWeight,\\n                \\\"targetWeight shouldn't higher than maxWeight\\\"\\n            );\\n            totalTarget += assetWeight.targetWeight;\\n        }\\n        require(totalTarget == TOTAL_WEIGHT, \\\"Total target should equal to TOTAL_WEIGHT\\\");\\n\\n        for (uint8 i = 0; i < _assetWeights.length; i++) {\\n            _addWeightAt(_assetWeights[i], i);\\n            assetWeightPositions[assetWeights[i].asset] = i;\\n        }\\n\\n        // truncate if need\\n        if (assetWeights.length > _assetWeights.length) {\\n            uint256 removeCount = assetWeights.length - _assetWeights.length;\\n            for (uint8 i = 0; i < removeCount; i++) {\\n                assetWeights.pop();\\n            }\\n        }\\n    }\\n\\n    function _addWeightAt(AssetWeight memory assetWeight, uint256 index) internal {\\n        uint256 currentlength = assetWeights.length;\\n        // expand if need\\n        if (currentlength == 0 || currentlength - 1 < index) {\\n            uint256 additionalCount = index - currentlength + 1;\\n            for (uint8 i = 0; i < additionalCount; i++) {\\n                assetWeights.push();\\n            }\\n        }\\n        assetWeights[index] = assetWeight;\\n        emit UpdatedAssetWeight(\\n            index,\\n            assetWeight.asset,\\n            assetWeight.minWeight,\\n            assetWeight.targetWeight,\\n            assetWeight.maxWeight\\n        );\\n    }\\n\\n    function getAssetInfo(address asset) external view returns (AssetInfo memory) {\\n        return assetInfos[assetInfoPositions[asset]];\\n    }\\n\\n    function getAllAssetInfos() external view returns (AssetInfo[] memory) {\\n        return assetInfos;\\n    }\\n\\n    function getAssetWeight(address asset) external view returns (AssetWeight memory) {\\n        return assetWeights[assetWeightPositions[asset]];\\n    }\\n\\n    function getAllAssetWeights() external view returns (AssetWeight[] memory) {\\n        return assetWeights;\\n    }\\n}\\n\",\"keccak256\":\"0x2f192bc7bc754d6b4f05bc0d6a8cdade1c0713d58a7fdef14a7dfbee9a4a7fb6\",\"license\":\"GPL-3.0\"},\"contracts/token_exchanges/Usdc2AUsdcTokenExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/ITokenExchange.sol\\\";\\nimport \\\"../interfaces/IConnector.sol\\\";\\n\\ncontract Usdc2AUsdcTokenExchange is ITokenExchange {\\n    IConnector public aaveConnector;\\n    IERC20 public usdcToken;\\n    IERC20 public aUsdcToken;\\n\\n    constructor(\\n        address _aaveConnector,\\n        address _usdcToken,\\n        address _aUsdcToken\\n    ) {\\n        require(_aaveConnector != address(0), \\\"Zero address not allowed\\\");\\n        require(_usdcToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_aUsdcToken != address(0), \\\"Zero address not allowed\\\");\\n\\n        aaveConnector = IConnector(_aaveConnector);\\n        usdcToken = IERC20(_usdcToken);\\n        aUsdcToken = IERC20(_aUsdcToken);\\n    }\\n\\n    function exchange(\\n        address spender,\\n        IERC20 from,\\n        address receiver,\\n        IERC20 to,\\n        uint256 amount\\n    ) external override {\\n        require(\\n            (from == usdcToken && to == aUsdcToken) || (from == aUsdcToken && to == usdcToken),\\n            \\\"Usdc2AUsdcTokenExchange: Some token not compatible\\\"\\n        );\\n\\n        if (amount == 0) {\\n            from.transfer(spender, from.balanceOf(address(this)));\\n            return;\\n        }\\n\\n        if (from == usdcToken && to == aUsdcToken) {\\n            //TODO: denominator usage\\n            uint256 denominator = 10**(18 - IERC20Metadata(address(usdcToken)).decimals());\\n            amount = amount / denominator;\\n\\n            require(\\n                usdcToken.balanceOf(address(this)) >= amount,\\n                \\\"Usdc2AUsdcTokenExchange: Not enough usdcToken\\\"\\n            );\\n\\n            // check after denormilization\\n            if (amount == 0) {\\n                from.transfer(spender, from.balanceOf(address(this)));\\n                return;\\n            }\\n\\n            usdcToken.transfer(address(aaveConnector), amount);\\n            aaveConnector.stake(address(usdcToken), amount, receiver);\\n        } else {\\n            //TODO: denominator usage\\n            uint256 denominator = 10**(18 - IERC20Metadata(address(aUsdcToken)).decimals());\\n            amount = amount / denominator;\\n\\n            require(\\n                aUsdcToken.balanceOf(address(this)) >= amount,\\n                \\\"Usdc2AUsdcTokenExchange: Not enough aUsdcToken\\\"\\n            );\\n\\n            // check after denormilization\\n            if (amount == 0) {\\n                from.transfer(spender, from.balanceOf(address(this)));\\n                return;\\n            }\\n\\n            aUsdcToken.transfer(address(aaveConnector), amount);\\n            uint256 withdrewAmount = aaveConnector.unstake(address(usdcToken), amount, receiver);\\n\\n            //TODO: may be add some checks for withdrewAmount\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe61f82e5455aa2f331d611b0795272741c5dca74e0a3439d48d802f28d6949d6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c806391d14854116100ad578063d547741f11610071578063d547741f1461025e578063da909b0914610271578063e563037e14610284578063f3fef3a314610297578063fbfa77cf146102aa57600080fd5b806391d1485414610213578063a217fddf14610226578063b69f88c81461022e578063b9b8c24614610236578063bd0f10531461024957600080fd5b806336568abe116100f457806336568abe146101a7578063372500ab146101ba5780634d12fca4146101c25780636817031b146101ed57806368c32b9c1461020057600080fd5b806301ffc9a714610126578063153ee5541461014e578063248a9ca3146101635780632f2ff15d14610194575b600080fd5b610139610134366004611e94565b6102bd565b60405190151581526020015b60405180910390f35b61016161015c366004611ce5565b6102f4565b005b610186610171366004611e4b565b60009081526020819052604090206001015490565b604051908152602001610145565b6101616101a2366004611e64565b61036c565b6101616101b5366004611e64565b610397565b610161610415565b6003546101d5906001600160a01b031681565b6040516001600160a01b039091168152602001610145565b6101616101fb366004611ce5565b610472565b61016161020e366004611ce5565b6104e1565b610139610221366004611e64565b610550565b610186600081565b610161610579565b610161610244366004611ebe565b6105b7565b610186600080516020612a3d83398151915281565b61016161026c366004611e64565b61067a565b61016161027f366004611ce5565b6106a0565b6002546101d5906001600160a01b031681565b6101866102a5366004611ebe565b610727565b6001546101d5906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b14806102ee57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6102ff600033610550565b6103245760405162461bcd60e51b815260040161031b9061261e565b60405180910390fd5b6001600160a01b03811661034a5760405162461bcd60e51b815260040161031b9061264c565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b60008281526020819052604090206001015461038881336109db565b6103928383610a3f565b505050565b6001600160a01b03811633146104075760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161031b565b6104118282610ac3565b5050565b600480546040805163372500ab60e01b815290516001600160a01b039092169263372500ab92828201926000929082900301818387803b15801561045857600080fd5b505af115801561046c573d6000803e3d6000fd5b50505050565b61047d600033610550565b6104995760405162461bcd60e51b815260040161031b9061261e565b6001600160a01b0381166104bf5760405162461bcd60e51b815260040161031b9061264c565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6104ec600033610550565b6105085760405162461bcd60e51b815260040161031b9061261e565b6001600160a01b03811661052e5760405162461bcd60e51b815260040161031b9061264c565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b610591600080516020612a3d83398151915233610550565b6105ad5760405162461bcd60e51b815260040161031b906125e7565b6105b5610b28565b565b6105cf600080516020612a3d83398151915233610550565b6105eb5760405162461bcd60e51b815260040161031b906125e7565b60015460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390529083169063a9059cbb90604401602060405180830381600087803b15801561063957600080fd5b505af115801561064d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106719190611e30565b50610411610b28565b60008281526020819052604090206001015461069681336109db565b6103928383610ac3565b6106ab600033610550565b6106c75760405162461bcd60e51b815260040161031b9061261e565b6001600160a01b0381166106ed5760405162461bcd60e51b815260040161031b9061264c565b600380546001600160a01b0319166001600160a01b03831690811790915561072490600080516020612a3d8339815191529061036c565b50565b6000610741600080516020612a3d83398151915233610550565b61075d5760405162461bcd60e51b815260040161031b906125e7565b6107678383610ca9565b6001546040516370a0823160e01b81526001600160a01b0391821660048201526000918516906370a082319060240160206040518083038186803b1580156107ae57600080fd5b505afa1580156107c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e69190611f79565b9050808311156107f4578092505b6001546040516370a0823160e01b81526001600160a01b03918216600482015284918616906370a082319060240160206040518083038186803b15801561083a57600080fd5b505afa15801561084e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108729190611f79565b6001546040516370a0823160e01b81526001600160a01b0391821660048201529290911015916108fe918716906370a08231906024015b60206040518083038186803b1580156108c157600080fd5b505afa1580156108d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f99190611f79565b610d8a565b61090785610d8a565b604051602001610918929190612449565b604051602081830303815290604052906109455760405162461bcd60e51b815260040161031b91906125b4565b506001546040516317d5759960e31b81526001600160a01b038681166004830152336024830152604482018690529091169063beabacc890606401602060405180830381600087803b15801561099a57600080fd5b505af11580156109ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d29190611e30565b50919392505050565b6109e58282610550565b610411576109fd816001600160a01b03166014610e92565b610a08836020610e92565b604051602001610a1992919061253f565b60408051601f198184030181529082905262461bcd60e51b825261031b916004016125b4565b610a498282610550565b610411576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610a7f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610acd8282610550565b15610411576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600260009054906101000a90046001600160a01b03166001600160a01b031663d4341b996040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610b7857600080fd5b505af1925050508015610bad57506040513d6000823e601f3d908101601f19168201604052610baa9190810190611d02565b60015b610c5557610bb9612981565b806308c379a01415610c185750610bce61299d565b80610bd95750610c1a565b600080516020612a5d83398151915281604051610bf691906125b4565b60405180910390a18060405162461bcd60e51b815260040161031b91906125b4565b505b600080516020612a5d833981519152604051610c3590612683565b60405180910390a160405162461bcd60e51b815260040161031b90612683565b600080516020612a5d833981519152610c6e8251610d8a565b604051602001610c7e919061209e565b60408051601f1981840301815290829052610c98916125b4565b60405180910390a161072481611035565b6002546040516363fd35cf60e11b81526001600160a01b03848116600483015260248201849052600092169063c7fa6b9e90604401600060405180830381600087803b158015610cf857600080fd5b505af1158015610d0c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d349190810190611d02565b9050600080516020612a5d833981519152610d4f8251610d8a565b604051602001610d5f919061209e565b60408051601f1981840301815290829052610d79916125b4565b60405180910390a161039281611035565b606081610dae5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610dd85780610dc2816128da565b9150610dd19050600a836126e9565b9150610db2565b60008167ffffffffffffffff811115610df357610df361296b565b6040519080825280601f01601f191660200182016040528015610e1d576020820181803683370190505b509050815b8515610e8957610e3360018261280a565b9050610e40600a87612915565b610e4b9060306126d1565b60f81b828281518110610e6057610e60612955565b60200101906001600160f81b031916908160001a905350610e82600a876126e9565b9550610e22565b50949350505050565b60606000610ea18360026127eb565b610eac9060026126d1565b67ffffffffffffffff811115610ec457610ec461296b565b6040519080825280601f01601f191660200182016040528015610eee576020820181803683370190505b509050600360fc1b81600081518110610f0957610f09612955565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610f3857610f38612955565b60200101906001600160f81b031916908160001a9053506000610f5c8460026127eb565b610f679060016126d1565b90505b6001811115610fdf576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610f9b57610f9b612955565b1a60f81b828281518110610fb157610fb1612955565b60200101906001600160f81b031916908160001a90535060049490941c93610fd881612870565b9050610f6a565b50831561102e5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161031b565b9392505050565b600080516020612a5d83398151915261104e8251610d8a565b60405160200161105e9190611fb5565b60408051601f1981840301815290829052611078916125b4565b60405180910390a160015b801561041157506000805b82518160ff161015611cbf576000838260ff16815181106110b1576110b1612955565b602002602001015190508060c001511561121a57600080516020612a5d8339815191526110e08360ff16610d8a565b6110ed8360800151610d8a565b83604001516001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561112a57600080fd5b505afa15801561113e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111669190810190611eea565b84606001516001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156111a357600080fd5b505afa1580156111b7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111df9190810190611eea565b6040516020016111f29493929190612229565b60408051601f198184030181529082905261120c916125b4565b60405180910390a150611cad565b60008160800151905060008083604001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561126357600080fd5b505afa158015611277573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129b9190611f92565b6112a6906012612821565b6112b190600a612740565b90508360a00151156113515760408481015160015491516370a0823160e01b81526001600160a01b0392831660048201529116906370a082319060240160206040518083038186803b15801561130657600080fd5b505afa15801561131a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133e9190611f79565b915061134a81836127eb565b925061135e565b61135b81846126e9565b91505b826114b757600080516020612a5d83398151915261137e8660ff16610d8a565b61138785610d8a565b86604001516001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156113c457600080fd5b505afa1580156113d8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114009190810190611eea565b87606001516001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561143d57600080fd5b505afa158015611451573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114799190810190611eea565b60405160200161148c9493929190612183565b60408051601f19818403018152908290526114a6916125b4565b60405180910390a150505050611cad565b60408481015160015491516370a0823160e01b81526001600160a01b0392831660048201528492909116906370a082319060240160206040518083038186803b15801561150357600080fd5b505afa158015611517573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153b9190611f79565b10156116a657600080516020612a5d83398151915261155c8660ff16610d8a565b61156584610d8a565b86604001516001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156115a257600080fd5b505afa1580156115b6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115de9190810190611eea565b87606001516001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561161b57600080fd5b505afa15801561162f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116579190810190611eea565b60408981015160015491516370a0823160e01b81526001600160a01b03928316600482015261169292909116906370a08231906024016108a9565b60405160200161148c9594939291906122c2565b600154604085810151865191516317d5759960e31b81526001600160a01b0391821660048201529181166024830152604482018590529091169063beabacc890606401602060405180830381600087803b15801561170357600080fd5b505af1158015611717573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173b9190611e30565b50835160015460408087015160608801519151630c558ea760e31b81526001600160a01b0393841660048201819052918416602482015260448101919091529082166064820152608481018690529116906362ac75389060a401600060405180830381600087803b1580156117af57600080fd5b505af19250505080156117c0575060015b611a0a576117cc612981565b806308c379a014156118fb57506117e161299d565b806117ec57506118fd565b806117f685610d8a565b86604001516001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561183357600080fd5b505afa158015611847573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261186f9190810190611eea565b87606001516001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156118ac57600080fd5b505afa1580156118c0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118e89190810190611eea565b604051602001610a199493929190611fec565b505b61190683610d8a565b84604001516001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561194357600080fd5b505afa158015611957573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261197f9190810190611eea565b85606001516001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156119bc57600080fd5b505afa1580156119d0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119f89190810190611eea565b604051602001610a19939291906123a7565b600160c0850152600080516020612a5d833981519152611a2c60ff8716610d8a565b611a3585610d8a565b611a3e85610d8a565b87604001516001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015611a7b57600080fd5b505afa158015611a8f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ab79190810190611eea565b88606001516001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015611af457600080fd5b505afa158015611b08573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b309190810190611eea565b604051602001611b449594939291906120ca565b60408051601f1981840301815290829052611b5e916125b4565b60405180910390a1600080516020612a5d833981519152611b7e84610d8a565b85604001516001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015611bbb57600080fd5b505afa158015611bcf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611bf79190810190611eea565b86606001516001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015611c3457600080fd5b505afa158015611c48573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c709190810190611eea565b604051602001611c82939291906124c3565b60408051601f1981840301815290829052611c9c916125b4565b60405180910390a160019550505050505b80611cb7816128f5565b91505061108e565b50611083565b80518015158114611cd557600080fd5b919050565b8051611cd581612a27565b600060208284031215611cf757600080fd5b813561102e81612a27565b60006020808385031215611d1557600080fd5b825167ffffffffffffffff80821115611d2d57600080fd5b818501915085601f830112611d4157600080fd5b815181811115611d5357611d5361296b565b604091508151611d68858360051b01826128ad565b81815284810184860160e0808502870188018b1015611d8657600080fd5b60009650865b85811015611e205781838d031215611da2578788fd5b8651611dad81612887565b8351611db881612a27565b8152838a01518a820152611dcd888501611cda565b888201526060611dde818601611cda565b908201526080848101519082015260a0611df9818601611cc5565b9082015260c0611e0a858201611cc5565b9082015284529288019291810191600101611d8c565b50929a9950505050505050505050565b600060208284031215611e4257600080fd5b61102e82611cc5565b600060208284031215611e5d57600080fd5b5035919050565b60008060408385031215611e7757600080fd5b823591506020830135611e8981612a27565b809150509250929050565b600060208284031215611ea657600080fd5b81356001600160e01b03198116811461102e57600080fd5b60008060408385031215611ed157600080fd5b8235611edc81612a27565b946020939093013593505050565b600060208284031215611efc57600080fd5b815167ffffffffffffffff80821115611f1457600080fd5b818401915084601f830112611f2857600080fd5b815181811115611f3a57611f3a61296b565b6040519150611f53601f8201601f1916602001836128ad565b808252856020828501011115611f6857600080fd5b610e89816020840160208601612844565b600060208284031215611f8b57600080fd5b5051919050565b600060208284031215611fa457600080fd5b815160ff8116811461102e57600080fd5b60008251611fc7818460208701612844565b7220616374696f6e7320746f206578656375746560681b920191825250601301919050565b60008551611ffe818460208a01612844565b80830190507f0a2b20616374696f6e2e746f6b656e45786368616e67652e65786368616e676581526101d160f51b60208201528551612044816022840160208a01612844565b65010333937b6960d51b60229290910191820152845161206b816028840160208901612844565b630103a37960e51b60289290910191820152835161209081602c840160208801612844565b01602c019695505050505050565b600082516120b0818460208701612844565b6720616374696f6e7360c01b920191825250600801919050565b600086516120dc818460208b01612844565b6901022bc31b430b733b2960b51b908301908152865161210381600a840160208b01612844565b63010169f160e51b600a9290910191820152855161212881600e840160208a01612844565b65010333937b6960d51b600e9290910191820152845161214f816014840160208901612844565b630103a37960e51b601492909101918201528351612174816018840160208801612844565b01601801979650505050505050565b6000855160206121968285838b01612844565b7f20536b6970207a65726f20616d6f756e7420616374696f6e3a2000000000000091840191825286516121cf81601a8501848b01612844565b65010333937b6960d51b601a939091019283015285516121f481838501848a01612844565b630103a37960e51b92018181019290925284516122178160248501888501612844565b91909101602401979650505050505050565b6000855161223b818460208a01612844565b6f01029b5b4b81032bc32b1baba32b21d160851b9083019081528551612268816010840160208a01612844565b65010333937b6960d51b60109290910191820152845161228f816016840160208901612844565b630103a37960e51b6016929091019182015283516122b481601a840160208801612844565b01601a019695505050505050565b6000865160206122d58285838c01612844565b7f20536b6970206e6f7420656e6f7567682062616c616e636520666f72206578659184019182526a031baba329035b737bb9d160ad1b81830152875161232181602b85018b8501612844565b65010333937b6960d51b602b939091019283015286516123478160318501848b01612844565b630103a37960e51b60319390910192830152855161236b8160358501848a01612844565b6801031bab93932b73a160bd1b60359390910192830152845161239481603e8501848901612844565b91909101603e0198975050505050505050565b7f616374696f6e2e746f6b656e45786368616e67652e65786368616e67653a204e815268037903932b0b9b7b7160bd1b6020820152600084516123f1816029850160208901612844565b65010333937b6960d51b602991840191820152845161241781602f840160208901612844565b630103a37960e51b602f9290910191820152835161243c816033840160208801612844565b0160330195945050505050565b7f496e207661756c74206e6f7420656e6f75676820666f72207472616e736665728152690102fb0b6b7bab73a1d160b51b60208201526000835161249481602a850160208801612844565b620101e160ed1b602a9184019182015283516124b781602d840160208801612844565b01602d01949350505050565b68022bc31b430b733b2960bd1b8152600084516124e7816009850160208901612844565b65010333937b6960d51b600991840191820152845161250d81600f840160208901612844565b630103a37960e51b600f92909101918201528351612532816013840160208801612844565b0160130195945050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612577816017850160208801612844565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516125a8816028840160208801612844565b01602801949350505050565b60208152600082518060208401526125d3816040850160208701612844565b601f01601f19169190910160400192915050565b6020808252601b908201527f43616c6c6572206973206e6f74207468652045584348414e4745520000000000604082015260600190565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b60208082526018908201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604082015260600190565b6020808252602e908201527f62616c616e63654f6e496e766573743a6275696c6442616c616e63654163746960408201526d37b7399d102737903932b0b9b7b760911b606082015260800190565b600082198211156126e4576126e4612929565b500190565b6000826126f8576126f861293f565b500490565b600181815b8085111561273857816000190482111561271e5761271e612929565b8085161561272b57918102915b93841c9390800290612702565b509250929050565b600061102e60ff841683600082612759575060016102ee565b81612766575060006102ee565b816001811461277c5760028114612786576127a2565b60019150506102ee565b60ff84111561279757612797612929565b50506001821b6102ee565b5060208310610133831016604e8410600b84101617156127c5575081810a6102ee565b6127cf83836126fd565b80600019048211156127e3576127e3612929565b029392505050565b600081600019048311821515161561280557612805612929565b500290565b60008282101561281c5761281c612929565b500390565b600060ff821660ff84168082101561283b5761283b612929565b90039392505050565b60005b8381101561285f578181015183820152602001612847565b8381111561046c5750506000910152565b60008161287f5761287f612929565b506000190190565b60e0810181811067ffffffffffffffff821117156128a7576128a761296b565b60405250565b601f8201601f1916810167ffffffffffffffff811182821017156128d3576128d361296b565b6040525050565b60006000198214156128ee576128ee612929565b5060010190565b600060ff821660ff81141561290c5761290c612929565b60010192915050565b6000826129245761292461293f565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d111561299a5760046000803e5060005160e01c5b90565b600060443d10156129ab5790565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156129db57505050505090565b82850191508151818111156129f35750505050505090565b843d8701016020828501011115612a0d5750505050505090565b612a1c602082860101876128ad565b509095945050505050565b6001600160a01b038116811461072457600080fdfe3eb675f159e6ca6cf5de6bfbbc8c4521cfd428f5e9166e51094d5898504caf2d0f8db0708c4e6b233e2c285fe1ed66015dee71bd374ac8e835534be5f592d6a2a2646970667358221220b77f1d240881e49e50c4d93102db6f2535ab28c98fd2d2313fa8c5054a02342964736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimRewards()": {
        "notice": "Claim rewards from Curve gauge where we have staked LP tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 62,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)"
      },
      {
        "astId": 4559,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "vault",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Vault)6081"
      },
      {
        "astId": 4562,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "balancer",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(Balancer)2554"
      },
      {
        "astId": 4564,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "exchanger",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4567,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "rewardManager",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IRewardManager)9932"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(Balancer)2554": {
        "encoding": "inplace",
        "label": "contract Balancer",
        "numberOfBytes": "20"
      },
      "t_contract(IRewardManager)9932": {
        "encoding": "inplace",
        "label": "contract IRewardManager",
        "numberOfBytes": "20"
      },
      "t_contract(Vault)6081": {
        "encoding": "inplace",
        "label": "contract Vault",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)57_storage"
      },
      "t_struct(RoleData)57_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 54,
            "contract": "contracts/PortfolioManager.sol:PortfolioManager",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 56,
            "contract": "contracts/PortfolioManager.sol:PortfolioManager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}