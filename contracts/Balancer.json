{
  "address": "0x0179Ad96127904202629B95125c5a12565E47120",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "ConsoleLog",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "actionBuildersInOrder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "actionBuilder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "addActionBuilderAt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "withdrawToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "buildBalanceActions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract ITokenExchange",
              "name": "tokenExchange",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "code",
              "type": "bytes32"
            },
            {
              "internalType": "contract IERC20",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "exchangeAll",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "executed",
              "type": "bool"
            }
          ],
          "internalType": "struct IActionBuilder.ExchangeAction[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buildBalanceActions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract ITokenExchange",
              "name": "tokenExchange",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "code",
              "type": "bytes32"
            },
            {
              "internalType": "contract IERC20",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "exchangeAll",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "executed",
              "type": "bool"
            }
          ],
          "internalType": "struct IActionBuilder.ExchangeAction[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "m2m",
      "outputs": [
        {
          "internalType": "contract IMark2Market",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_actionBuildersInOrder",
          "type": "address[]"
        }
      ],
      "name": "setActionBuilders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_m2m",
          "type": "address"
        }
      ],
      "name": "setMark2Market",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xae9e5cd9d0543f8d840d3baa779923f4936dc9ede56a5905e5a252239721f060",
  "receipt": {
    "to": null,
    "from": "0x5CB01385d3097b6a189d1ac8BA3364D900666445",
    "contractAddress": "0x0179Ad96127904202629B95125c5a12565E47120",
    "transactionIndex": 45,
    "gasUsed": "1758404",
    "logsBloom": "0x
    "blockHash": "0xcbd90e44ada6fd60dd919b4d1051231893af47b217a3c6d6e905905cac7cdea9",
    "transactionHash": "0xae9e5cd9d0543f8d840d3baa779923f4936dc9ede56a5905e5a252239721f060",
    "logs": [
      {
        "transactionIndex": 45,
        "blockNumber": 21746804,
        "transactionHash": "0xae9e5cd9d0543f8d840d3baa779923f4936dc9ede56a5905e5a252239721f060",
        "address": "0x0179Ad96127904202629B95125c5a12565E47120",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005cb01385d3097b6a189d1ac8ba3364d900666445",
          "0x0000000000000000000000005cb01385d3097b6a189d1ac8ba3364d900666445"
        ],
        "data": "0x",
        "logIndex": 472,
        "blockHash": "0xcbd90e44ada6fd60dd919b4d1051231893af47b217a3c6d6e905905cac7cdea9"
      },
      {
        "transactionIndex": 45,
        "blockNumber": 21746804,
        "transactionHash": "0xae9e5cd9d0543f8d840d3baa779923f4936dc9ede56a5905e5a252239721f060",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005cb01385d3097b6a189d1ac8ba3364d900666445",
          "0x000000000000000000000000f0245f6251bef9447a08766b9da2b07b28ad80b0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000bb69c60dbfb000000000000000000000000000000000000000000000000000fb810082b35495800000000000000000000000000000000000000000000000526f8276a89acb9ef1000000000000000000000000000000000000000000000000fac596bca594e580000000000000000000000000000000000000000000000052703de06ea88b4ef1",
        "logIndex": 473,
        "blockHash": "0xcbd90e44ada6fd60dd919b4d1051231893af47b217a3c6d6e905905cac7cdea9"
      }
    ],
    "blockNumber": 21746804,
    "cumulativeGasUsed": "13199075",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "4b2c02ad00a20f5dc92f2cdd9d4eb77f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"ConsoleLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"actionBuildersInOrder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"actionBuilder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"addActionBuilderAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"withdrawToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"buildBalanceActions\",\"outputs\":[{\"components\":[{\"internalType\":\"contract ITokenExchange\",\"name\":\"tokenExchange\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exchangeAll\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct IActionBuilder.ExchangeAction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buildBalanceActions\",\"outputs\":[{\"components\":[{\"internalType\":\"contract ITokenExchange\",\"name\":\"tokenExchange\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exchangeAll\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct IActionBuilder.ExchangeAction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"m2m\",\"outputs\":[{\"internalType\":\"contract IMark2Market\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_actionBuildersInOrder\",\"type\":\"address[]\"}],\"name\":\"setActionBuilders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_m2m\",\"type\":\"address\"}],\"name\":\"setMark2Market\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Balancer.sol\":\"Balancer\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x084f583de2c714665b0304529fe8b826a2809f29d03314e4dd9eea926e4bb0f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/Balancer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./interfaces/IMark2Market.sol\\\";\\nimport \\\"./interfaces/IActionBuilder.sol\\\";\\nimport \\\"./interfaces/ITokenExchange.sol\\\";\\nimport \\\"./token_exchanges/Usdc2AUsdcTokenExchange.sol\\\";\\n\\n//TODO: use AccessControl or Ownable from zeppelin\\ncontract Balancer is AccessControl {\\n    // ---  fields\\n\\n    IMark2Market public m2m;\\n    address[] public actionBuildersInOrder;\\n\\n    // ---  events\\n\\n    //TODO: remove\\n    event ConsoleLog(string str);\\n\\n    // ---  modifiers\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    // ---  constructor\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    // ---  setters\\n\\n    function setMark2Market(address _m2m) external onlyAdmin {\\n        require(_m2m != address(0), \\\"Zero address not allowed\\\");\\n        m2m = IMark2Market(_m2m);\\n    }\\n\\n    function setActionBuilders(address[] calldata _actionBuildersInOrder) external onlyAdmin {\\n        for (uint8 i = 0; i < _actionBuildersInOrder.length; i++) {\\n            _addActionBuilderAt(_actionBuildersInOrder[i], i);\\n        }\\n        // truncate array if needed\\n        if (actionBuildersInOrder.length > _actionBuildersInOrder.length) {\\n            uint256 removeCount = actionBuildersInOrder.length - _actionBuildersInOrder.length;\\n            for (uint8 i = 0; i < removeCount; i++) {\\n                actionBuildersInOrder.pop();\\n            }\\n        }\\n    }\\n\\n    function addActionBuilderAt(address actionBuilder, uint256 index) external onlyAdmin {\\n        _addActionBuilderAt(actionBuilder, index);\\n    }\\n\\n    function _addActionBuilderAt(address actionBuilder, uint256 index) internal {\\n        uint256 currentlength = actionBuildersInOrder.length;\\n        // expand array id needed\\n        if (currentlength == 0 || currentlength - 1 < index) {\\n            uint256 additionalCount = index - currentlength + 1;\\n            for (uint8 i = 0; i < additionalCount; i++) {\\n                actionBuildersInOrder.push();\\n            }\\n        }\\n        actionBuildersInOrder[index] = actionBuilder;\\n    }\\n\\n    // ---  logic\\n\\n    function buildBalanceActions() public returns (IActionBuilder.ExchangeAction[] memory) {\\n        // Same to zero withdrawal balance\\n        return buildBalanceActions(IERC20(address(0)), 0);\\n    }\\n\\n    function buildBalanceActions(IERC20 withdrawToken, uint256 withdrawAmount)\\n        public\\n        returns (IActionBuilder.ExchangeAction[] memory)\\n    {\\n        try m2m.assetPricesForBalance(address(withdrawToken), withdrawAmount) returns (\\n            IMark2Market.TotalAssetPrices memory assetPrices\\n        ) {\\n            // // 1. get current prices from M2M\\n            // IMark2Market.TotalAssetPrices memory assetPrices = m2m.assetPricesForBalance(\\n            //     address(withdrawToken),\\n            //     withdrawAmount\\n            // );\\n\\n            // 2. calc total price\\n            uint256 totalUsdcPrice = assetPrices.totalUsdcPrice;\\n\\n            //TODO: remove\\n            log(\\\"totalUsdcPrice: \\\", totalUsdcPrice);\\n\\n            // 3. make actions\\n            IActionBuilder.ExchangeAction[]\\n                memory actionOrder = new IActionBuilder.ExchangeAction[](\\n                    actionBuildersInOrder.length\\n                );\\n            //TODO: remove\\n            log(\\\"actionBuildersInOrder.length: \\\", actionBuildersInOrder.length);\\n\\n            for (uint8 i = 0; i < actionBuildersInOrder.length; i++) {\\n                try\\n                    IActionBuilder(actionBuildersInOrder[i]).buildAction(assetPrices, actionOrder)\\n                returns (IActionBuilder.ExchangeAction memory action) {\\n                    actionOrder[i] = action;\\n                } catch Error(string memory reason) {\\n                    revert(\\n                        string(\\n                            abi.encodePacked(\\n                                uint2str(i),\\n                                \\\" \\\",\\n                                reason,\\n                                \\\"| IActionBuilder.buildAction: code: \\\",\\n                                IActionBuilder(actionBuildersInOrder[i]).getActionCode()\\n                            )\\n                        )\\n                    );\\n                } catch {\\n                    revert(\\n                        string(\\n                            abi.encodePacked(\\n                                uint2str(i),\\n                                \\\"| IActionBuilder.buildAction: code: \\\",\\n                                IActionBuilder(actionBuildersInOrder[i]).getActionCode()\\n                            )\\n                        )\\n                    );\\n                }\\n\\n                // IActionBuilder.ExchangeAction memory action = IActionBuilder(actionBuildersInOrder[i])\\n                //     .buildAction(assetPrices, actionOrder);\\n                // actionOrder[i] = action;\\n            }\\n            //TODO: remove\\n            log(\\\"actionOrder.length: \\\", actionOrder.length);\\n\\n            return actionOrder;\\n        } catch Error(string memory reason) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        reason,\\n                        \\\"| m2m.assetPricesForBalance: No reason \\\",\\n                        \\\" withdrawToken \\\",\\n                        toAsciiString(address(withdrawToken)),\\n                        \\\" withdrawAmount \\\",\\n                        uint2str(withdrawAmount)\\n                    )\\n                )\\n            );\\n        } catch {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"m2m.assetPricesForBalance: No reason \\\",\\n                        \\\" withdrawToken \\\",\\n                        toAsciiString(address(withdrawToken)),\\n                        \\\" withdrawAmount \\\",\\n                        uint2str(withdrawAmount)\\n                    )\\n                )\\n            );\\n        }\\n\\n        // // 1. get current prices from M2M\\n        // IMark2Market.TotalAssetPrices memory assetPrices = m2m.assetPricesForBalance(\\n        //     address(withdrawToken),\\n        //     withdrawAmount\\n        // );\\n\\n        // // 2. calc total price\\n        // uint256 totalUsdcPrice = assetPrices.totalUsdcPrice;\\n\\n        // //TODO: remove\\n        // log(\\\"totalUsdcPrice: \\\", totalUsdcPrice);\\n\\n        // // 3. make actions\\n        // IActionBuilder.ExchangeAction[]\\n        //     memory actionOrder = new IActionBuilder.ExchangeAction[](\\n        //         actionBuildersInOrder.length\\n        //     );\\n        // //TODO: remove\\n        // log(\\\"actionBuildersInOrder.length: \\\", actionBuildersInOrder.length);\\n\\n        // for (uint8 i = 0; i < actionBuildersInOrder.length; i++) {\\n        //     IActionBuilder.ExchangeAction memory action = IActionBuilder(actionBuildersInOrder[i])\\n        //         .buildAction(assetPrices, actionOrder);\\n        //     actionOrder[i] = action;\\n        // }\\n        // //TODO: remove\\n        // log(\\\"actionOrder.length: \\\", actionOrder.length);\\n\\n        // return actionOrder;\\n    }\\n\\n    //TODO: remove\\n    function log(string memory message, uint value) internal {\\n        emit ConsoleLog(string(abi.encodePacked(message, uint2str(value))));\\n    }\\n\\n    //TODO: remove\\n    function toAsciiString(address x) internal pure returns (string memory) {\\n        bytes memory s = new bytes(40);\\n        for (uint i = 0; i < 20; i++) {\\n            bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8 * (19 - i)))));\\n            bytes1 hi = bytes1(uint8(b) / 16);\\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n            s[2 * i] = char(hi);\\n            s[2 * i + 1] = char(lo);\\n        }\\n        return string(s);\\n    }\\n\\n    //TODO: remove\\n    function char(bytes1 b) internal pure returns (bytes1 c) {\\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n        else return bytes1(uint8(b) + 0x57);\\n    }\\n\\n    //TODO: remove\\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = _i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            bstr[k] = bytes1(uint8(48 + (_i % 10)));\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n}\\n\",\"keccak256\":\"0xb257bb180e7d2f7ca0367edf3370096d10a4734e12d2eda0b776d69d72c1990c\",\"license\":\"MIT\"},\"contracts/interfaces/IActionBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IMark2Market.sol\\\";\\nimport \\\"./ITokenExchange.sol\\\";\\n\\ninterface IActionBuilder {\\n    struct ExchangeAction {\\n        ITokenExchange tokenExchange;\\n        bytes32 code;\\n        IERC20 from;\\n        IERC20 to;\\n        uint256 amount; // amount at usdc with 6 digit fractions\\n        bool exchangeAll; // mean that we should trade all tokens to zero ownership\\n        bool executed;\\n    }\\n\\n    function getActionCode() external pure returns (bytes32);\\n\\n    function buildAction(\\n        IMark2Market.TotalAssetPrices memory assetPrices,\\n        ExchangeAction[] memory actions\\n    ) external view returns (ExchangeAction memory);\\n}\\n\",\"keccak256\":\"0x9ae4c540203b167b7450eac4b735c820a834fb228825254c9aeeb1c520392119\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/// @title Common inrterface to DeFi protocol connectors\\n/// @author @Stanta\\n/// @notice Every connector have to implement this function\\n/// @dev Choosing of connector releasing by changing address of connector's contract\\ninterface IConnector {\\n    function stake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiar\\n    ) external;\\n\\n    function unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _to\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xf418605c420c689e5cdd7cf9a49d8906f8c5631a629a5d6eea6d9f2eba79fdb8\",\"license\":\"MIT\"},\"contracts/interfaces/IMark2Market.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IMark2Market {\\n    struct AssetPrices {\\n        address asset;\\n        uint256 amountInVault; // balance on Vault\\n        uint256 usdcPriceInVault; // current total price of balance at USDC\\n        uint256 diffToTarget; // diff usdcPriceInVault to target in portfolio\\n        int8 diffToTargetSign; // diff sign usdcPriceInVault to target in portfolio\\n        bool targetIsZero; // mean that we should trade all tokens to zero ownership\\n        //\\n        uint256 usdcPriceDenominator;\\n        uint256 usdcSellPrice;\\n        uint256 usdcBuyPrice;\\n        //\\n        uint256 decimals;\\n        string name;\\n        string symbol;\\n    }\\n\\n    struct TotalAssetPrices {\\n        AssetPrices[] assetPrices;\\n        uint256 totalUsdcPrice;\\n    }\\n\\n    function assetPrices() external view returns (TotalAssetPrices memory);\\n\\n    function assetPricesForBalance() external returns (TotalAssetPrices memory);\\n\\n    function assetPricesForBalance(address withdrawToken, uint256 withdrawAmount)\\n        external\\n        returns (TotalAssetPrices memory);\\n}\\n\",\"keccak256\":\"0x337e6890f27d2fd68742e24f9b367952b8b38a2f0d6c6ad15e67e1795ceaaa0d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ITokenExchange.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITokenExchange {\\n\\n    function exchange(\\n        address spender,\\n        IERC20 from,\\n        address receiver,\\n        IERC20 to,\\n        uint256 amount\\n    ) external;\\n\\n}\\n\",\"keccak256\":\"0x5b882bdf0c53f3ad4e7a281ad884af921b2c7ff16517bf56e50f253fc58b5bbc\",\"license\":\"GPL-3.0\"},\"contracts/token_exchanges/Usdc2AUsdcTokenExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/ITokenExchange.sol\\\";\\nimport \\\"../interfaces/IConnector.sol\\\";\\n\\ncontract Usdc2AUsdcTokenExchange is ITokenExchange {\\n    IConnector public aaveConnector;\\n    IERC20 public usdcToken;\\n    IERC20 public aUsdcToken;\\n\\n    constructor(\\n        address _aaveConnector,\\n        address _usdcToken,\\n        address _aUsdcToken\\n    ) {\\n        require(_aaveConnector != address(0), \\\"Zero address not allowed\\\");\\n        require(_usdcToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_aUsdcToken != address(0), \\\"Zero address not allowed\\\");\\n\\n        aaveConnector = IConnector(_aaveConnector);\\n        usdcToken = IERC20(_usdcToken);\\n        aUsdcToken = IERC20(_aUsdcToken);\\n    }\\n\\n    function exchange(\\n        address spender,\\n        IERC20 from,\\n        address receiver,\\n        IERC20 to,\\n        uint256 amount\\n    ) external override {\\n        require(\\n            (from == usdcToken && to == aUsdcToken) || (from == aUsdcToken && to == usdcToken),\\n            \\\"Usdc2AUsdcTokenExchange: Some token not compatible\\\"\\n        );\\n\\n        if (amount == 0) {\\n            from.transfer(spender, from.balanceOf(address(this)));\\n            return;\\n        }\\n\\n        if (from == usdcToken && to == aUsdcToken) {\\n            //TODO: denominator usage\\n            uint256 denominator = 10**(18 - IERC20Metadata(address(usdcToken)).decimals());\\n            amount = amount / denominator;\\n\\n            require(\\n                usdcToken.balanceOf(address(this)) >= amount,\\n                \\\"Usdc2AUsdcTokenExchange: Not enough usdcToken\\\"\\n            );\\n\\n            // check after denormilization\\n            if (amount == 0) {\\n                from.transfer(spender, from.balanceOf(address(this)));\\n                return;\\n            }\\n\\n            usdcToken.transfer(address(aaveConnector), amount);\\n            aaveConnector.stake(address(usdcToken), amount, receiver);\\n        } else {\\n            //TODO: denominator usage\\n            uint256 denominator = 10**(18 - IERC20Metadata(address(aUsdcToken)).decimals());\\n            amount = amount / denominator;\\n\\n            require(\\n                aUsdcToken.balanceOf(address(this)) >= amount,\\n                \\\"Usdc2AUsdcTokenExchange: Not enough aUsdcToken\\\"\\n            );\\n\\n            // check after denormilization\\n            if (amount == 0) {\\n                from.transfer(spender, from.balanceOf(address(this)));\\n                return;\\n            }\\n\\n            aUsdcToken.transfer(address(aaveConnector), amount);\\n            uint256 withdrewAmount = aaveConnector.unstake(address(usdcToken), amount, receiver);\\n\\n            //TODO: may be add some checks for withdrewAmount\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe61f82e5455aa2f331d611b0795272741c5dca74e0a3439d48d802f28d6949d6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c806386c9a1ac1161008c578063c7fa6b9e11610066578063c7fa6b9e146101ef578063d4341b991461020f578063d547741f14610217578063e92d65f71461022a57600080fd5b806386c9a1ac146101c157806391d14854146101d4578063a217fddf146101e757600080fd5b80632f2ff15d116100c85780632f2ff15d1461015d57806336568abe1461017057806337044771146101835780633d92c38b1461019657600080fd5b806301ffc9a7146100ef5780631ef70eca14610117578063248a9ca31461012c575b600080fd5b6101026100fd36600461135f565b61023d565b60405190151581526020015b60405180910390f35b61012a610125366004611288565b610274565b005b61014f61013a3660046112fd565b60009081526020819052604090206001015490565b60405190815260200161010e565b61012a61016b36600461132f565b610372565b61012a61017e36600461132f565b61039d565b61012a61019136600461123f565b610417565b6001546101a9906001600160a01b031681565b6040516001600160a01b03909116815260200161010e565b61012a6101cf36600461125c565b6104b6565b6101026101e236600461132f565b6104e7565b61014f600081565b6102026101fd36600461125c565b610510565b60405161010e919061188e565b6102026109eb565b61012a61022536600461132f565b6109fd565b6101a96102383660046112fd565b610a23565b60006001600160e01b03198216637965db0b60e01b148061026e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b61027f6000336104e7565b6102a45760405162461bcd60e51b815260040161029b906118b4565b60405180910390fd5b60005b60ff81168211156102fa576102e883838360ff168181106102ca576102ca611d39565b90506020020160208101906102df919061123f565b8260ff16610a4d565b806102f281611cc3565b9150506102a7565b5060025481101561036e57600254600090610316908390611bd8565b905060005b818160ff16101561036b57600280548061033757610337611d23565b600082815260209020810160001990810180546001600160a01b03191690550190558061036381611cc3565b91505061031b565b50505b5050565b60008281526020819052604090206001015461038e8133610afa565b6103988383610b38565b505050565b6001600160a01b038116331461040d5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161029b565b61036e8282610bbc565b6104226000336104e7565b61043e5760405162461bcd60e51b815260040161029b906118b4565b6001600160a01b0381166104945760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604482015260640161029b565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6104c16000336104e7565b6104dd5760405162461bcd60e51b815260040161029b906118b4565b61036e8282610a4d565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60015460405163734bd75d60e01b81526001600160a01b03848116600483015260248201849052606092169063734bd75d90604401600060405180830381600087803b15801561055f57600080fd5b505af192505050801561059457506040513d6000823e601f3d908101601f19168201604052610591919081019061142f565b60015b610630576105a0611d65565b806308c379a0141561060b57506105b5611d81565b806105c0575061060d565b806105ca85610c21565b6105d385610d68565b6040516020016105e59392919061164f565b60408051601f198184030181529082905262461bcd60e51b825261029b916004016118a1565b505b61061683610c21565b61061f83610d68565b6040516020016105e592919061177f565b60008160200151905061066b6040518060400160405280601081526020016f03a37ba30b62ab9b231a83934b1b29d160851b81525082610e70565b60025460009067ffffffffffffffff81111561068957610689611d4f565b6040519080825280602002602001820160405280156106f057816020015b6040805160e08101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c082015282526000199092019101816106a75790505b5060408051808201909152601e81527f616374696f6e4275696c64657273496e4f726465722e6c656e6774683a200000602082015260025491925061073491610e70565b60005b60025460ff821610156109a95760028160ff168154811061075a5761075a611d39565b600091825260209091200154604051638a0aeb8560e01b81526001600160a01b0390911690638a0aeb859061079590879086906004016118e2565b60e06040518083038186803b1580156107ad57600080fd5b505afa9250505080156107dd575060408051601f3d908101601f191682019092526107da91810190611389565b60015b610975576107e9611d65565b806308c379a014156108bf57506107fe611d81565b8061080957506108c1565b6108158260ff16610d68565b8160028460ff168154811061082c5761082c611d39565b6000918252602091829020015460408051630315a61160e31b815290516001600160a01b03909216926318ad308892600480840193829003018186803b15801561087557600080fd5b505afa158015610889573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ad9190611316565b6040516020016105e593929190611702565b505b6108cd8160ff16610d68565b60028260ff16815481106108e3576108e3611d39565b6000918252602091829020015460408051630315a61160e31b815290516001600160a01b03909216926318ad308892600480840193829003018186803b15801561092c57600080fd5b505afa158015610940573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109649190611316565b6040516020016105e5929190611752565b80838360ff168151811061098b5761098b611d39565b602002602001018190525050806109a181611cc3565b915050610737565b506109e160405180604001604052806014815260200173030b1ba34b7b727b93232b9173632b733ba341d160651b8152508251610e70565b925061026e915050565b60606109f8600080610510565b905090565b600082815260208190526040902060010154610a198133610afa565b6103988383610bbc565b60028181548110610a3357600080fd5b6000918252602090912001546001600160a01b0316905081565b600254801580610a66575081610a64600183611bd8565b105b15610ab3576000610a778284611bd8565b610a82906001611a3a565b905060005b818160ff161015610ab05760028054600101815560005280610aa881611cc3565b915050610a87565b50505b8260028381548110610ac757610ac7611d39565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505050565b610b0482826104e7565b61036e57610b1c816001600160a01b03166014610ed2565b610b27836020610ed2565b6040516020016105e5929190611819565b610b4282826104e7565b61036e576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610b783390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610bc682826104e7565b1561036e576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60408051602880825260608281019093526000919060208201818036833701905050905060005b6014811015610d61576000610c5e826013611bd8565b610c69906008611b98565b610c74906002611af0565b610c87906001600160a01b038716611a77565b60f81b9050600060108260f81c610c9e9190611a8b565b60f81b905060008160f81c6010610cb59190611bb7565b8360f81c610cc39190611bef565b60f81b9050610cd182611075565b85610cdd866002611b98565b81518110610ced57610ced611d39565b60200101906001600160f81b031916908160001a905350610d0d81611075565b85610d19866002611b98565b610d24906001611a3a565b81518110610d3457610d34611d39565b60200101906001600160f81b031916908160001a9053505050508080610d5990611ca8565b915050610c48565b5092915050565b606081610d8c5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610db65780610da081611ca8565b9150610daf9050600a83611a77565b9150610d90565b60008167ffffffffffffffff811115610dd157610dd1611d4f565b6040519080825280601f01601f191660200182016040528015610dfb576020820181803683370190505b509050815b8515610e6757610e11600182611bd8565b9050610e1e600a87611ce3565b610e29906030611a3a565b60f81b828281518110610e3e57610e3e611d39565b60200101906001600160f81b031916908160001a905350610e60600a87611a77565b9550610e00565b50949350505050565b7f0f8db0708c4e6b233e2c285fe1ed66015dee71bd374ac8e835534be5f592d6a282610e9b83610d68565b604051602001610eac929190611620565b60408051601f1981840301815290829052610ec6916118a1565b60405180910390a15050565b60606000610ee1836002611b98565b610eec906002611a3a565b67ffffffffffffffff811115610f0457610f04611d4f565b6040519080825280601f01601f191660200182016040528015610f2e576020820181803683370190505b509050600360fc1b81600081518110610f4957610f49611d39565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610f7857610f78611d39565b60200101906001600160f81b031916908160001a9053506000610f9c846002611b98565b610fa7906001611a3a565b90505b600181111561101f576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610fdb57610fdb611d39565b1a60f81b828281518110610ff157610ff1611d39565b60200101906001600160f81b031916908160001a90535060049490941c9361101881611c3e565b9050610faa565b50831561106e5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161029b565b9392505050565b6000600a60f883901c101561109c5761109360f883901c6030611a52565b60f81b92915050565b61109360f883901c6057611a52565b919050565b80516110ab81611e0b565b805180151581146110ab57600080fd5b8051600081900b81146110ab57600080fd5b600082601f8301126110ee57600080fd5b815167ffffffffffffffff81111561110857611108611d4f565b60405161111f601f8301601f191660200182611c7b565b81815284602083860101111561113457600080fd5b611145826020830160208701611c12565b949350505050565b6000610180828403121561116057600080fd5b611168611a10565b9050611173826110b0565b815260208201516020820152604082015160408201526060820151606082015261119f608083016110cb565b60808201526111b060a083016110bb565b60a082015260c082015160c082015260e082015160e08201526101008083015181830152506101208083015181830152506101408083015167ffffffffffffffff808211156111fe57600080fd5b61120a868387016110dd565b8385015261016092508285015191508082111561122657600080fd5b50611233858286016110dd565b82840152505092915050565b60006020828403121561125157600080fd5b813561106e81611e0b565b6000806040838503121561126f57600080fd5b823561127a81611e0b565b946020939093013593505050565b6000806020838503121561129b57600080fd5b823567ffffffffffffffff808211156112b357600080fd5b818501915085601f8301126112c757600080fd5b8135818111156112d657600080fd5b8660208260051b85010111156112eb57600080fd5b60209290920196919550909350505050565b60006020828403121561130f57600080fd5b5035919050565b60006020828403121561132857600080fd5b5051919050565b6000806040838503121561134257600080fd5b82359150602083013561135481611e0b565b809150509250929050565b60006020828403121561137157600080fd5b81356001600160e01b03198116811461106e57600080fd5b600060e0828403121561139b57600080fd5b60405160e0810181811067ffffffffffffffff821117156113be576113be611d4f565b60405282516113cc81611e0b565b81526020838101519082015260408301516113e681611e0b565b60408201526113f7606084016110b0565b60608201526080830151608082015261141260a084016110bb565b60a082015261142360c084016110bb565b60c08201529392505050565b6000602080838503121561144257600080fd5b825167ffffffffffffffff8082111561145a57600080fd5b908401906040828703121561146e57600080fd5b60405161147a81611c55565b82518281111561148957600080fd5b8301601f8101881361149a57600080fd5b8051838111156114ac576114ac611d4f565b8060051b6040516114bf88830182611c7b565b8281528781018489018386018a018d10156114d957600080fd5b60009350835b85811015611516578151898111156114f5578586fd5b6115038f8d838b010161114d565b845250918a0191908a01906001016114df565b50505084525050509183015192820192909252949350505050565b600081518084526020808501945080840160005b838110156115b357815180516001600160a01b03908116895284820151858a01526040808301518216908a0152606080830151909116908901526080808201519089015260a08082015115159089015260c09081015115159088015260e09096019590820190600101611545565b509495945050505050565b600081518084526115d6816020860160208601611c12565b601f01601f19169290920160200192915050565b7f7c2049416374696f6e4275696c6465722e6275696c64416374696f6e3a20636f815263032329d160e51b602082015260240190565b60008351611632818460208801611c12565b835190830190611646818360208801611c12565b01949350505050565b60008451611661818460208901611c12565b80830190507f7c206d326d2e6173736574507269636573466f7242616c616e63653a204e6f2081526603932b0b9b7b7160cd1b60208201526e0103bb4ba34323930bbaa37b5b2b71608d1b602782015284516116c4816036840160208901611c12565b6f0103bb4ba34323930bba0b6b7bab73a160851b6036929091019182015283516116f5816046840160208801611c12565b0160460195945050505050565b60008451611714818460208901611c12565b600160fd1b9083019081528451611732816001840160208901611c12565b6117406001828401016115ea565b94855250506020909201949350505050565b60008351611764818460208801611c12565b61176f8184016115ea565b9384525050602090910192915050565b7f6d326d2e6173736574507269636573466f7242616c616e63653a204e6f207265815264030b9b7b7160dd1b60208201526e0103bb4ba34323930bbaa37b5b2b71608d1b6025820152600083516117dd816034850160208801611c12565b6f0103bb4ba34323930bba0b6b7bab73a160851b603491840191820152835161180d816044840160208801611c12565b01604401949350505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611851816017850160208801611c12565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611882816028840160208801611c12565b01602801949350505050565b60208152600061106e6020830184611531565b60208152600061106e60208301846115be565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b6000604080835260808084018651838487015281815180845260a093508388019150838160051b8901016020808501945060005b838110156119e6578a8303609f19018552855180516001600160a01b0316845261018081840151858501528a8201518b86015260608083015190860152898201516119658b87018260000b9052565b50888201511515858a015260c0808301519086015260e0808301519086015261010080830151908601526101208083015190860152610140808301518187018390526119b3838801826115be565b9250505061016080830151925085820381870152506119d281836115be565b978401979684019694505050600101611916565b508b81015160608b0152898203908a0152611a01818b611531565b9b9a5050505050505050505050565b604051610180810167ffffffffffffffff81118282101715611a3457611a34611d4f565b60405290565b60008219821115611a4d57611a4d611cf7565b500190565b600060ff821660ff84168060ff03821115611a6f57611a6f611cf7565b019392505050565b600082611a8657611a86611d0d565b500490565b600060ff831680611a9e57611a9e611d0d565b8060ff84160491505092915050565b600181815b80851115611ae8578160001904821115611ace57611ace611cf7565b80851615611adb57918102915b93841c9390800290611ab2565b509250929050565b600061106e8383600082611b065750600161026e565b81611b135750600061026e565b8160018114611b295760028114611b3357611b4f565b600191505061026e565b60ff841115611b4457611b44611cf7565b50506001821b61026e565b5060208310610133831016604e8410600b8410161715611b72575081810a61026e565b611b7c8383611aad565b8060001904821115611b9057611b90611cf7565b029392505050565b6000816000190483118215151615611bb257611bb2611cf7565b500290565b600060ff821660ff84168160ff0481118215151615611b9057611b90611cf7565b600082821015611bea57611bea611cf7565b500390565b600060ff821660ff841680821015611c0957611c09611cf7565b90039392505050565b60005b83811015611c2d578181015183820152602001611c15565b8381111561036b5750506000910152565b600081611c4d57611c4d611cf7565b506000190190565b6040810181811067ffffffffffffffff82111715611c7557611c75611d4f565b60405250565b601f8201601f1916810167ffffffffffffffff81118282101715611ca157611ca1611d4f565b6040525050565b6000600019821415611cbc57611cbc611cf7565b5060010190565b600060ff821660ff811415611cda57611cda611cf7565b60010192915050565b600082611cf257611cf2611d0d565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115611d7e5760046000803e5060005160e01c5b90565b600060443d1015611d8f5790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715611dbf57505050505090565b8285019150815181811115611dd75750505050505090565b843d8701016020828501011115611df15750505050505090565b611e0060208286010187611c7b565b509095945050505050565b6001600160a01b0381168114611e2057600080fd5b5056fea2646970667358221220479b7a7f65b7442295beea23e95df5c6a224524c4bae5d07ed5e670d1fd70d7964736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 62,
        "contract": "contracts/Balancer.sol:Balancer",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)"
      },
      {
        "astId": 1902,
        "contract": "contracts/Balancer.sol:Balancer",
        "label": "m2m",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IMark2Market)9876"
      },
      {
        "astId": 1905,
        "contract": "contracts/Balancer.sol:Balancer",
        "label": "actionBuildersInOrder",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IMark2Market)9876": {
        "encoding": "inplace",
        "label": "contract IMark2Market",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)57_storage"
      },
      "t_struct(RoleData)57_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 54,
            "contract": "contracts/Balancer.sol:Balancer",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 56,
            "contract": "contracts/Balancer.sol:Balancer",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}