{
  "address": "0x4B901e2Db7C412D966689E8D3CF479294C456f1e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_crvToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "denominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUsdcBuyPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUsdcSellPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x70a13571b4f70d1980d376411b2c455ea3e60b84b09d18bf18c845730561405a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x4B901e2Db7C412D966689E8D3CF479294C456f1e",
    "transactionIndex": 0,
    "gasUsed": "442777",
    "logsBloom": "0x
    "blockHash": "0x11018c40f7026eab572d110cff1b3f8c9a4047c0db8b4bf0fcf8fde988bb8829",
    "transactionHash": "0x70a13571b4f70d1980d376411b2c455ea3e60b84b09d18bf18c845730561405a",
    "logs": [],
    "blockNumber": 21675025,
    "cumulativeGasUsed": "442777",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa5e0829caced8ffdd4de3c43696c57f7d7a678ff",
    "0x2791bca1f2de4661ed88a30c99a7a9449aa84174",
    "0x172370d5Cd63279eFa6d502DAB29171933a610AF"
  ],
  "solcInputHash": "4b2c02ad00a20f5dc92f2cdd9d4eb77f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crvToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsdcBuyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsdcSellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"denominator()\":{\"notice\":\"Denominator for normalization. Default 10**18.\"},\"getUsdcBuyPrice()\":{\"notice\":\"Token buy price at USDC. Amount of USDC we should spend to buy one token. Returned value is [USDC/token] Usage: tokenAmount = usdcAmount * denominator() / getUsdcBuyPrice() Normilized to 10**18\"},\"getUsdcSellPrice()\":{\"notice\":\"Token sell price at USDC. Amount of USDC we got if sell one token. Returned value is [USDC/token] Usage: usdcAmount = tokenAmount * getUsdcSellPrice() / denominator() Normilized to 10**18\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/price_getters/CrvPriceGetter.sol\":\"CrvPriceGetter\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/connectors/swaps/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    \\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n \\n\\n}\\n\",\"keccak256\":\"0xbb39ec76d795136f5b13485e889d211527ae5af119ab32699337ed793b1d84f7\"},\"contracts/connectors/swaps/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n    \\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function pairFor(address factoryC, address tokenA, address tokenB) external view returns (address pair) ;\\n\\n}\\n\",\"keccak256\":\"0xdcd670f2feb6b5541bd0666675369b1fe2808c9a0ab10b88a7e0b487c156a856\"},\"contracts/interfaces/IPriceGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IPriceGetter {\\n    /**\\n     * Token buy price at USDC. Amount of USDC we should spend to buy one token.\\n     * Returned value is [USDC/token]\\n     * Usage: tokenAmount = usdcAmount * denominator() / getUsdcBuyPrice()\\n     * Normilized to 10**18\\n     */\\n    function getUsdcBuyPrice() external view returns (uint256);\\n\\n    /**\\n     * Token sell price at USDC. Amount of USDC we got if sell one token.\\n     * Returned value is [USDC/token]\\n     * Usage: usdcAmount = tokenAmount * getUsdcSellPrice() / denominator()\\n     * Normilized to 10**18\\n     */\\n    function getUsdcSellPrice() external view returns (uint256);\\n\\n    /**\\n     * Denominator for normalization. Default 10**18.\\n     */\\n    function denominator() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2ffb91797f2de81cf176b8ebe0be12d7250279b61f1ee7f8d37ae41e00ecb04e\",\"license\":\"MIT\"},\"contracts/price_getters/AbstractPriceGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../interfaces/IPriceGetter.sol\\\";\\n\\ncontract AbstractPriceGetter is IPriceGetter {\\n    uint256 public constant DENOMINATOR = 10**18;\\n\\n    function getUsdcBuyPrice() external view virtual override returns (uint256) {\\n        return DENOMINATOR;\\n    }\\n\\n    function getUsdcSellPrice() external view virtual override returns (uint256) {\\n        return DENOMINATOR;\\n    }\\n\\n    function denominator() external view virtual override returns (uint256) {\\n        return DENOMINATOR;\\n    }\\n}\\n\",\"keccak256\":\"0x71a4dc4a01bae2264bd097e07ea93ca929ca304390677644861fb8205cc0a705\",\"license\":\"MIT\"},\"contracts/price_getters/CrvPriceGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../price_getters/AbstractPriceGetter.sol\\\";\\nimport \\\"../connectors/swaps/interfaces/IUniswapV2Router02.sol\\\";\\n\\ncontract CrvPriceGetter is AbstractPriceGetter {\\n    IUniswapV2Router02 public swapRouter;\\n    IERC20 public usdcToken;\\n    IERC20 public crvToken;\\n\\n    constructor(\\n        address _swapRouter,\\n        address _usdcToken,\\n        address _crvToken\\n    ) {\\n        require(_swapRouter != address(0), \\\"Zero address not allowed\\\");\\n        require(_usdcToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_crvToken != address(0), \\\"Zero address not allowed\\\");\\n\\n        swapRouter = IUniswapV2Router02(_swapRouter);\\n        usdcToken = IERC20(_usdcToken);\\n        crvToken = IERC20(_crvToken);\\n    }\\n\\n    function getUsdcBuyPrice() external view override returns (uint256) {\\n        address[] memory path = new address[](2);\\n        path[0] = address(usdcToken);\\n        path[1] = address(crvToken);\\n\\n        uint[] memory amountsOut = swapRouter.getAmountsOut(10**6, path);\\n        // 6 + 12 + 18 - 18 = 18\\n        return (amountsOut[0] * (10**12) * DENOMINATOR) / amountsOut[1];\\n    }\\n\\n    function getUsdcSellPrice() external view override returns (uint256) {\\n        address[] memory path = new address[](2);\\n        path[0] = address(crvToken);\\n        path[1] = address(usdcToken);\\n\\n        uint[] memory amountsOut = swapRouter.getAmountsOut(10**18, path);\\n        // 6 + 12 + 18 - 18 = 18\\n        return (amountsOut[1] * (10**12) * DENOMINATOR) / amountsOut[0];\\n    }\\n}\\n\",\"keccak256\":\"0xc534bdd2e1d3661cec58d18d96501ef13bc4b60e4abd1cbf3f9568b53603d9d8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161078338038061078383398101604081905261002f9161015e565b6001600160a01b0383166100785760405162461bcd60e51b8152602060048201526018602482015260008051602061076383398151915260448201526064015b60405180910390fd5b6001600160a01b0382166100bc5760405162461bcd60e51b81526020600482015260186024820152600080516020610763833981519152604482015260640161006f565b6001600160a01b0381166101005760405162461bcd60e51b81526020600482015260186024820152600080516020610763833981519152604482015260640161006f565b600080546001600160a01b039485166001600160a01b0319918216179091556001805493851693821693909317909255600280549190931691161790556101a1565b80516001600160a01b038116811461015957600080fd5b919050565b60008060006060848603121561017357600080fd5b61017c84610142565b925061018a60208501610142565b915061019860408501610142565b90509250925092565b6105b3806101b06000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063918f86741161005b578063918f8674146100db57806396ce0795146100ea578063c31c9c07146100f8578063ea2497841461010b57600080fd5b806311eac855146100825780632b8455f1146100b257806332d7d66d146100c8575b600080fd5b600154610095906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100ba610113565b6040519081526020016100a9565b600254610095906001600160a01b031681565b6100ba670de0b6b3a764000081565b670de0b6b3a76400006100ba565b600054610095906001600160a01b031681565b6100ba610291565b60408051600280825260608201835260009283929190602083019080368337505060025482519293506001600160a01b03169183915060009061015857610158610551565b6001600160a01b039283166020918202929092010152600180548351921691839190811061018857610188610551565b6001600160a01b0392831660209182029290920101526000805460405163d06ca61f60e01b81529192169063d06ca61f906101d190670de0b6b3a76400009086906004016104e1565b60006040518083038186803b1580156101e957600080fd5b505afa1580156101fd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261022591908101906103d8565b90508060008151811061023a5761023a610551565b6020026020010151670de0b6b3a76400008260018151811061025e5761025e610551565b602002602001015164e8d4a510006102769190610524565b6102809190610524565b61028a9190610502565b9250505090565b60408051600280825260608201835260009283929190602083019080368337505060015482519293506001600160a01b0316918391506000906102d6576102d6610551565b6001600160a01b03928316602091820292909201015260025482519116908290600190811061030757610307610551565b6001600160a01b0392831660209182029290920101526000805460405163d06ca61f60e01b81529192169063d06ca61f9061034b90620f42409086906004016104e1565b60006040518083038186803b15801561036357600080fd5b505afa158015610377573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261039f91908101906103d8565b9050806001815181106103b4576103b4610551565b6020026020010151670de0b6b3a76400008260008151811061025e5761025e610551565b600060208083850312156103eb57600080fd5b825167ffffffffffffffff8082111561040357600080fd5b818501915085601f83011261041757600080fd5b81518181111561042957610429610567565b8060051b604051601f19603f8301168101818110858211171561044e5761044e610567565b604052828152858101935084860182860187018a101561046d57600080fd5b600095505b83861015610490578051855260019590950194938601938601610472565b5098975050505050505050565b600081518084526020808501945080840160005b838110156104d65781516001600160a01b0316875295820195908201906001016104b1565b509495945050505050565b8281526040602082015260006104fa604083018461049d565b949350505050565b60008261051f57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561054c57634e487b7160e01b600052601160045260246000fd5b500290565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220ca614ee368378a5a167fa74f2f53853bcaba015dfaf79b286bc7369d2e3c15e264736f6c634300080600335a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063918f86741161005b578063918f8674146100db57806396ce0795146100ea578063c31c9c07146100f8578063ea2497841461010b57600080fd5b806311eac855146100825780632b8455f1146100b257806332d7d66d146100c8575b600080fd5b600154610095906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100ba610113565b6040519081526020016100a9565b600254610095906001600160a01b031681565b6100ba670de0b6b3a764000081565b670de0b6b3a76400006100ba565b600054610095906001600160a01b031681565b6100ba610291565b60408051600280825260608201835260009283929190602083019080368337505060025482519293506001600160a01b03169183915060009061015857610158610551565b6001600160a01b039283166020918202929092010152600180548351921691839190811061018857610188610551565b6001600160a01b0392831660209182029290920101526000805460405163d06ca61f60e01b81529192169063d06ca61f906101d190670de0b6b3a76400009086906004016104e1565b60006040518083038186803b1580156101e957600080fd5b505afa1580156101fd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261022591908101906103d8565b90508060008151811061023a5761023a610551565b6020026020010151670de0b6b3a76400008260018151811061025e5761025e610551565b602002602001015164e8d4a510006102769190610524565b6102809190610524565b61028a9190610502565b9250505090565b60408051600280825260608201835260009283929190602083019080368337505060015482519293506001600160a01b0316918391506000906102d6576102d6610551565b6001600160a01b03928316602091820292909201015260025482519116908290600190811061030757610307610551565b6001600160a01b0392831660209182029290920101526000805460405163d06ca61f60e01b81529192169063d06ca61f9061034b90620f42409086906004016104e1565b60006040518083038186803b15801561036357600080fd5b505afa158015610377573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261039f91908101906103d8565b9050806001815181106103b4576103b4610551565b6020026020010151670de0b6b3a76400008260008151811061025e5761025e610551565b600060208083850312156103eb57600080fd5b825167ffffffffffffffff8082111561040357600080fd5b818501915085601f83011261041757600080fd5b81518181111561042957610429610567565b8060051b604051601f19603f8301168101818110858211171561044e5761044e610567565b604052828152858101935084860182860187018a101561046d57600080fd5b600095505b83861015610490578051855260019590950194938601938601610472565b5098975050505050505050565b600081518084526020808501945080840160005b838110156104d65781516001600160a01b0316875295820195908201906001016104b1565b509495945050505050565b8281526040602082015260006104fa604083018461049d565b949350505050565b60008261051f57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561054c57634e487b7160e01b600052601160045260246000fd5b500290565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220ca614ee368378a5a167fa74f2f53853bcaba015dfaf79b286bc7369d2e3c15e264736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "denominator()": {
        "notice": "Denominator for normalization. Default 10**18."
      },
      "getUsdcBuyPrice()": {
        "notice": "Token buy price at USDC. Amount of USDC we should spend to buy one token. Returned value is [USDC/token] Usage: tokenAmount = usdcAmount * denominator() / getUsdcBuyPrice() Normilized to 10**18"
      },
      "getUsdcSellPrice()": {
        "notice": "Token sell price at USDC. Amount of USDC we got if sell one token. Returned value is [USDC/token] Usage: usdcAmount = tokenAmount * getUsdcSellPrice() / denominator() Normilized to 10**18"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10170,
        "contract": "contracts/price_getters/CrvPriceGetter.sol:CrvPriceGetter",
        "label": "swapRouter",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IUniswapV2Router02)9733"
      },
      {
        "astId": 10173,
        "contract": "contracts/price_getters/CrvPriceGetter.sol:CrvPriceGetter",
        "label": "usdcToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)1095"
      },
      {
        "astId": 10176,
        "contract": "contracts/price_getters/CrvPriceGetter.sol:CrvPriceGetter",
        "label": "crvToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)1095"
      }
    ],
    "types": {
      "t_contract(IERC20)1095": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)9733": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      }
    }
  }
}