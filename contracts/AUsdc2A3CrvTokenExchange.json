{
  "address": "0x52c9dE743a250a4D8E1194E11e447bb45324436f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_curveConnector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_aUsdcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_a3CrvToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "a3CrvToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aUsdcToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curveConnector",
      "outputs": [
        {
          "internalType": "contract IConnector",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "exchange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc74b660058064673ac28e665d034fa64f60124f0be48dbc0012994044c781211",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x52c9dE743a250a4D8E1194E11e447bb45324436f",
    "transactionIndex": 0,
    "gasUsed": "928051",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x567845e04dbcd7f6f9b736fcd73277daf185fac15453324add017bd5601b3228",
    "transactionHash": "0xc74b660058064673ac28e665d034fa64f60124f0be48dbc0012994044c781211",
    "logs": [],
    "blockNumber": 21675013,
    "cumulativeGasUsed": "928051",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8659DF1C638CDA8E475CD3C6481730C2b4f85873",
    "0x1a13F4Ca1d028320A707D99520AbFefca3998b7F",
    "0xE7a24EF0C5e95Ffb0f6684b813A78F2a3AD7D171"
  ],
  "solcInputHash": "4b2c02ad00a20f5dc92f2cdd9d4eb77f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_curveConnector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aUsdcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_a3CrvToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"a3CrvToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aUsdcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveConnector\",\"outputs\":[{\"internalType\":\"contract IConnector\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token_exchanges/AUsdc2A3CrvTokenExchange.sol\":\"AUsdc2A3CrvTokenExchange\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"contracts/interfaces/IConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/// @title Common inrterface to DeFi protocol connectors\\n/// @author @Stanta\\n/// @notice Every connector have to implement this function\\n/// @dev Choosing of connector releasing by changing address of connector's contract\\ninterface IConnector {\\n    function stake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiar\\n    ) external;\\n\\n    function unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _to\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xf418605c420c689e5cdd7cf9a49d8906f8c5631a629a5d6eea6d9f2eba79fdb8\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenExchange.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITokenExchange {\\n\\n    function exchange(\\n        address spender,\\n        IERC20 from,\\n        address receiver,\\n        IERC20 to,\\n        uint256 amount\\n    ) external;\\n\\n}\\n\",\"keccak256\":\"0x5b882bdf0c53f3ad4e7a281ad884af921b2c7ff16517bf56e50f253fc58b5bbc\",\"license\":\"GPL-3.0\"},\"contracts/token_exchanges/AUsdc2A3CrvTokenExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/ITokenExchange.sol\\\";\\nimport \\\"../interfaces/IConnector.sol\\\";\\n\\ncontract AUsdc2A3CrvTokenExchange is ITokenExchange {\\n    IConnector public curveConnector;\\n    IERC20 public aUsdcToken;\\n    IERC20 public a3CrvToken;\\n\\n    constructor(\\n        address _curveConnector,\\n        address _aUsdcToken,\\n        address _a3CrvToken\\n    ) {\\n        require(_curveConnector != address(0), \\\"Zero address not allowed\\\");\\n        require(_aUsdcToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_a3CrvToken != address(0), \\\"Zero address not allowed\\\");\\n\\n        curveConnector = IConnector(_curveConnector);\\n        aUsdcToken = IERC20(_aUsdcToken);\\n        a3CrvToken = IERC20(_a3CrvToken);\\n    }\\n\\n    function exchange(\\n        address spender,\\n        IERC20 from,\\n        address receiver,\\n        IERC20 to,\\n        uint256 amount\\n    ) external override {\\n        require(\\n            (from == aUsdcToken && to == a3CrvToken) || (from == a3CrvToken && to == aUsdcToken),\\n            \\\"AUsdc2A3CrvTokenExchange: Some token not compatible\\\"\\n        );\\n\\n        if (amount == 0) {\\n            from.transfer(spender, from.balanceOf(address(this)));\\n            return;\\n        }\\n\\n        if (from == aUsdcToken && to == a3CrvToken) {\\n            //TODO: denominator usage\\n            uint256 denominator = 10**(18 - IERC20Metadata(address(aUsdcToken)).decimals());\\n            amount = amount / denominator;\\n\\n            require(\\n                aUsdcToken.balanceOf(address(this)) >= amount,\\n                \\\"AUsdc2A3CrvTokenExchange: Not enough aUsdcToken tokens\\\"\\n            );\\n\\n            // check after denormilization\\n            if (amount == 0) {\\n                from.transfer(spender, from.balanceOf(address(this)));\\n                return;\\n            }\\n\\n            aUsdcToken.transfer(address(curveConnector), amount);\\n            curveConnector.stake(address(aUsdcToken), amount, receiver);\\n        } else {\\n            //TODO: denominator usage\\n            uint256 denominator = 10**(18 - IERC20Metadata(address(aUsdcToken)).decimals());\\n            uint256 aUsdcAmount = amount / denominator;\\n\\n            require(\\n                a3CrvToken.balanceOf(address(this)) >= amount,\\n                \\\"AUsdc2A3CrvTokenExchange: Not enough a3CrvToken\\\"\\n            );\\n\\n            //TODO: add check that we can withdraw more than zero by call Curve pool and get estimate\\n            //      aUsdc amount for our LP tokens\\n            // check after denormilization\\n            if (aUsdcAmount == 0) {\\n                from.transfer(spender, from.balanceOf(address(this)));\\n                return;\\n            }\\n\\n            try a3CrvToken.transfer(address(curveConnector), amount) {\\n                try curveConnector.unstake(address(aUsdcToken), aUsdcAmount, receiver) returns (\\n                    uint256 withdrewAmount\\n                ) {} catch Error(string memory reason) {\\n                    revert(reason);\\n                } catch {\\n                    revert(string(abi.encodePacked(\\\"curveConnector.unstake\\\")));\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(string(abi.encodePacked(\\\"a3CrvToken.transfer\\\")));\\n            }\\n\\n            // uint256 a3CrvAmount = amount;\\n            // require(\\n            //     a3CrvToken.balanceOf(address(this)) >= a3CrvAmount,\\n            //     \\\"AUsdc2A3CrvTokenExchange: Not enough a3CrvToken\\\"\\n            // );\\n\\n            // a3CrvToken.transfer(address(curveConnector), a3CrvAmount);\\n            // uint256 withdrewAmount = curveConnector.unstake(address(aUsdcToken), amount, receiver);\\n\\n            //TODO: may be add some checks for withdrewAmount\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa4a2caadb038116044ca19d1aabe3565f868b433cbb5b348e8770d02fb463c1a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620010603803806200106083398101604081905262000034916200016d565b6001600160a01b0383166200007f5760405162461bcd60e51b815260206004820152601860248201526000805160206200104083398151915260448201526064015b60405180910390fd5b6001600160a01b038216620000c65760405162461bcd60e51b8152602060048201526018602482015260008051602062001040833981519152604482015260640162000076565b6001600160a01b0381166200010d5760405162461bcd60e51b8152602060048201526018602482015260008051602062001040833981519152604482015260640162000076565b600080546001600160a01b039485166001600160a01b031991821617909155600180549385169382169390931790925560028054919093169116179055620001b7565b80516001600160a01b03811681146200016857600080fd5b919050565b6000806000606084860312156200018357600080fd5b6200018e8462000150565b92506200019e6020850162000150565b9150620001ae6040850162000150565b90509250925092565b610e7980620001c76000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063183b8c54146100515780632d8647521461008057806362ac753814610093578063cc3d6cf7146100a8575b600080fd5b600054610064906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b600254610064906001600160a01b031681565b6100a66100a1366004610ae1565b6100bb565b005b600154610064906001600160a01b031681565b6001546001600160a01b0385811691161480156100e557506002546001600160a01b038381169116145b8061011557506002546001600160a01b03858116911614801561011557506001546001600160a01b038381169116145b6101825760405162461bcd60e51b815260206004820152603360248201527f4155736463324133437276546f6b656e45786368616e67653a20536f6d6520746044820152726f6b656e206e6f7420636f6d70617469626c6560681b60648201526084015b60405180910390fd5b8061028c576040516370a0823160e01b81523060048201526001600160a01b0385169063a9059cbb90879083906370a082319060240160206040518083038186803b1580156101d057600080fd5b505afa1580156101e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102089190610b6e565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561024e57600080fd5b505af1158015610262573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102869190610b45565b50610ada565b6001546001600160a01b0385811691161480156102b657506002546001600160a01b038381169116145b15610651576001546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561030057600080fd5b505afa158015610314573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103389190610b87565b610343906012610d11565b61034e90600a610c64565b905061035a8183610bff565b6001546040516370a0823160e01b815230600482015291935083916001600160a01b03909116906370a082319060240160206040518083038186803b1580156103a257600080fd5b505afa1580156103b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103da9190610b6e565b10156104475760405162461bcd60e51b815260206004820152603660248201527f4155736463324133437276546f6b656e45786368616e67653a204e6f7420656e6044820152756f756768206155736463546f6b656e20746f6b656e7360501b6064820152608401610179565b81610552576040516370a0823160e01b81523060048201526001600160a01b0386169063a9059cbb90889083906370a082319060240160206040518083038186803b15801561049557600080fd5b505afa1580156104a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cd9190610b6e565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561051357600080fd5b505af1158015610527573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054b9190610b45565b5050610ada565b60015460005460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810185905291169063a9059cbb90604401602060405180830381600087803b1580156105a257600080fd5b505af11580156105b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105da9190610b45565b5060005460015460405163294091cd60e01b81526001600160a01b03918216600482015260248101859052868216604482015291169063294091cd90606401600060405180830381600087803b15801561063357600080fd5b505af1158015610647573d6000803e3d6000fd5b5050505050610ada565b6001546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561069657600080fd5b505afa1580156106aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ce9190610b87565b6106d9906012610d11565b6106e490600a610c64565b905060006106f28284610bff565b6002546040516370a0823160e01b815230600482015291925084916001600160a01b03909116906370a082319060240160206040518083038186803b15801561073a57600080fd5b505afa15801561074e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107729190610b6e565b10156107d85760405162461bcd60e51b815260206004820152602f60248201527f4155736463324133437276546f6b656e45786368616e67653a204e6f7420656e60448201526e37bab3b4103099a1b93b2a37b5b2b760891b6064820152608401610179565b806108e4576040516370a0823160e01b81523060048201526001600160a01b0387169063a9059cbb90899083906370a082319060240160206040518083038186803b15801561082657600080fd5b505afa15801561083a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085e9190610b6e565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156108a457600080fd5b505af11580156108b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108dc9190610b45565b505050610ada565b60025460005460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810186905291169063a9059cbb90604401602060405180830381600087803b15801561093457600080fd5b505af1925050508015610964575060408051601f3d908101601f1916820190925261096191810190610b45565b60015b6109f557610970610d85565b806308c379a014156109aa5750610985610da1565b8061099057506109ac565b8060405162461bcd60e51b81526004016101799190610baa565b505b604051723099a1b93b2a37b5b2b7173a3930b739b332b960691b60208201526033015b60408051601f198184030181529082905262461bcd60e51b825261017991600401610baa565b5060005460015460405163493718eb60e11b81526001600160a01b03918216600482015260248101849052878216604482015291169063926e31d690606401602060405180830381600087803b158015610a4e57600080fd5b505af1925050508015610a7e575060408051601f3d908101601f19168201909252610a7b91810190610b6e565b60015b610ad657610a8a610d85565b806308c379a01415610aaa5750610a9f610da1565b806109905750610aac565b505b604051756375727665436f6e6e6563746f722e756e7374616b6560501b60208201526036016109cf565b5050505b5050505050565b600080600080600060a08688031215610af957600080fd5b8535610b0481610e2b565b94506020860135610b1481610e2b565b93506040860135610b2481610e2b565b92506060860135610b3481610e2b565b949793965091946080013592915050565b600060208284031215610b5757600080fd5b81518015158114610b6757600080fd5b9392505050565b600060208284031215610b8057600080fd5b5051919050565b600060208284031215610b9957600080fd5b815160ff81168114610b6757600080fd5b600060208083528351808285015260005b81811015610bd757858101830151858201604001528201610bbb565b81811115610be9576000604083870101525b50601f01601f1916929092016040019392505050565b600082610c1c57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115610c5c578160001904821115610c4257610c42610d6f565b80851615610c4f57918102915b93841c9390800290610c26565b509250929050565b6000610b6760ff841683600082610c7d57506001610d0b565b81610c8a57506000610d0b565b8160018114610ca05760028114610caa57610cc6565b6001915050610d0b565b60ff841115610cbb57610cbb610d6f565b50506001821b610d0b565b5060208310610133831016604e8410600b8410161715610ce9575081810a610d0b565b610cf38383610c21565b8060001904821115610d0757610d07610d6f565b0290505b92915050565b600060ff821660ff841680821015610d2b57610d2b610d6f565b90039392505050565b601f8201601f1916810167ffffffffffffffff81118282101715610d6857634e487b7160e01b600052604160045260246000fd5b6040525050565b634e487b7160e01b600052601160045260246000fd5b600060033d1115610d9e5760046000803e5060005160e01c5b90565b600060443d1015610daf5790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715610ddf57505050505090565b8285019150815181811115610df75750505050505090565b843d8701016020828501011115610e115750505050505090565b610e2060208286010187610d34565b509095945050505050565b6001600160a01b0381168114610e4057600080fd5b5056fea2646970667358221220b5fd7e21cc43023f80f58e41d6ac36926904ec812e8f89826aeb22c13980be2264736f6c634300080600335a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063183b8c54146100515780632d8647521461008057806362ac753814610093578063cc3d6cf7146100a8575b600080fd5b600054610064906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b600254610064906001600160a01b031681565b6100a66100a1366004610ae1565b6100bb565b005b600154610064906001600160a01b031681565b6001546001600160a01b0385811691161480156100e557506002546001600160a01b038381169116145b8061011557506002546001600160a01b03858116911614801561011557506001546001600160a01b038381169116145b6101825760405162461bcd60e51b815260206004820152603360248201527f4155736463324133437276546f6b656e45786368616e67653a20536f6d6520746044820152726f6b656e206e6f7420636f6d70617469626c6560681b60648201526084015b60405180910390fd5b8061028c576040516370a0823160e01b81523060048201526001600160a01b0385169063a9059cbb90879083906370a082319060240160206040518083038186803b1580156101d057600080fd5b505afa1580156101e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102089190610b6e565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561024e57600080fd5b505af1158015610262573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102869190610b45565b50610ada565b6001546001600160a01b0385811691161480156102b657506002546001600160a01b038381169116145b15610651576001546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561030057600080fd5b505afa158015610314573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103389190610b87565b610343906012610d11565b61034e90600a610c64565b905061035a8183610bff565b6001546040516370a0823160e01b815230600482015291935083916001600160a01b03909116906370a082319060240160206040518083038186803b1580156103a257600080fd5b505afa1580156103b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103da9190610b6e565b10156104475760405162461bcd60e51b815260206004820152603660248201527f4155736463324133437276546f6b656e45786368616e67653a204e6f7420656e6044820152756f756768206155736463546f6b656e20746f6b656e7360501b6064820152608401610179565b81610552576040516370a0823160e01b81523060048201526001600160a01b0386169063a9059cbb90889083906370a082319060240160206040518083038186803b15801561049557600080fd5b505afa1580156104a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cd9190610b6e565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561051357600080fd5b505af1158015610527573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054b9190610b45565b5050610ada565b60015460005460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810185905291169063a9059cbb90604401602060405180830381600087803b1580156105a257600080fd5b505af11580156105b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105da9190610b45565b5060005460015460405163294091cd60e01b81526001600160a01b03918216600482015260248101859052868216604482015291169063294091cd90606401600060405180830381600087803b15801561063357600080fd5b505af1158015610647573d6000803e3d6000fd5b5050505050610ada565b6001546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561069657600080fd5b505afa1580156106aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ce9190610b87565b6106d9906012610d11565b6106e490600a610c64565b905060006106f28284610bff565b6002546040516370a0823160e01b815230600482015291925084916001600160a01b03909116906370a082319060240160206040518083038186803b15801561073a57600080fd5b505afa15801561074e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107729190610b6e565b10156107d85760405162461bcd60e51b815260206004820152602f60248201527f4155736463324133437276546f6b656e45786368616e67653a204e6f7420656e60448201526e37bab3b4103099a1b93b2a37b5b2b760891b6064820152608401610179565b806108e4576040516370a0823160e01b81523060048201526001600160a01b0387169063a9059cbb90899083906370a082319060240160206040518083038186803b15801561082657600080fd5b505afa15801561083a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085e9190610b6e565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156108a457600080fd5b505af11580156108b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108dc9190610b45565b505050610ada565b60025460005460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810186905291169063a9059cbb90604401602060405180830381600087803b15801561093457600080fd5b505af1925050508015610964575060408051601f3d908101601f1916820190925261096191810190610b45565b60015b6109f557610970610d85565b806308c379a014156109aa5750610985610da1565b8061099057506109ac565b8060405162461bcd60e51b81526004016101799190610baa565b505b604051723099a1b93b2a37b5b2b7173a3930b739b332b960691b60208201526033015b60408051601f198184030181529082905262461bcd60e51b825261017991600401610baa565b5060005460015460405163493718eb60e11b81526001600160a01b03918216600482015260248101849052878216604482015291169063926e31d690606401602060405180830381600087803b158015610a4e57600080fd5b505af1925050508015610a7e575060408051601f3d908101601f19168201909252610a7b91810190610b6e565b60015b610ad657610a8a610d85565b806308c379a01415610aaa5750610a9f610da1565b806109905750610aac565b505b604051756375727665436f6e6e6563746f722e756e7374616b6560501b60208201526036016109cf565b5050505b5050505050565b600080600080600060a08688031215610af957600080fd5b8535610b0481610e2b565b94506020860135610b1481610e2b565b93506040860135610b2481610e2b565b92506060860135610b3481610e2b565b949793965091946080013592915050565b600060208284031215610b5757600080fd5b81518015158114610b6757600080fd5b9392505050565b600060208284031215610b8057600080fd5b5051919050565b600060208284031215610b9957600080fd5b815160ff81168114610b6757600080fd5b600060208083528351808285015260005b81811015610bd757858101830151858201604001528201610bbb565b81811115610be9576000604083870101525b50601f01601f1916929092016040019392505050565b600082610c1c57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115610c5c578160001904821115610c4257610c42610d6f565b80851615610c4f57918102915b93841c9390800290610c26565b509250929050565b6000610b6760ff841683600082610c7d57506001610d0b565b81610c8a57506000610d0b565b8160018114610ca05760028114610caa57610cc6565b6001915050610d0b565b60ff841115610cbb57610cbb610d6f565b50506001821b610d0b565b5060208310610133831016604e8410600b8410161715610ce9575081810a610d0b565b610cf38383610c21565b8060001904821115610d0757610d07610d6f565b0290505b92915050565b600060ff821660ff841680821015610d2b57610d2b610d6f565b90039392505050565b601f8201601f1916810167ffffffffffffffff81118282101715610d6857634e487b7160e01b600052604160045260246000fd5b6040525050565b634e487b7160e01b600052601160045260246000fd5b600060033d1115610d9e5760046000803e5060005160e01c5b90565b600060443d1015610daf5790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715610ddf57505050505090565b8285019150815181811115610df75750505050505090565b843d8701016020828501011115610e115750505050505090565b610e2060208286010187610d34565b509095945050505050565b6001600160a01b0381168114610e4057600080fd5b5056fea2646970667358221220b5fd7e21cc43023f80f58e41d6ac36926904ec812e8f89826aeb22c13980be2264736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11565,
        "contract": "contracts/token_exchanges/AUsdc2A3CrvTokenExchange.sol:AUsdc2A3CrvTokenExchange",
        "label": "curveConnector",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IConnector)9799"
      },
      {
        "astId": 11568,
        "contract": "contracts/token_exchanges/AUsdc2A3CrvTokenExchange.sol:AUsdc2A3CrvTokenExchange",
        "label": "aUsdcToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)1095"
      },
      {
        "astId": 11571,
        "contract": "contracts/token_exchanges/AUsdc2A3CrvTokenExchange.sol:AUsdc2A3CrvTokenExchange",
        "label": "a3CrvToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)1095"
      }
    ],
    "types": {
      "t_contract(IConnector)9799": {
        "encoding": "inplace",
        "label": "contract IConnector",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1095": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      }
    }
  }
}