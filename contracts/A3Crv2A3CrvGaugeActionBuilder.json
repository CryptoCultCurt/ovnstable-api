{
  "address": "0xc95196d5B6769b67BA3Aaab2BC6f7eB33BD4f689",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenExchange",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_a3CrvToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_a3CrvGaugeToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "a3CrvGaugeToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "a3CrvToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amountInVault",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "usdcPriceInVault",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "diffToTarget",
                  "type": "uint256"
                },
                {
                  "internalType": "int8",
                  "name": "diffToTargetSign",
                  "type": "int8"
                },
                {
                  "internalType": "bool",
                  "name": "targetIsZero",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "usdcPriceDenominator",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "usdcSellPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "usdcBuyPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct IMark2Market.AssetPrices[]",
              "name": "assetPrices",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "totalUsdcPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMark2Market.TotalAssetPrices",
          "name": "totalAssetPrices",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract ITokenExchange",
              "name": "tokenExchange",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "code",
              "type": "bytes32"
            },
            {
              "internalType": "contract IERC20",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "exchangeAll",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "executed",
              "type": "bool"
            }
          ],
          "internalType": "struct IActionBuilder.ExchangeAction[]",
          "name": "actions",
          "type": "tuple[]"
        }
      ],
      "name": "buildAction",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract ITokenExchange",
              "name": "tokenExchange",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "code",
              "type": "bytes32"
            },
            {
              "internalType": "contract IERC20",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "exchangeAll",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "executed",
              "type": "bool"
            }
          ],
          "internalType": "struct IActionBuilder.ExchangeAction",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActionCode",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenExchange",
      "outputs": [
        {
          "internalType": "contract ITokenExchange",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0ca1c0d5fda7ebfa444218c6b6574da676ec0043b255c0b99cd3a050292b80bb",
  "receipt": {
    "to": null,
    "from": "0x5CB01385d3097b6a189d1ac8BA3364D900666445",
    "contractAddress": "0xc95196d5B6769b67BA3Aaab2BC6f7eB33BD4f689",
    "transactionIndex": 115,
    "gasUsed": "611574",
    "logsBloom": "0x
    "blockHash": "0x098801e8c5be639b87410f942b0dced9247c4954f033afeaa1cc2fbba7cdc669",
    "transactionHash": "0x0ca1c0d5fda7ebfa444218c6b6574da676ec0043b255c0b99cd3a050292b80bb",
    "logs": [
      {
        "transactionIndex": 115,
        "blockNumber": 21746848,
        "transactionHash": "0x0ca1c0d5fda7ebfa444218c6b6574da676ec0043b255c0b99cd3a050292b80bb",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005cb01385d3097b6a189d1ac8ba3364d900666445",
          "0x0000000000000000000000007b5000af8ab69fd59eb0d4f5762bff57c9c04385"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000412eb30ab74800000000000000000000000000000000000000000000000000f844a871e047698000000000000000000000000000000000000000000000801954e5f2b98e3dff47000000000000000000000000000000000000000000000000f80379bed59021800000000000000000000000000000000000000000000080195527216c98f54747",
        "logIndex": 701,
        "blockHash": "0x098801e8c5be639b87410f942b0dced9247c4954f033afeaa1cc2fbba7cdc669"
      }
    ],
    "blockNumber": 21746848,
    "cumulativeGasUsed": "14738815",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x496CacCa6D12fC9EcA2baaCBb29785FAc62F854c",
    "0xE7a24EF0C5e95Ffb0f6684b813A78F2a3AD7D171",
    "0x19793B454D3AfC7b454F206Ffe95aDE26cA6912c"
  ],
  "solcInputHash": "4b2c02ad00a20f5dc92f2cdd9d4eb77f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenExchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_a3CrvToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_a3CrvGaugeToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"a3CrvGaugeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"a3CrvToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInVault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcPriceInVault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"diffToTarget\",\"type\":\"uint256\"},{\"internalType\":\"int8\",\"name\":\"diffToTargetSign\",\"type\":\"int8\"},{\"internalType\":\"bool\",\"name\":\"targetIsZero\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"usdcPriceDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcSellPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcBuyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct IMark2Market.AssetPrices[]\",\"name\":\"assetPrices\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"totalUsdcPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IMark2Market.TotalAssetPrices\",\"name\":\"totalAssetPrices\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract ITokenExchange\",\"name\":\"tokenExchange\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exchangeAll\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct IActionBuilder.ExchangeAction[]\",\"name\":\"actions\",\"type\":\"tuple[]\"}],\"name\":\"buildAction\",\"outputs\":[{\"components\":[{\"internalType\":\"contract ITokenExchange\",\"name\":\"tokenExchange\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exchangeAll\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct IActionBuilder.ExchangeAction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActionCode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenExchange\",\"outputs\":[{\"internalType\":\"contract ITokenExchange\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/action_builders/A3Crv2A3CrvGaugeActionBuilder.sol\":\"A3Crv2A3CrvGaugeActionBuilder\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/action_builders/A3Crv2A3CrvGaugeActionBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/ITokenExchange.sol\\\";\\nimport \\\"../interfaces/IActionBuilder.sol\\\";\\nimport \\\"../interfaces/IMark2Market.sol\\\";\\n\\ncontract A3Crv2A3CrvGaugeActionBuilder is IActionBuilder {\\n    bytes32 constant ACTION_CODE = keccak256(\\\"A3Crv2A3CrvGauge\\\");\\n\\n    ITokenExchange public tokenExchange;\\n    IERC20 public a3CrvToken;\\n    IERC20 public a3CrvGaugeToken;\\n\\n    constructor(\\n        address _tokenExchange,\\n        address _a3CrvToken,\\n        address _a3CrvGaugeToken\\n    ) {\\n        require(_tokenExchange != address(0), \\\"Zero address not allowed\\\");\\n        require(_a3CrvToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_a3CrvGaugeToken != address(0), \\\"Zero address not allowed\\\");\\n\\n        tokenExchange = ITokenExchange(_tokenExchange);\\n        a3CrvToken = IERC20(_a3CrvToken);\\n        a3CrvGaugeToken = IERC20(_a3CrvGaugeToken);\\n    }\\n\\n    function getActionCode() external pure override returns (bytes32) {\\n        return ACTION_CODE;\\n    }\\n\\n    function buildAction(\\n        IMark2Market.TotalAssetPrices memory totalAssetPrices,\\n        ExchangeAction[] memory actions\\n    ) external view override returns (ExchangeAction memory) {\\n        IMark2Market.AssetPrices[] memory assetPrices = totalAssetPrices.assetPrices;\\n\\n        // get diff from iteration over prices because can't use mapping in memory params to external functions\\n        IMark2Market.AssetPrices memory a3CrvPrices;\\n        IMark2Market.AssetPrices memory a3CrvGaugePrices;\\n        for (uint8 i = 0; i < assetPrices.length; i++) {\\n            if (assetPrices[i].asset == address(a3CrvGaugeToken)) {\\n                a3CrvGaugePrices = assetPrices[i];\\n                continue;\\n            }\\n            if (assetPrices[i].asset == address(a3CrvToken)) {\\n                a3CrvPrices = assetPrices[i];\\n                continue;\\n            }\\n        }\\n\\n        // because we know that a3Crv-gauge is leaf in tree and we can use this value\\n        uint256 diff = a3CrvGaugePrices.diffToTarget;\\n\\n        IERC20 from;\\n        IERC20 to;\\n        bool targetIsZero;\\n        if (a3CrvGaugePrices.targetIsZero || a3CrvGaugePrices.diffToTargetSign < 0) {\\n            from = a3CrvGaugeToken;\\n            to = a3CrvToken;\\n            targetIsZero = a3CrvGaugePrices.targetIsZero;\\n        } else {\\n            from = a3CrvToken;\\n            to = a3CrvGaugeToken;\\n            targetIsZero = a3CrvPrices.targetIsZero;\\n        }\\n\\n        ExchangeAction memory action = ExchangeAction(\\n            tokenExchange,\\n            ACTION_CODE,\\n            from,\\n            to,\\n            diff,\\n            targetIsZero,\\n            false\\n        );\\n\\n        return action;\\n    }\\n}\\n\",\"keccak256\":\"0x3b9cf27f3e747c6d5b1028a0d2190c5acb8ba83cde15eae34eafe7abfce549fa\",\"license\":\"MIT\"},\"contracts/interfaces/IActionBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IMark2Market.sol\\\";\\nimport \\\"./ITokenExchange.sol\\\";\\n\\ninterface IActionBuilder {\\n    struct ExchangeAction {\\n        ITokenExchange tokenExchange;\\n        bytes32 code;\\n        IERC20 from;\\n        IERC20 to;\\n        uint256 amount; // amount at usdc with 6 digit fractions\\n        bool exchangeAll; // mean that we should trade all tokens to zero ownership\\n        bool executed;\\n    }\\n\\n    function getActionCode() external pure returns (bytes32);\\n\\n    function buildAction(\\n        IMark2Market.TotalAssetPrices memory assetPrices,\\n        ExchangeAction[] memory actions\\n    ) external view returns (ExchangeAction memory);\\n}\\n\",\"keccak256\":\"0x9ae4c540203b167b7450eac4b735c820a834fb228825254c9aeeb1c520392119\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IMark2Market.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IMark2Market {\\n    struct AssetPrices {\\n        address asset;\\n        uint256 amountInVault; // balance on Vault\\n        uint256 usdcPriceInVault; // current total price of balance at USDC\\n        uint256 diffToTarget; // diff usdcPriceInVault to target in portfolio\\n        int8 diffToTargetSign; // diff sign usdcPriceInVault to target in portfolio\\n        bool targetIsZero; // mean that we should trade all tokens to zero ownership\\n        //\\n        uint256 usdcPriceDenominator;\\n        uint256 usdcSellPrice;\\n        uint256 usdcBuyPrice;\\n        //\\n        uint256 decimals;\\n        string name;\\n        string symbol;\\n    }\\n\\n    struct TotalAssetPrices {\\n        AssetPrices[] assetPrices;\\n        uint256 totalUsdcPrice;\\n    }\\n\\n    function assetPrices() external view returns (TotalAssetPrices memory);\\n\\n    function assetPricesForBalance() external returns (TotalAssetPrices memory);\\n\\n    function assetPricesForBalance(address withdrawToken, uint256 withdrawAmount)\\n        external\\n        returns (TotalAssetPrices memory);\\n}\\n\",\"keccak256\":\"0x337e6890f27d2fd68742e24f9b367952b8b38a2f0d6c6ad15e67e1795ceaaa0d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ITokenExchange.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITokenExchange {\\n\\n    function exchange(\\n        address spender,\\n        IERC20 from,\\n        address receiver,\\n        IERC20 to,\\n        uint256 amount\\n    ) external;\\n\\n}\\n\",\"keccak256\":\"0x5b882bdf0c53f3ad4e7a281ad884af921b2c7ff16517bf56e50f253fc58b5bbc\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610a90380380610a9083398101604081905261002f9161015e565b6001600160a01b0383166100785760405162461bcd60e51b81526020600482015260186024820152600080516020610a7083398151915260448201526064015b60405180910390fd5b6001600160a01b0382166100bc5760405162461bcd60e51b81526020600482015260186024820152600080516020610a70833981519152604482015260640161006f565b6001600160a01b0381166101005760405162461bcd60e51b81526020600482015260186024820152600080516020610a70833981519152604482015260640161006f565b600080546001600160a01b039485166001600160a01b0319918216179091556001805493851693821693909317909255600280549190931691161790556101a1565b80516001600160a01b038116811461015957600080fd5b919050565b60008060006060848603121561017357600080fd5b61017c84610142565b925061018a60208501610142565b915061019860408501610142565b90509250925092565b6108c0806101b06000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806318ad30881461005c5780632d8647521461008f578063636f6159146100ba57806386d551c7146100cd5780638a0aeb85146100e0575b600080fd5b6040517fb4da5d41009045940afaa90ae60b4310fcca52ab348c36bb96873df18882637081526020015b60405180910390f35b6001546100a2906001600160a01b031681565b6040516001600160a01b039091168152602001610086565b6000546100a2906001600160a01b031681565b6002546100a2906001600160a01b031681565b6100f36100ee366004610563565b610158565b604051610086919081516001600160a01b03908116825260208084015190830152604080840151821690830152606080840151909116908201526080808301519082015260a08281015115159082015260c09182015115159181019190915260e00190565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152825161019b610368565b6101a3610368565b60005b83518160ff16101561028a5760025484516001600160a01b0390911690859060ff84169081106101d8576101d8610846565b6020026020010151600001516001600160a01b0316141561021757838160ff168151811061020857610208610846565b60200260200101519150610278565b60015484516001600160a01b0390911690859060ff841690811061023d5761023d610846565b6020026020010151600001516001600160a01b0316141561027857838160ff168151811061026d5761026d610846565b602002602001015192505b8061028281610818565b9150506101a6565b5060008160600151905060008060008460a00151806102b057506000856080015160000b125b156102d757505060025460015460a08501516001600160a01b0392831693509116906102f5565b505060015460025460a08601516001600160a01b0392831693509116905b6040805160e081018252600080546001600160a01b0390811683527fb4da5d41009045940afaa90ae60b4310fcca52ab348c36bb96873df188826370602084015295861692820192909252929093166060830152608082019390935291151560a083015260c08201529695505050505050565b60405180610180016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000800b81526020016000151581526020016000815260200160008152602001600081526020016000815260200160608152602001606081525090565b80356103e181610872565b919050565b600082601f8301126103f757600080fd5b8135602061040c610407836107f4565b6107c3565b8281528181019085830160e08086028801850189101561042b57600080fd5b6000805b878110156104c25782848c031215610445578182fd5b61044d610753565b843561045881610872565b81528488013588820152604061046f8187016103d6565b9082015260606104808682016103d6565b908201526080858101359082015260a061049b8187016104d1565b9082015260c06104ac8682016104d1565b908201528652948601949282019260010161042f565b50929998505050505050505050565b803580151581146103e157600080fd5b8035600081900b81146103e157600080fd5b600082601f83011261050457600080fd5b813567ffffffffffffffff81111561051e5761051e61085c565b610531601f8201601f19166020016107c3565b81815284602083860101111561054657600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561057657600080fd5b67ffffffffffffffff808435111561058d57600080fd5b83358401604081870312156105a157600080fd5b6105a961077c565b82823511156105b757600080fd5b8135820187601f8201126105ca57600080fd5b6105d761040782356107f4565b8082358252602082019150602083018a6020853560051b86010111156105fc57600080fd5b60005b843581101561071a57878235111561061657600080fd5b81358501610180818e03601f1901121561062f57600080fd5b61063761079f565b610643602083016103d6565b815260408201356020820152606082013560408201526080820135606082015261066f60a083016104e1565b608082015261068060c083016104d1565b60a082015260e082013560c082015261010082013560e08201526101208201356101008201526101408201356101208201526101608201358a8111156106c557600080fd5b6106d48f6020838601016104f3565b610140830152506101808201358a8111156106ee57600080fd5b6106fd8f6020838601016104f3565b6101608301525085525060209384019391909101906001016105ff565b5050835250506020918201358282015293508401358181111561073c57600080fd5b610748868287016103e6565b925050509250929050565b60405160e0810167ffffffffffffffff811182821017156107765761077661085c565b60405290565b6040805190810167ffffffffffffffff811182821017156107765761077661085c565b604051610180810167ffffffffffffffff811182821017156107765761077661085c565b604051601f8201601f1916810167ffffffffffffffff811182821017156107ec576107ec61085c565b604052919050565b600067ffffffffffffffff82111561080e5761080e61085c565b5060051b60200190565b600060ff821660ff81141561083d57634e487b7160e01b600052601160045260246000fd5b60010192915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461088757600080fd5b5056fea26469706673582212209895e92e75e1e35f51dded72468ae6f7cbce0f3fde835f1358d0747e5462d36c64736f6c634300080600335a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c806318ad30881461005c5780632d8647521461008f578063636f6159146100ba57806386d551c7146100cd5780638a0aeb85146100e0575b600080fd5b6040517fb4da5d41009045940afaa90ae60b4310fcca52ab348c36bb96873df18882637081526020015b60405180910390f35b6001546100a2906001600160a01b031681565b6040516001600160a01b039091168152602001610086565b6000546100a2906001600160a01b031681565b6002546100a2906001600160a01b031681565b6100f36100ee366004610563565b610158565b604051610086919081516001600160a01b03908116825260208084015190830152604080840151821690830152606080840151909116908201526080808301519082015260a08281015115159082015260c09182015115159181019190915260e00190565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152825161019b610368565b6101a3610368565b60005b83518160ff16101561028a5760025484516001600160a01b0390911690859060ff84169081106101d8576101d8610846565b6020026020010151600001516001600160a01b0316141561021757838160ff168151811061020857610208610846565b60200260200101519150610278565b60015484516001600160a01b0390911690859060ff841690811061023d5761023d610846565b6020026020010151600001516001600160a01b0316141561027857838160ff168151811061026d5761026d610846565b602002602001015192505b8061028281610818565b9150506101a6565b5060008160600151905060008060008460a00151806102b057506000856080015160000b125b156102d757505060025460015460a08501516001600160a01b0392831693509116906102f5565b505060015460025460a08601516001600160a01b0392831693509116905b6040805160e081018252600080546001600160a01b0390811683527fb4da5d41009045940afaa90ae60b4310fcca52ab348c36bb96873df188826370602084015295861692820192909252929093166060830152608082019390935291151560a083015260c08201529695505050505050565b60405180610180016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000800b81526020016000151581526020016000815260200160008152602001600081526020016000815260200160608152602001606081525090565b80356103e181610872565b919050565b600082601f8301126103f757600080fd5b8135602061040c610407836107f4565b6107c3565b8281528181019085830160e08086028801850189101561042b57600080fd5b6000805b878110156104c25782848c031215610445578182fd5b61044d610753565b843561045881610872565b81528488013588820152604061046f8187016103d6565b9082015260606104808682016103d6565b908201526080858101359082015260a061049b8187016104d1565b9082015260c06104ac8682016104d1565b908201528652948601949282019260010161042f565b50929998505050505050505050565b803580151581146103e157600080fd5b8035600081900b81146103e157600080fd5b600082601f83011261050457600080fd5b813567ffffffffffffffff81111561051e5761051e61085c565b610531601f8201601f19166020016107c3565b81815284602083860101111561054657600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561057657600080fd5b67ffffffffffffffff808435111561058d57600080fd5b83358401604081870312156105a157600080fd5b6105a961077c565b82823511156105b757600080fd5b8135820187601f8201126105ca57600080fd5b6105d761040782356107f4565b8082358252602082019150602083018a6020853560051b86010111156105fc57600080fd5b60005b843581101561071a57878235111561061657600080fd5b81358501610180818e03601f1901121561062f57600080fd5b61063761079f565b610643602083016103d6565b815260408201356020820152606082013560408201526080820135606082015261066f60a083016104e1565b608082015261068060c083016104d1565b60a082015260e082013560c082015261010082013560e08201526101208201356101008201526101408201356101208201526101608201358a8111156106c557600080fd5b6106d48f6020838601016104f3565b610140830152506101808201358a8111156106ee57600080fd5b6106fd8f6020838601016104f3565b6101608301525085525060209384019391909101906001016105ff565b5050835250506020918201358282015293508401358181111561073c57600080fd5b610748868287016103e6565b925050509250929050565b60405160e0810167ffffffffffffffff811182821017156107765761077661085c565b60405290565b6040805190810167ffffffffffffffff811182821017156107765761077661085c565b604051610180810167ffffffffffffffff811182821017156107765761077661085c565b604051601f8201601f1916810167ffffffffffffffff811182821017156107ec576107ec61085c565b604052919050565b600067ffffffffffffffff82111561080e5761080e61085c565b5060051b60200190565b600060ff821660ff81141561083d57634e487b7160e01b600052601160045260246000fd5b60010192915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461088757600080fd5b5056fea26469706673582212209895e92e75e1e35f51dded72468ae6f7cbce0f3fde835f1358d0747e5462d36c64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6097,
        "contract": "contracts/action_builders/A3Crv2A3CrvGaugeActionBuilder.sol:A3Crv2A3CrvGaugeActionBuilder",
        "label": "tokenExchange",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ITokenExchange)9951"
      },
      {
        "astId": 6100,
        "contract": "contracts/action_builders/A3Crv2A3CrvGaugeActionBuilder.sol:A3Crv2A3CrvGaugeActionBuilder",
        "label": "a3CrvToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)1095"
      },
      {
        "astId": 6103,
        "contract": "contracts/action_builders/A3Crv2A3CrvGaugeActionBuilder.sol:A3Crv2A3CrvGaugeActionBuilder",
        "label": "a3CrvGaugeToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)1095"
      }
    ],
    "types": {
      "t_contract(IERC20)1095": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ITokenExchange)9951": {
        "encoding": "inplace",
        "label": "contract ITokenExchange",
        "numberOfBytes": "20"
      }
    }
  }
}