{
  "address": "0x53DaB165b879542E9aDFC41c6474A9d797B9b042",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenExchange",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_aUsdcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_a3CrvToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdc2AUsdcActionBuilder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "a3CrvToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aUsdcToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amountInVault",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "usdcPriceInVault",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "diffToTarget",
                  "type": "uint256"
                },
                {
                  "internalType": "int8",
                  "name": "diffToTargetSign",
                  "type": "int8"
                },
                {
                  "internalType": "bool",
                  "name": "targetIsZero",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "usdcPriceDenominator",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "usdcSellPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "usdcBuyPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct IMark2Market.AssetPrices[]",
              "name": "assetPrices",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "totalUsdcPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMark2Market.TotalAssetPrices",
          "name": "totalAssetPrices",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract ITokenExchange",
              "name": "tokenExchange",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "code",
              "type": "bytes32"
            },
            {
              "internalType": "contract IERC20",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "exchangeAll",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "executed",
              "type": "bool"
            }
          ],
          "internalType": "struct IActionBuilder.ExchangeAction[]",
          "name": "actions",
          "type": "tuple[]"
        }
      ],
      "name": "buildAction",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract ITokenExchange",
              "name": "tokenExchange",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "code",
              "type": "bytes32"
            },
            {
              "internalType": "contract IERC20",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "exchangeAll",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "executed",
              "type": "bool"
            }
          ],
          "internalType": "struct IActionBuilder.ExchangeAction",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActionCode",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenExchange",
      "outputs": [
        {
          "internalType": "contract ITokenExchange",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc2AUsdcActionBuilder",
      "outputs": [
        {
          "internalType": "contract IActionBuilder",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1682af4cbc70156f45eff9ea34ecc978fe62be16c037cfeacedcf7a11c654068",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x53DaB165b879542E9aDFC41c6474A9d797B9b042",
    "transactionIndex": 0,
    "gasUsed": "793121",
    "logsBloom": "0x
    "blockHash": "0xef8687555b996a856321e6bf9e220803b42d6e5dda722460d8f65505d4f513bc",
    "transactionHash": "0x1682af4cbc70156f45eff9ea34ecc978fe62be16c037cfeacedcf7a11c654068",
    "logs": [],
    "blockNumber": 21675014,
    "cumulativeGasUsed": "793121",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x52c9dE743a250a4D8E1194E11e447bb45324436f",
    "0x1a13F4Ca1d028320A707D99520AbFefca3998b7F",
    "0xE7a24EF0C5e95Ffb0f6684b813A78F2a3AD7D171",
    "0x1E2e9190Cea3A97b5Aa85d9757117F499D31C47d"
  ],
  "solcInputHash": "4b2c02ad00a20f5dc92f2cdd9d4eb77f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenExchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aUsdcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_a3CrvToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc2AUsdcActionBuilder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"a3CrvToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aUsdcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInVault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcPriceInVault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"diffToTarget\",\"type\":\"uint256\"},{\"internalType\":\"int8\",\"name\":\"diffToTargetSign\",\"type\":\"int8\"},{\"internalType\":\"bool\",\"name\":\"targetIsZero\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"usdcPriceDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcSellPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcBuyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct IMark2Market.AssetPrices[]\",\"name\":\"assetPrices\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"totalUsdcPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IMark2Market.TotalAssetPrices\",\"name\":\"totalAssetPrices\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract ITokenExchange\",\"name\":\"tokenExchange\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exchangeAll\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct IActionBuilder.ExchangeAction[]\",\"name\":\"actions\",\"type\":\"tuple[]\"}],\"name\":\"buildAction\",\"outputs\":[{\"components\":[{\"internalType\":\"contract ITokenExchange\",\"name\":\"tokenExchange\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exchangeAll\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct IActionBuilder.ExchangeAction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActionCode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenExchange\",\"outputs\":[{\"internalType\":\"contract ITokenExchange\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc2AUsdcActionBuilder\",\"outputs\":[{\"internalType\":\"contract IActionBuilder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/action_builders/AUsdc2A3CrvActionBuilder.sol\":\"AUsdc2A3CrvActionBuilder\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/action_builders/AUsdc2A3CrvActionBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/ITokenExchange.sol\\\";\\nimport \\\"../interfaces/IActionBuilder.sol\\\";\\nimport \\\"../interfaces/IMark2Market.sol\\\";\\n\\ncontract AUsdc2A3CrvActionBuilder is IActionBuilder {\\n    bytes32 constant ACTION_CODE = keccak256(\\\"AUsdc2A3Crv\\\");\\n\\n    ITokenExchange public tokenExchange;\\n    IERC20 public aUsdcToken;\\n    IERC20 public a3CrvToken;\\n    IActionBuilder public usdc2AUsdcActionBuilder;\\n\\n    constructor(\\n        address _tokenExchange,\\n        address _aUsdcToken,\\n        address _a3CrvToken,\\n        address _usdc2AUsdcActionBuilder\\n    ) {\\n        require(_tokenExchange != address(0), \\\"Zero address not allowed\\\");\\n        require(_aUsdcToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_a3CrvToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_usdc2AUsdcActionBuilder != address(0), \\\"Zero address not allowed\\\");\\n\\n        tokenExchange = ITokenExchange(_tokenExchange);\\n        aUsdcToken = IERC20(_aUsdcToken);\\n        a3CrvToken = IERC20(_a3CrvToken);\\n        usdc2AUsdcActionBuilder = IActionBuilder(_usdc2AUsdcActionBuilder);\\n    }\\n\\n    function getActionCode() external pure override returns (bytes32) {\\n        return ACTION_CODE;\\n    }\\n\\n    function buildAction(\\n        IMark2Market.TotalAssetPrices memory totalAssetPrices,\\n        ExchangeAction[] memory actions\\n    ) external view override returns (ExchangeAction memory) {\\n        IMark2Market.AssetPrices[] memory assetPrices = totalAssetPrices.assetPrices;\\n\\n        // get diff from iteration over prices because can't use mapping in memory params to external functions\\n        IMark2Market.AssetPrices memory aUsdcPrices;\\n        IMark2Market.AssetPrices memory a3CrvPrices;\\n        for (uint8 i = 0; i < assetPrices.length; i++) {\\n            if (assetPrices[i].asset == address(aUsdcToken)) {\\n                aUsdcPrices = assetPrices[i];\\n                continue;\\n            }\\n            if (assetPrices[i].asset == address(a3CrvToken)) {\\n                a3CrvPrices = assetPrices[i];\\n                continue;\\n            }\\n        }\\n\\n        // get diffUsdc2AUsdc to correct current diff\\n        ExchangeAction memory usdc2AUsdcAction;\\n        bytes32 usdc2AUsdcActionCode = usdc2AUsdcActionBuilder.getActionCode();\\n        bool foundDependencyAction = false;\\n        for (uint8 i = 0; i < actions.length; i++) {\\n            // here we need USDC diff to make action right\\n            if (actions[i].code == usdc2AUsdcActionCode) {\\n                usdc2AUsdcAction = actions[i];\\n                foundDependencyAction = true;\\n                break;\\n            }\\n        }\\n        require(foundDependencyAction, \\\"Required action not in action list, check calc ordering\\\");\\n\\n        // use aUsdc diff to start calc diff\\n        uint256 diff = aUsdcPrices.diffToTarget;\\n        int8 sign = aUsdcPrices.diffToTargetSign;\\n\\n        // correct diff value by usdc2AUsdc diff\\n        if (address(aUsdcToken) == address(usdc2AUsdcAction.to)) {\\n            // if in action move aUsdc->usdc then we should decrease diff (sub)\\n            (diff, sign) = unsignSub(diff, sign, usdc2AUsdcAction.amount);\\n        } else {\\n            // if in action move usdc->aUsdc then we should encrease diff (add)\\n            (diff, sign) = unsignAdd(diff, sign, usdc2AUsdcAction.amount);\\n        }\\n\\n        IERC20 from;\\n        IERC20 to;\\n        bool targetIsZero;\\n        //TODO: need to define needed of usage for targetIsZero\\n        if (sign < 0) {\\n            from = aUsdcToken;\\n            to = a3CrvToken;\\n            targetIsZero = aUsdcPrices.targetIsZero;\\n        } else {\\n            from = a3CrvToken;\\n            to = aUsdcToken;\\n            targetIsZero = a3CrvPrices.targetIsZero;\\n        }\\n\\n        ExchangeAction memory action = ExchangeAction(\\n            tokenExchange,\\n            ACTION_CODE,\\n            from,\\n            to,\\n            diff,\\n            targetIsZero,\\n            false\\n        );\\n\\n        return action;\\n    }\\n\\n    function unsignAdd(\\n        uint256 value,\\n        int8 sign,\\n        uint256 addAmount\\n    ) internal pure returns (uint256, int8) {\\n        int8 resSign = sign;\\n        if (sign < 0) {\\n            if (value > addAmount) {\\n                value = value - addAmount;\\n            } else {\\n                value = addAmount - value;\\n                resSign = int8(1);\\n            }\\n        } else {\\n            value = value + addAmount;\\n        }\\n        return (value, resSign);\\n    }\\n\\n    function unsignSub(\\n        uint256 value,\\n        int8 sign,\\n        uint256 subAmount\\n    ) internal pure returns (uint256, int8) {\\n        int8 resSign = sign;\\n        if (sign > 0) {\\n            if (value > subAmount) {\\n                value = value - subAmount;\\n            } else {\\n                value = subAmount - value;\\n                resSign = int8(-1);\\n            }\\n        } else {\\n            value = value + subAmount;\\n        }\\n        return (value, resSign);\\n    }\\n}\\n\",\"keccak256\":\"0x381b29f276311ef852dab86f614ab358b7c835b7a9d75ac98667c518c8fa0334\",\"license\":\"MIT\"},\"contracts/interfaces/IActionBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IMark2Market.sol\\\";\\nimport \\\"./ITokenExchange.sol\\\";\\n\\ninterface IActionBuilder {\\n    struct ExchangeAction {\\n        ITokenExchange tokenExchange;\\n        bytes32 code;\\n        IERC20 from;\\n        IERC20 to;\\n        uint256 amount; // amount at usdc with 6 digit fractions\\n        bool exchangeAll; // mean that we should trade all tokens to zero ownership\\n        bool executed;\\n    }\\n\\n    function getActionCode() external pure returns (bytes32);\\n\\n    function buildAction(\\n        IMark2Market.TotalAssetPrices memory assetPrices,\\n        ExchangeAction[] memory actions\\n    ) external view returns (ExchangeAction memory);\\n}\\n\",\"keccak256\":\"0x9ae4c540203b167b7450eac4b735c820a834fb228825254c9aeeb1c520392119\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IMark2Market.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IMark2Market {\\n    struct AssetPrices {\\n        address asset;\\n        uint256 amountInVault; // balance on Vault\\n        uint256 usdcPriceInVault; // current total price of balance at USDC\\n        uint256 diffToTarget; // diff usdcPriceInVault to target in portfolio\\n        int8 diffToTargetSign; // diff sign usdcPriceInVault to target in portfolio\\n        bool targetIsZero; // mean that we should trade all tokens to zero ownership\\n        //\\n        uint256 usdcPriceDenominator;\\n        uint256 usdcSellPrice;\\n        uint256 usdcBuyPrice;\\n        //\\n        uint256 decimals;\\n        string name;\\n        string symbol;\\n    }\\n\\n    struct TotalAssetPrices {\\n        AssetPrices[] assetPrices;\\n        uint256 totalUsdcPrice;\\n    }\\n\\n    function assetPrices() external view returns (TotalAssetPrices memory);\\n\\n    function assetPricesForBalance() external returns (TotalAssetPrices memory);\\n\\n    function assetPricesForBalance(address withdrawToken, uint256 withdrawAmount)\\n        external\\n        returns (TotalAssetPrices memory);\\n}\\n\",\"keccak256\":\"0x337e6890f27d2fd68742e24f9b367952b8b38a2f0d6c6ad15e67e1795ceaaa0d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ITokenExchange.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITokenExchange {\\n\\n    function exchange(\\n        address spender,\\n        IERC20 from,\\n        address receiver,\\n        IERC20 to,\\n        uint256 amount\\n    ) external;\\n\\n}\\n\",\"keccak256\":\"0x5b882bdf0c53f3ad4e7a281ad884af921b2c7ff16517bf56e50f253fc58b5bbc\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000dea38038062000dea8339810160408190526200003491620001c5565b6001600160a01b0384166200007f5760405162461bcd60e51b8152602060048201526018602482015260008051602062000dca83398151915260448201526064015b60405180910390fd5b6001600160a01b038316620000c65760405162461bcd60e51b8152602060048201526018602482015260008051602062000dca833981519152604482015260640162000076565b6001600160a01b0382166200010d5760405162461bcd60e51b8152602060048201526018602482015260008051602062000dca833981519152604482015260640162000076565b6001600160a01b038116620001545760405162461bcd60e51b8152602060048201526018602482015260008051602062000dca833981519152604482015260640162000076565b600080546001600160a01b039586166001600160a01b031991821617909155600180549486169482169490941790935560028054928516928416929092179091556003805491909316911617905562000222565b80516001600160a01b0381168114620001c057600080fd5b919050565b60008060008060808587031215620001dc57600080fd5b620001e785620001a8565b9350620001f760208601620001a8565b92506200020760408601620001a8565b91506200021760608601620001a8565b905092959194509250565b610b9880620002326000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806318ad3088146100675780632d8647521461009a578063636f6159146100c557806383909eeb146100d85780638a0aeb85146100eb578063cc3d6cf714610163575b600080fd5b6040517fc1be4323348a37ae69ece55f3e69ca17827a2e81977d80591ce3d28155a4296a81526020015b60405180910390f35b6002546100ad906001600160a01b031681565b6040516001600160a01b039091168152602001610091565b6000546100ad906001600160a01b031681565b6003546100ad906001600160a01b031681565b6100fe6100f9366004610804565b610176565b604051610091919081516001600160a01b03908116825260208084015190830152604080840151821690830152606080840151909116908201526080808301519082015260a08281015115159082015260c09182015115159181019190915260e00190565b6001546100ad906001600160a01b031681565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915282516101b96105f0565b6101c16105f0565b60005b83518160ff1610156102a85760015484516001600160a01b0390911690859060ff84169081106101f6576101f6610b1e565b6020026020010151600001516001600160a01b0316141561023557838160ff168151811061022657610226610b1e565b60200260200101519250610296565b60025484516001600160a01b0390911690859060ff841690811061025b5761025b610b1e565b6020026020010151600001516001600160a01b0316141561029657838160ff168151811061028b5761028b610b1e565b602002602001015191505b806102a081610ae8565b9150506101c4565b506040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915260035460408051630315a61160e31b815290516000926001600160a01b0316916318ad3088916004808301926020929190829003018186803b15801561032757600080fd5b505afa15801561033b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035f91906107eb565b90506000805b88518160ff1610156103d35782898260ff168151811061038757610387610b1e565b60200260200101516020015114156103c157888160ff16815181106103ae576103ae610b1e565b60200260200101519350600191506103d3565b806103cb81610ae8565b915050610365565b508061044b5760405162461bcd60e51b815260206004820152603760248201527f526571756972656420616374696f6e206e6f7420696e20616374696f6e206c6960448201527f73742c20636865636b2063616c63206f72646572696e67000000000000000000606482015260840160405180910390fd5b6060808601516080870151918501516001549192916001600160a01b039081169116141561048c5761048282828760800151610568565b90925090506104a1565b61049b828287608001516105bb565b90925090505b6000806000808460000b12156104d357505060015460025460a08a01516001600160a01b0392831693509116906104f1565b505060025460015460a08901516001600160a01b0392831693509116905b6040805160e081018252600080546001600160a01b0390811683527fc1be4323348a37ae69ece55f3e69ca17827a2e81977d80591ce3d28155a4296a602084015295861692820192909252929093166060830152608082019490945292151560a084015260c0830152509998505050505050505050565b6000808380820b8212156105a5578386111561058f576105888487610ad1565b95506105b2565b6105998685610ad1565b955060001990506105b2565b6105af8487610ab9565b95505b94959350505050565b6000808380820b8213156105a557838611156105db576105888487610ad1565b6105e58685610ad1565b9550600190506105b2565b60405180610180016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000800b81526020016000151581526020016000815260200160008152602001600081526020016000815260200160608152602001606081525090565b803561066981610b4a565b919050565b600082601f83011261067f57600080fd5b8135602061069461068f83610a95565b610a64565b8281528181019085830160e0808602880185018910156106b357600080fd5b6000805b8781101561074a5782848c0312156106cd578182fd5b6106d56109f4565b84356106e081610b4a565b8152848801358882015260406106f781870161065e565b90820152606061070886820161065e565b908201526080858101359082015260a0610723818701610759565b9082015260c0610734868201610759565b90820152865294860194928201926001016106b7565b50929998505050505050505050565b8035801515811461066957600080fd5b8035600081900b811461066957600080fd5b600082601f83011261078c57600080fd5b813567ffffffffffffffff8111156107a6576107a6610b34565b6107b9601f8201601f1916602001610a64565b8181528460208386010111156107ce57600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156107fd57600080fd5b5051919050565b6000806040838503121561081757600080fd5b67ffffffffffffffff808435111561082e57600080fd5b833584016040818703121561084257600080fd5b61084a610a1d565b828235111561085857600080fd5b8135820187601f82011261086b57600080fd5b61087861068f8235610a95565b8082358252602082019150602083018a6020853560051b860101111561089d57600080fd5b60005b84358110156109bb5787823511156108b757600080fd5b81358501610180818e03601f190112156108d057600080fd5b6108d8610a40565b6108e46020830161065e565b815260408201356020820152606082013560408201526080820135606082015261091060a08301610769565b608082015261092160c08301610759565b60a082015260e082013560c082015261010082013560e08201526101208201356101008201526101408201356101208201526101608201358a81111561096657600080fd5b6109758f60208386010161077b565b610140830152506101808201358a81111561098f57600080fd5b61099e8f60208386010161077b565b6101608301525085525060209384019391909101906001016108a0565b505083525050602091820135828201529350840135818111156109dd57600080fd5b6109e98682870161066e565b925050509250929050565b60405160e0810167ffffffffffffffff81118282101715610a1757610a17610b34565b60405290565b6040805190810167ffffffffffffffff81118282101715610a1757610a17610b34565b604051610180810167ffffffffffffffff81118282101715610a1757610a17610b34565b604051601f8201601f1916810167ffffffffffffffff81118282101715610a8d57610a8d610b34565b604052919050565b600067ffffffffffffffff821115610aaf57610aaf610b34565b5060051b60200190565b60008219821115610acc57610acc610b08565b500190565b600082821015610ae357610ae3610b08565b500390565b600060ff821660ff811415610aff57610aff610b08565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610b5f57600080fd5b5056fea2646970667358221220fafa499d6db7468e68a1a3bf67e5318580e42ba085aa8f8537baf80627b17c8e64736f6c634300080600335a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806318ad3088146100675780632d8647521461009a578063636f6159146100c557806383909eeb146100d85780638a0aeb85146100eb578063cc3d6cf714610163575b600080fd5b6040517fc1be4323348a37ae69ece55f3e69ca17827a2e81977d80591ce3d28155a4296a81526020015b60405180910390f35b6002546100ad906001600160a01b031681565b6040516001600160a01b039091168152602001610091565b6000546100ad906001600160a01b031681565b6003546100ad906001600160a01b031681565b6100fe6100f9366004610804565b610176565b604051610091919081516001600160a01b03908116825260208084015190830152604080840151821690830152606080840151909116908201526080808301519082015260a08281015115159082015260c09182015115159181019190915260e00190565b6001546100ad906001600160a01b031681565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915282516101b96105f0565b6101c16105f0565b60005b83518160ff1610156102a85760015484516001600160a01b0390911690859060ff84169081106101f6576101f6610b1e565b6020026020010151600001516001600160a01b0316141561023557838160ff168151811061022657610226610b1e565b60200260200101519250610296565b60025484516001600160a01b0390911690859060ff841690811061025b5761025b610b1e565b6020026020010151600001516001600160a01b0316141561029657838160ff168151811061028b5761028b610b1e565b602002602001015191505b806102a081610ae8565b9150506101c4565b506040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915260035460408051630315a61160e31b815290516000926001600160a01b0316916318ad3088916004808301926020929190829003018186803b15801561032757600080fd5b505afa15801561033b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035f91906107eb565b90506000805b88518160ff1610156103d35782898260ff168151811061038757610387610b1e565b60200260200101516020015114156103c157888160ff16815181106103ae576103ae610b1e565b60200260200101519350600191506103d3565b806103cb81610ae8565b915050610365565b508061044b5760405162461bcd60e51b815260206004820152603760248201527f526571756972656420616374696f6e206e6f7420696e20616374696f6e206c6960448201527f73742c20636865636b2063616c63206f72646572696e67000000000000000000606482015260840160405180910390fd5b6060808601516080870151918501516001549192916001600160a01b039081169116141561048c5761048282828760800151610568565b90925090506104a1565b61049b828287608001516105bb565b90925090505b6000806000808460000b12156104d357505060015460025460a08a01516001600160a01b0392831693509116906104f1565b505060025460015460a08901516001600160a01b0392831693509116905b6040805160e081018252600080546001600160a01b0390811683527fc1be4323348a37ae69ece55f3e69ca17827a2e81977d80591ce3d28155a4296a602084015295861692820192909252929093166060830152608082019490945292151560a084015260c0830152509998505050505050505050565b6000808380820b8212156105a5578386111561058f576105888487610ad1565b95506105b2565b6105998685610ad1565b955060001990506105b2565b6105af8487610ab9565b95505b94959350505050565b6000808380820b8213156105a557838611156105db576105888487610ad1565b6105e58685610ad1565b9550600190506105b2565b60405180610180016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000800b81526020016000151581526020016000815260200160008152602001600081526020016000815260200160608152602001606081525090565b803561066981610b4a565b919050565b600082601f83011261067f57600080fd5b8135602061069461068f83610a95565b610a64565b8281528181019085830160e0808602880185018910156106b357600080fd5b6000805b8781101561074a5782848c0312156106cd578182fd5b6106d56109f4565b84356106e081610b4a565b8152848801358882015260406106f781870161065e565b90820152606061070886820161065e565b908201526080858101359082015260a0610723818701610759565b9082015260c0610734868201610759565b90820152865294860194928201926001016106b7565b50929998505050505050505050565b8035801515811461066957600080fd5b8035600081900b811461066957600080fd5b600082601f83011261078c57600080fd5b813567ffffffffffffffff8111156107a6576107a6610b34565b6107b9601f8201601f1916602001610a64565b8181528460208386010111156107ce57600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156107fd57600080fd5b5051919050565b6000806040838503121561081757600080fd5b67ffffffffffffffff808435111561082e57600080fd5b833584016040818703121561084257600080fd5b61084a610a1d565b828235111561085857600080fd5b8135820187601f82011261086b57600080fd5b61087861068f8235610a95565b8082358252602082019150602083018a6020853560051b860101111561089d57600080fd5b60005b84358110156109bb5787823511156108b757600080fd5b81358501610180818e03601f190112156108d057600080fd5b6108d8610a40565b6108e46020830161065e565b815260408201356020820152606082013560408201526080820135606082015261091060a08301610769565b608082015261092160c08301610759565b60a082015260e082013560c082015261010082013560e08201526101208201356101008201526101408201356101208201526101608201358a81111561096657600080fd5b6109758f60208386010161077b565b610140830152506101808201358a81111561098f57600080fd5b61099e8f60208386010161077b565b6101608301525085525060209384019391909101906001016108a0565b505083525050602091820135828201529350840135818111156109dd57600080fd5b6109e98682870161066e565b925050509250929050565b60405160e0810167ffffffffffffffff81118282101715610a1757610a17610b34565b60405290565b6040805190810167ffffffffffffffff81118282101715610a1757610a17610b34565b604051610180810167ffffffffffffffff81118282101715610a1757610a17610b34565b604051601f8201601f1916810167ffffffffffffffff81118282101715610a8d57610a8d610b34565b604052919050565b600067ffffffffffffffff821115610aaf57610aaf610b34565b5060051b60200190565b60008219821115610acc57610acc610b08565b500190565b600082821015610ae357610ae3610b08565b500390565b600060ff821660ff811415610aff57610aff610b08565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610b5f57600080fd5b5056fea2646970667358221220fafa499d6db7468e68a1a3bf67e5318580e42ba085aa8f8537baf80627b17c8e64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6339,
        "contract": "contracts/action_builders/AUsdc2A3CrvActionBuilder.sol:AUsdc2A3CrvActionBuilder",
        "label": "tokenExchange",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ITokenExchange)9951"
      },
      {
        "astId": 6342,
        "contract": "contracts/action_builders/AUsdc2A3CrvActionBuilder.sol:AUsdc2A3CrvActionBuilder",
        "label": "aUsdcToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)1095"
      },
      {
        "astId": 6345,
        "contract": "contracts/action_builders/AUsdc2A3CrvActionBuilder.sol:AUsdc2A3CrvActionBuilder",
        "label": "a3CrvToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)1095"
      },
      {
        "astId": 6348,
        "contract": "contracts/action_builders/AUsdc2A3CrvActionBuilder.sol:AUsdc2A3CrvActionBuilder",
        "label": "usdc2AUsdcActionBuilder",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IActionBuilder)9775"
      }
    ],
    "types": {
      "t_contract(IActionBuilder)9775": {
        "encoding": "inplace",
        "label": "contract IActionBuilder",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1095": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ITokenExchange)9951": {
        "encoding": "inplace",
        "label": "contract ITokenExchange",
        "numberOfBytes": "20"
      }
    }
  }
}