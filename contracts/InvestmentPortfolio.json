{
  "address": "0x26DAc33aCcf8D28cf26CcC0135d8c6EE3233a2E7",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "priceGetter",
          "type": "address"
        }
      ],
      "name": "UpdatedAssetInfo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minWeight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetWeight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxWeight",
          "type": "uint256"
        }
      ],
      "name": "UpdatedAssetWeight",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOTAL_WEIGHT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "priceGetter",
              "type": "address"
            }
          ],
          "internalType": "struct InvestmentPortfolio.AssetInfo",
          "name": "assetInfo",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "addAssetInfoAt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetInfoPositions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "assetInfos",
      "outputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceGetter",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetWeightPositions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "assetWeights",
      "outputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxWeight",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllAssetInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "priceGetter",
              "type": "address"
            }
          ],
          "internalType": "struct InvestmentPortfolio.AssetInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllAssetWeights",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxWeight",
              "type": "uint256"
            }
          ],
          "internalType": "struct InvestmentPortfolio.AssetWeight[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getAssetInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "priceGetter",
              "type": "address"
            }
          ],
          "internalType": "struct InvestmentPortfolio.AssetInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getAssetWeight",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxWeight",
              "type": "uint256"
            }
          ],
          "internalType": "struct InvestmentPortfolio.AssetWeight",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "priceGetter",
              "type": "address"
            }
          ],
          "internalType": "struct InvestmentPortfolio.AssetInfo[]",
          "name": "_assetInfos",
          "type": "tuple[]"
        }
      ],
      "name": "setAssetInfos",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxWeight",
              "type": "uint256"
            }
          ],
          "internalType": "struct InvestmentPortfolio.AssetWeight[]",
          "name": "_assetWeights",
          "type": "tuple[]"
        }
      ],
      "name": "setWeights",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xed0a324d484e0e81e496233c40919b830b5e0f46358dde5d9b35018e6bba06ff",
  "receipt": {
    "to": null,
    "from": "0x5CB01385d3097b6a189d1ac8BA3364D900666445",
    "contractAddress": "0x26DAc33aCcf8D28cf26CcC0135d8c6EE3233a2E7",
    "transactionIndex": 54,
    "gasUsed": "1326616",
    "logsBloom": "0x
    "blockHash": "0x3bc64e1c79c083014de092b6c0b8fa26652924021eaa29ea19220e321cd7e2c9",
    "transactionHash": "0xed0a324d484e0e81e496233c40919b830b5e0f46358dde5d9b35018e6bba06ff",
    "logs": [
      {
        "transactionIndex": 54,
        "blockNumber": 21746808,
        "transactionHash": "0xed0a324d484e0e81e496233c40919b830b5e0f46358dde5d9b35018e6bba06ff",
        "address": "0x26DAc33aCcf8D28cf26CcC0135d8c6EE3233a2E7",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005cb01385d3097b6a189d1ac8ba3364d900666445",
          "0x0000000000000000000000005cb01385d3097b6a189d1ac8ba3364d900666445"
        ],
        "data": "0x",
        "logIndex": 351,
        "blockHash": "0x3bc64e1c79c083014de092b6c0b8fa26652924021eaa29ea19220e321cd7e2c9"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 21746808,
        "transactionHash": "0xed0a324d484e0e81e496233c40919b830b5e0f46358dde5d9b35018e6bba06ff",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005cb01385d3097b6a189d1ac8ba3364d900666445",
          "0x000000000000000000000000f0245f6251bef9447a08766b9da2b07b28ad80b0"
        ],
        "data": "0x000000000000000000000000000000000000000000000000008d6481b7002000000000000000000000000000000000000000000000000000fac596bca594e580000000000000000000000000000000000000000000000052a9bef0948ddd4262000000000000000000000000000000000000000000000000fa38323aee94c580000000000000000000000000000000000000000000000052aa4c551644dd6262",
        "logIndex": 352,
        "blockHash": "0x3bc64e1c79c083014de092b6c0b8fa26652924021eaa29ea19220e321cd7e2c9"
      }
    ],
    "blockNumber": 21746808,
    "cumulativeGasUsed": "11451022",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "4b2c02ad00a20f5dc92f2cdd9d4eb77f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"priceGetter\",\"type\":\"address\"}],\"name\":\"UpdatedAssetInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"}],\"name\":\"UpdatedAssetWeight\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_WEIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceGetter\",\"type\":\"address\"}],\"internalType\":\"struct InvestmentPortfolio.AssetInfo\",\"name\":\"assetInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"addAssetInfoAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetInfoPositions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assetInfos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceGetter\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetWeightPositions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assetWeights\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAssetInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceGetter\",\"type\":\"address\"}],\"internalType\":\"struct InvestmentPortfolio.AssetInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAssetWeights\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"}],\"internalType\":\"struct InvestmentPortfolio.AssetWeight[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAssetInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceGetter\",\"type\":\"address\"}],\"internalType\":\"struct InvestmentPortfolio.AssetInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAssetWeight\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"}],\"internalType\":\"struct InvestmentPortfolio.AssetWeight\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceGetter\",\"type\":\"address\"}],\"internalType\":\"struct InvestmentPortfolio.AssetInfo[]\",\"name\":\"_assetInfos\",\"type\":\"tuple[]\"}],\"name\":\"setAssetInfos\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"}],\"internalType\":\"struct InvestmentPortfolio.AssetWeight[]\",\"name\":\"_assetWeights\",\"type\":\"tuple[]\"}],\"name\":\"setWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/registries/InvestmentPortfolio.sol\":\"InvestmentPortfolio\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x084f583de2c714665b0304529fe8b826a2809f29d03314e4dd9eea926e4bb0f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/registries/InvestmentPortfolio.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract InvestmentPortfolio is AccessControl {\\n    uint256 public constant TOTAL_WEIGHT = 100000; // 100000 ~ 100%\\n\\n    mapping(address => uint256) public assetInfoPositions;\\n    AssetInfo[] public assetInfos;\\n    mapping(address => uint256) public assetWeightPositions;\\n    AssetWeight[] public assetWeights;\\n\\n    event UpdatedAssetWeight(\\n        uint256 index,\\n        address asset,\\n        uint256 minWeight,\\n        uint256 targetWeight,\\n        uint256 maxWeight\\n    );\\n    event UpdatedAssetInfo(uint256 index, address asset, address priceGetter);\\n\\n    struct AssetWeight {\\n        address asset;\\n        uint256 minWeight;\\n        uint256 targetWeight;\\n        uint256 maxWeight;\\n    }\\n\\n    struct AssetInfo {\\n        address asset;\\n        address priceGetter;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function setAssetInfos(AssetInfo[] calldata _assetInfos) external onlyAdmin {\\n        for (uint8 i = 0; i < _assetInfos.length; i++) {\\n            _addAssetInfoAt(_assetInfos[i], i);\\n        }\\n        // truncate array if needed\\n        if (assetInfos.length > _assetInfos.length) {\\n            uint256 removeCount = assetInfos.length - _assetInfos.length;\\n            for (uint8 i = 0; i < removeCount; i++) {\\n                //TODO: do we need remove from mapping?\\n                assetInfos.pop();\\n            }\\n        }\\n    }\\n\\n    function addAssetInfoAt(AssetInfo calldata assetInfo, uint256 index) external onlyAdmin {\\n        _addAssetInfoAt(assetInfo, index);\\n    }\\n\\n    function _addAssetInfoAt(AssetInfo calldata assetInfo, uint256 index) internal {\\n        uint256 currentlength = assetInfos.length;\\n        // expand array id needed\\n        if (currentlength == 0 || currentlength - 1 < index) {\\n            uint256 additionalCount = index - currentlength + 1;\\n            for (uint8 i = 0; i < additionalCount; i++) {\\n                assetInfos.push();\\n            }\\n        }\\n        assetInfos[index] = assetInfo;\\n        assetInfoPositions[assetInfo.asset] = index;\\n        emit UpdatedAssetInfo(index, assetInfo.asset, assetInfo.priceGetter);\\n    }\\n\\n    function setWeights(AssetWeight[] calldata _assetWeights) external onlyAdmin {\\n        uint256 totalTarget = 0;\\n        for (uint8 i = 0; i < _assetWeights.length; i++) {\\n            AssetWeight memory assetWeight = _assetWeights[i];\\n            require(assetWeight.asset != address(0), \\\"weight without asset\\\");\\n            require(\\n                assetWeight.minWeight <= assetWeight.targetWeight,\\n                \\\"minWeight shouldn't higher than targetWeight\\\"\\n            );\\n            require(\\n                assetWeight.targetWeight <= assetWeight.maxWeight,\\n                \\\"targetWeight shouldn't higher than maxWeight\\\"\\n            );\\n            totalTarget += assetWeight.targetWeight;\\n        }\\n        require(totalTarget == TOTAL_WEIGHT, \\\"Total target should equal to TOTAL_WEIGHT\\\");\\n\\n        for (uint8 i = 0; i < _assetWeights.length; i++) {\\n            _addWeightAt(_assetWeights[i], i);\\n            assetWeightPositions[assetWeights[i].asset] = i;\\n        }\\n\\n        // truncate if need\\n        if (assetWeights.length > _assetWeights.length) {\\n            uint256 removeCount = assetWeights.length - _assetWeights.length;\\n            for (uint8 i = 0; i < removeCount; i++) {\\n                assetWeights.pop();\\n            }\\n        }\\n    }\\n\\n    function _addWeightAt(AssetWeight memory assetWeight, uint256 index) internal {\\n        uint256 currentlength = assetWeights.length;\\n        // expand if need\\n        if (currentlength == 0 || currentlength - 1 < index) {\\n            uint256 additionalCount = index - currentlength + 1;\\n            for (uint8 i = 0; i < additionalCount; i++) {\\n                assetWeights.push();\\n            }\\n        }\\n        assetWeights[index] = assetWeight;\\n        emit UpdatedAssetWeight(\\n            index,\\n            assetWeight.asset,\\n            assetWeight.minWeight,\\n            assetWeight.targetWeight,\\n            assetWeight.maxWeight\\n        );\\n    }\\n\\n    function getAssetInfo(address asset) external view returns (AssetInfo memory) {\\n        return assetInfos[assetInfoPositions[asset]];\\n    }\\n\\n    function getAllAssetInfos() external view returns (AssetInfo[] memory) {\\n        return assetInfos;\\n    }\\n\\n    function getAssetWeight(address asset) external view returns (AssetWeight memory) {\\n        return assetWeights[assetWeightPositions[asset]];\\n    }\\n\\n    function getAllAssetWeights() external view returns (AssetWeight[] memory) {\\n        return assetWeights;\\n    }\\n}\\n\",\"keccak256\":\"0x2f192bc7bc754d6b4f05bc0d6a8cdade1c0713d58a7fdef14a7dfbee9a4a7fb6\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c8063504056c7116100ad578063afad2e1611610071578063afad2e16146102a2578063cb82e3df146102c2578063d14ef46d146102e2578063d547741f14610315578063ed2a2f9d1461032857600080fd5b8063504056c71461024e57806391d14854146102615780639d814e9c146102745780639ec2cdbc14610287578063a217fddf1461029a57600080fd5b80632f2ff15d116100f45780632f2ff15d146101b457806336568abe146101c95780633a7e9db0146101dc5780633ff94f04146101fc57806344a778d61461021157600080fd5b806301ffc9a7146101265780631aeb0df81461014e578063237dd2ec14610163578063248a9ca314610191575b600080fd5b610139610134366004611203565b610332565b60405190151581526020015b60405180910390f35b610156610369565b6040516101459190611350565b6101836101713660046110c5565b60016020526000908152604090205481565b604051908152602001610145565b61018361019f3660046111ba565b60009081526020819052604090206001015490565b6101c76101c23660046111d3565b6103e1565b005b6101c76101d73660046111d3565b61040c565b6101ef6101ea3660046110c5565b61048f565b60405161014591906114ad565b610204610541565b60405161014591906113b3565b61022461021f3660046111ba565b6105c2565b604080516001600160a01b0390951685526020850193909352918301526060820152608001610145565b6101c761025c366004611157565b610606565b61013961026f3660046111d3565b61094a565b6101c76102823660046110e2565b610973565b6101c761029536600461122d565b610a6a565b610183600081565b6102b56102b03660046110c5565b610a9b565b6040516101459190611489565b6101836102d03660046110c5565b60036020526000908152604090205481565b6102f56102f03660046111ba565b610b1b565b604080516001600160a01b03938416815292909116602083015201610145565b6101c76103233660046111d3565b610b54565b610183620186a081565b60006001600160e01b03198216637965db0b60e01b148061036357506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606002805480602002602001604051908101604052809291908181526020016000905b828210156103d8576000848152602090819020604080518082019091526002850290910180546001600160a01b0390811683526001918201541682840152908352909201910161038d565b50505050905090565b6000828152602081905260409020600101546103fd8133610b7a565b6104078383610bde565b505050565b6001600160a01b03811633146104815760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61048b8282610c62565b5050565b6104c3604051806080016040528060006001600160a01b031681526020016000815260200160008152602001600081525090565b6001600160a01b0382166000908152600360205260409020546004805490919081106104f1576104f16115be565b600091825260209182902060408051608081018252600490930290910180546001600160a01b03168352600181015493830193909352600283015490820152600390910154606082015292915050565b60606004805480602002602001604051908101604052809291908181526020016000905b828210156103d8576000848152602090819020604080516080810182526004860290920180546001600160a01b03168352600180820154848601526002820154928401929092526003015460608301529083529092019101610565565b600481815481106105d257600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039092169350919084565b61061160003361094a565b61062d5760405162461bcd60e51b81526004016104789061145b565b6000805b60ff81168311156107b957600084848360ff16818110610653576106536115be565b905060800201803603810190610669919061125e565b80519091506001600160a01b03166106ba5760405162461bcd60e51b81526020600482015260146024820152731dd95a59da1d081dda5d1a1bdd5d08185cdcd95d60621b6044820152606401610478565b8060400151816020015111156107275760405162461bcd60e51b815260206004820152602c60248201527f6d696e5765696768742073686f756c646e277420686967686572207468616e2060448201526b1d185c99d95d15d95a59da1d60a21b6064820152608401610478565b8060600151816040015111156107945760405162461bcd60e51b815260206004820152602c60248201527f7461726765745765696768742073686f756c646e27742068696768657220746860448201526b185b881b585e15d95a59da1d60a21b6064820152608401610478565b60408101516107a390846114e1565b92505080806107b190611572565b915050610631565b50620186a0811461081e5760405162461bcd60e51b815260206004820152602960248201527f546f74616c207461726765742073686f756c6420657175616c20746f20544f54604482015268105317d5d15251d21560ba1b6064820152608401610478565b60005b60ff81168311156108bd5761086384848360ff16818110610844576108446115be565b90506080020180360381019061085a919061125e565b8260ff16610cc7565b8060ff166003600060048460ff1681548110610881576108816115be565b600091825260208083206004909202909101546001600160a01b03168352820192909252604001902055806108b581611572565b915050610821565b50600454821015610407576004546000906108d9908490611518565b905060005b818160ff1610156109435760048054806108fa576108fa6115a8565b60008281526020812060046000199093019283020180546001600160a01b031916815560018101829055600281018290556003015590558061093b81611572565b9150506108de565b5050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b61097e60003361094a565b61099a5760405162461bcd60e51b81526004016104789061145b565b60005b60ff81168211156109e1576109cf83838360ff168181106109c0576109c06115be565b9050604002018260ff16610df6565b806109d981611572565b91505061099d565b5060025481101561048b576002546000906109fd908390611518565b905060005b818160ff161015610a64576002805480610a1e57610a1e6115a8565b60008281526020902060026000199092019182020180546001600160a01b0319908116825560019190910180549091169055905580610a5c81611572565b915050610a02565b50505050565b610a7560003361094a565b610a915760405162461bcd60e51b81526004016104789061145b565b61048b8282610df6565b60408051808201909152600080825260208201526001600160a01b038216600090815260016020526040902054600280549091908110610add57610add6115be565b60009182526020918290206040805180820190915260029092020180546001600160a01b039081168352600190910154169181019190915292915050565b60028181548110610b2b57600080fd5b6000918252602090912060029091020180546001909101546001600160a01b0391821692501682565b600082815260208190526040902060010154610b708133610b7a565b6104078383610c62565b610b84828261094a565b61048b57610b9c816001600160a01b03166014610f22565b610ba7836020610f22565b604051602001610bb89291906112db565b60408051601f198184030181529082905262461bcd60e51b825261047891600401611428565b610be8828261094a565b61048b576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610c1e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610c6c828261094a565b1561048b576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600454801580610ce0575081610cde600183611518565b105b15610d2d576000610cf18284611518565b610cfc9060016114e1565b905060005b818160ff161015610d2a5760048054600101815560005280610d2281611572565b915050610d01565b50505b8260048381548110610d4157610d416115be565b600091825260209182902083516004929092020180546001600160a01b0319166001600160a01b039283161781558383015160018201556040808501516002830155606094850151600390920191909155865187840151888301518987015184518a81529390951695830195909552918101919091529283019190915260808201527f58a1918bf77ddc82eb3e1783404ebecd42f486aa3279cc81bfa426cd8fadae249060a0015b60405180910390a1505050565b600254801580610e0f575081610e0d600183611518565b105b15610e5c576000610e208284611518565b610e2b9060016114e1565b905060005b818160ff161015610e595760028054600101815560005280610e5181611572565b915050610e30565b50505b8260028381548110610e7057610e706115be565b90600052602060002090600202018181610e8a919061160a565b5082905060016000610e9f60208701876110c5565b6001600160a01b03168152602080820192909252604001600020919091557f25d573ef371a230567e810257ebf422f1066d89accf3e84e2cf31bab59c6591b908390610eed908601866110c5565b610efd60408701602088016110c5565b604080519384526001600160a01b039283166020850152911690820152606001610de9565b60606000610f318360026114f9565b610f3c9060026114e1565b67ffffffffffffffff811115610f5457610f546115d4565b6040519080825280601f01601f191660200182016040528015610f7e576020820181803683370190505b509050600360fc1b81600081518110610f9957610f996115be565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610fc857610fc86115be565b60200101906001600160f81b031916908160001a9053506000610fec8460026114f9565b610ff79060016114e1565b90505b600181111561106f576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061102b5761102b6115be565b1a60f81b828281518110611041576110416115be565b60200101906001600160f81b031916908160001a90535060049490941c936110688161155b565b9050610ffa565b5083156110be5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610478565b9392505050565b6000602082840312156110d757600080fd5b81356110be8161163b565b600080602083850312156110f557600080fd5b823567ffffffffffffffff8082111561110d57600080fd5b818501915085601f83011261112157600080fd5b81358181111561113057600080fd5b8660208260061b850101111561114557600080fd5b60209290920196919550909350505050565b6000806020838503121561116a57600080fd5b823567ffffffffffffffff8082111561118257600080fd5b818501915085601f83011261119657600080fd5b8135818111156111a557600080fd5b8660208260071b850101111561114557600080fd5b6000602082840312156111cc57600080fd5b5035919050565b600080604083850312156111e657600080fd5b8235915060208301356111f88161163b565b809150509250929050565b60006020828403121561121557600080fd5b81356001600160e01b0319811681146110be57600080fd5b600080828403606081121561124157600080fd5b604081121561124f57600080fd5b50919360408501359350915050565b60006080828403121561127057600080fd5b6040516080810181811067ffffffffffffffff821117156112a157634e487b7160e01b600052604160045260246000fd5b60405282356112af8161163b565b808252506020830135602082015260408301356040820152606083013560608201528091505092915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161131381601785016020880161152f565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161134481602884016020880161152f565b01602801949350505050565b602080825282518282018190526000919060409081850190868401855b828110156113a65761139684835180516001600160a01b03908116835260209182015116910152565b928401929085019060010161136d565b5091979650505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561141c5761140983855180516001600160a01b031682526020808201519083015260408082015190830152606090810151910152565b92840192608092909201916001016113cf565b50909695505050505050565b602081526000825180602084015261144781604085016020870161152f565b601f01601f19169190910160400192915050565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b60408101610363828480516001600160a01b03908116835260209182015116910152565b81516001600160a01b0316815260208083015190820152604080830151908201526060808301519082015260808101610363565b600082198211156114f4576114f4611592565b500190565b600081600019048311821515161561151357611513611592565b500290565b60008282101561152a5761152a611592565b500390565b60005b8381101561154a578181015183820152602001611532565b83811115610a645750506000910152565b60008161156a5761156a611592565b506000190190565b600060ff821660ff81141561158957611589611592565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80546001600160a01b0319166001600160a01b0392909216919091179055565b81356116158161163b565b61161f81836115ea565b50602082013561162e8161163b565b61040781600184016115ea565b6001600160a01b038116811461165057600080fd5b5056fea26469706673582212203fdbdfa3680a10a557e0503b4d0a5e2ed86279570079e540c00041aaef54f4cb64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 62,
        "contract": "contracts/registries/InvestmentPortfolio.sol:InvestmentPortfolio",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)"
      },
      {
        "astId": 10607,
        "contract": "contracts/registries/InvestmentPortfolio.sol:InvestmentPortfolio",
        "label": "assetInfoPositions",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10611,
        "contract": "contracts/registries/InvestmentPortfolio.sol:InvestmentPortfolio",
        "label": "assetInfos",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(AssetInfo)10653_storage)dyn_storage"
      },
      {
        "astId": 10615,
        "contract": "contracts/registries/InvestmentPortfolio.sol:InvestmentPortfolio",
        "label": "assetWeightPositions",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10619,
        "contract": "contracts/registries/InvestmentPortfolio.sol:InvestmentPortfolio",
        "label": "assetWeights",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(AssetWeight)10648_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(AssetInfo)10653_storage)dyn_storage": {
        "base": "t_struct(AssetInfo)10653_storage",
        "encoding": "dynamic_array",
        "label": "struct InvestmentPortfolio.AssetInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(AssetWeight)10648_storage)dyn_storage": {
        "base": "t_struct(AssetWeight)10648_storage",
        "encoding": "dynamic_array",
        "label": "struct InvestmentPortfolio.AssetWeight[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)57_storage"
      },
      "t_struct(AssetInfo)10653_storage": {
        "encoding": "inplace",
        "label": "struct InvestmentPortfolio.AssetInfo",
        "members": [
          {
            "astId": 10650,
            "contract": "contracts/registries/InvestmentPortfolio.sol:InvestmentPortfolio",
            "label": "asset",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10652,
            "contract": "contracts/registries/InvestmentPortfolio.sol:InvestmentPortfolio",
            "label": "priceGetter",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(AssetWeight)10648_storage": {
        "encoding": "inplace",
        "label": "struct InvestmentPortfolio.AssetWeight",
        "members": [
          {
            "astId": 10641,
            "contract": "contracts/registries/InvestmentPortfolio.sol:InvestmentPortfolio",
            "label": "asset",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10643,
            "contract": "contracts/registries/InvestmentPortfolio.sol:InvestmentPortfolio",
            "label": "minWeight",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10645,
            "contract": "contracts/registries/InvestmentPortfolio.sol:InvestmentPortfolio",
            "label": "targetWeight",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10647,
            "contract": "contracts/registries/InvestmentPortfolio.sol:InvestmentPortfolio",
            "label": "maxWeight",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoleData)57_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 54,
            "contract": "contracts/registries/InvestmentPortfolio.sol:InvestmentPortfolio",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 56,
            "contract": "contracts/registries/InvestmentPortfolio.sol:InvestmentPortfolio",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}