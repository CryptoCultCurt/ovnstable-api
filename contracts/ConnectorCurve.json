{
  "address": "0x8659DF1C638CDA8E475CD3C6481730C2b4f85873",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "UpdatedPool",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract iCurvePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "rolemap",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "setPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_actor",
          "type": "address"
        }
      ],
      "name": "setRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiar",
          "type": "address"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiar",
          "type": "address"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfd54c500a5c012a99d6b276c3fa26fe427b225414f12f73345b8fb07ad66a705",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x8659DF1C638CDA8E475CD3C6481730C2b4f85873",
    "transactionIndex": 0,
    "gasUsed": "1250951",
    "logsBloom": "0x
    "blockHash": "0xad0e718df501b6871ae74e0a4c2a7a207b809bbe2b8a9e6dee0f9241072add48",
    "transactionHash": "0xfd54c500a5c012a99d6b276c3fa26fe427b225414f12f73345b8fb07ad66a705",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 21675007,
        "transactionHash": "0xfd54c500a5c012a99d6b276c3fa26fe427b225414f12f73345b8fb07ad66a705",
        "address": "0x8659DF1C638CDA8E475CD3C6481730C2b4f85873",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xad0e718df501b6871ae74e0a4c2a7a207b809bbe2b8a9e6dee0f9241072add48"
      }
    ],
    "blockNumber": 21675007,
    "cumulativeGasUsed": "1250951",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "4b2c02ad00a20f5dc92f2cdd9d4eb77f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"UpdatedPool\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract iCurvePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"rolemap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_actor\",\"type\":\"address\"}],\"name\":\"setRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiar\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiar\",\"type\":\"address\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/connectors/ConnectorCurve.sol\":\"ConnectorCurve\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/OwnableExt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableExt is Context {\\n    address private _owner;\\n    mapping(bytes32 => address) public rolemap;\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"OwnableExt: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function setRole(bytes32 _role, address _actor) external onlyOwner {\\n        require(_actor != address(0), \\\"Zero address not allowed\\\");\\n        rolemap[_role] = _actor;\\n        //TODO: \\u0434\\u043e\\u0431\\u0430\\u0432\\u0438\\u0442\\u044c \\u0441\\u043e\\u0431\\u044b\\u0442\\u0438\\u0435\\n    }\\n\\n    modifier onlyRole(bytes32 _role) {\\n        require(rolemap[_role] == _msgSender(), \\\"OwnableExt: caller has not the role\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        require(newOwner != address(0), \\\"Zero address not allowed\\\");\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc1a82972bca3ffd2428a667ce77a7f33c0ebdf1f18eee615059eb57ca6f303c1\",\"license\":\"MIT\"},\"contracts/connectors/ConnectorCurve.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\nimport \\\"../interfaces/IConnector.sol\\\";\\n\\nimport \\\"./curve/interfaces/iCurvePool.sol\\\";\\nimport \\\"./curve/interfaces/iCurveToken.sol\\\";\\nimport \\\"../OwnableExt.sol\\\";\\n\\ncontract ConnectorCurve is IConnector, OwnableExt {\\n    iCurvePool public pool;\\n\\n    event UpdatedPool(address pool);\\n\\n    function setPool(address _pool) public onlyOwner {\\n        require(_pool != address(0), \\\"Zero address not allowed\\\");\\n        pool = iCurvePool(_pool);\\n        emit UpdatedPool(_pool);\\n    }\\n\\n    function stake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiar\\n    ) public override {\\n        uint256[3] memory amounts;\\n        for (uint256 i = 0; i < 3; i++) {\\n            address coin = pool.coins(i);\\n            if (coin == _asset) {\\n                iCurveToken(_asset).approve(address(pool), _amount);\\n                // \\u043d\\u043e\\u043c\\u0435\\u0440 \\u043f\\u043e\\u0437\\u0438\\u0446\\u0438\\u0438 \\u0432 \\u043c\\u0430\\u0441\\u0441\\u0438\\u0432\\u0435 (amounts) \\u043e\\u043f\\u0440\\u0435\\u0434\\u0435\\u043b\\u044f\\u0435\\u0442 \\u043a\\u0430\\u043a\\u043e\\u0439 \\u0430\\u043a\\u0442\\u0438\\u0432 (_asset) \\u0438 \\u0432 \\u043a\\u0430\\u043a\\u043e\\u043c \\u043a\\u043e\\u043b\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u0435 (_amount)\\n                // \\u043d\\u0430 \\u0441\\u0442\\u043e\\u0440\\u043e\\u043d\\u0435 \\u043a\\u0435\\u0440\\u0432\\u0430 \\u0431\\u0443\\u0434\\u0435\\u0442 \\u0437\\u0430\\u0441\\u0442\\u0435\\u0439\\u043a\\u0430\\u043d\\u043e\\n                amounts[uint256(i)] = _amount;\\n                uint256 lpTok = pool.calc_token_amount(amounts, true);\\n                //TODO: \\u043f\\u0440\\u043e\\u0446\\u0435\\u043d\\u0442\\u0430\\u0436\\u0438 \\u043a\\u0443\\u0434\\u0430\\u0442\\u043e \\u0432\\u044b\\u043d\\u0435\\u0441\\u0442\\u0438, slipage\\n                uint256 retAmount = pool.add_liquidity(amounts, (lpTok * 99) / 100, false);\\n                iCurveToken(pool.lp_token()).transfer(_beneficiar, retAmount);\\n                // actList.changeBal(_asset, -int128(uint128(_amount)));\\n\\n                // actList.changeBal(pool.lp_token(), int128(uint128(retAmount)));\\n\\n                return;\\n            } else {\\n                amounts[i] = 0;\\n            }\\n        }\\n        revert(\\\"can't find active for staking in pool\\\");\\n    }\\n\\n    function unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiar\\n    ) public override returns (uint256) {\\n        uint256[3] memory amounts;\\n        for (uint256 i = 0; i < 3; i++) {\\n            address coin = pool.coins(i);\\n\\n            if (coin == _asset) {\\n                amounts[i] = _amount;\\n\\n                uint256 onConnectorLpTokenAmount = iCurveToken(pool.lp_token()).balanceOf(\\n                    address(this)\\n                );\\n\\n                // try pool.calc_token_amount(amounts, false) returns (uint256 lpTok) {\\n                //     // uint256 lpTok = pool.calc_token_amount(amounts, false);\\n\\n                //     try pool.calc_withdraw_one_coin(lpTok, int128(uint128(i))) returns (\\n                //         uint256 withdrAmount\\n                //     ) {\\n                //         require(\\n                //             withdrAmount <= onConnectorLpTokenAmount,\\n                //             string(\\n                //                 abi.encodePacked(\\n                //                     \\\"Not enought lpToken own \\\",\\n                //                     \\\" _amount \\\",\\n                //                     uint2str(_amount),\\n                //                     \\\" lpTok \\\",\\n                //                     uint2str(lpTok),\\n                //                     \\\" onConnectorLpTokenAmount \\\",\\n                //                     uint2str(onConnectorLpTokenAmount),\\n                //                     \\\" withdrAmount \\\",\\n                //                     uint2str(withdrAmount),\\n                //                     \\\" lpToken \\\",\\n                //                     toAsciiString(pool.lp_token())\\n                //                 )\\n                //             )\\n                //         );\\n\\n                //         try iCurveToken(pool.lp_token()).approve(address(pool), lpTok) {\\n                //             try\\n                //                 pool.remove_liquidity_one_coin(lpTok, int128(uint128(i)), 0)\\n                //             returns (uint256 retAmount) {\\n                //                 // IERC20(_asset).transfer(_beneficiar, retAmount);\\n                //                 // iCurveToken(pool.lp_token()).transfer(\\n                //                 //     _beneficiar,\\n                //                 //     iCurveToken(pool.lp_token()).balanceOf(address(this))\\n                //                 // );\\n\\n                //                 try IERC20(_asset).transfer(_beneficiar, retAmount) {\\n                //                     try\\n                //                         iCurveToken(pool.lp_token()).transfer(\\n                //                             _beneficiar,\\n                //                             iCurveToken(pool.lp_token()).balanceOf(address(this))\\n                //                         )\\n                //                     {\\n                //                         return retAmount;\\n                //                     } catch Error(string memory reason) {\\n                //                         revert(reason);\\n                //                     } catch {\\n                //                         revert(\\\"iCurveToken(pool.lp_token()).transfer\\\");\\n                //                     }\\n                //                 } catch Error(string memory reason) {\\n                //                     revert(reason);\\n                //                 } catch {\\n                //                     revert(\\\"IERC20(_asset).transfer\\\");\\n                //                 }\\n                //             } catch Error(string memory reason) {\\n                //                 revert(reason);\\n                //             } catch {\\n                //                 revert(\\n                //                     string(\\n                //                         abi.encodePacked(\\n                //                             \\\"pool.remove_liquidity_one_coin \\\",\\n                //                             \\\" _amount \\\",\\n                //                             uint2str(_amount),\\n                //                             \\\" lpTok \\\",\\n                //                             uint2str(lpTok),\\n                //                             \\\" withdrAmount \\\",\\n                //                             uint2str(withdrAmount),\\n                //                             \\\" balanceLpTok \\\",\\n                //                             uint2str(\\n                //                                 iCurveToken(pool.lp_token()).balanceOf(\\n                //                                     address(this)\\n                //                                 )\\n                //                             )\\n                //                         )\\n                //                     )\\n                //                 );\\n                //             }\\n                //         } catch Error(string memory reason) {\\n                //             revert(reason);\\n                //         } catch {\\n                //             // revert(\\\"iCurveToken(pool.lp_token()).approve\\\");\\n                //             revert(\\n                //                 string(\\n                //                     abi.encodePacked(\\n                //                         \\\"piCurveToken(pool.lp_token()).approve \\\",\\n                //                         \\\" _amount \\\",\\n                //                         uint2str(_amount)\\n                //                     )\\n                //                 )\\n                //             );\\n                //         }\\n                //     } catch Error(string memory reason) {\\n                //         revert(reason);\\n                //     } catch {\\n                //         // revert(\\\"pool.calc_withdraw_one_coin\\\");\\n                //         revert(\\n                //             string(\\n                //                 abi.encodePacked(\\n                //                     \\\"pool.calc_withdraw_one_coin \\\",\\n                //                     \\\" _amount \\\",\\n                //                     uint2str(_amount)\\n                //                 )\\n                //             )\\n                //         );\\n                //     }\\n                // } catch Error(string memory reason) {\\n                //     revert(reason);\\n                // } catch {\\n                //     // revert(\\\"pool.calc_token_amount\\\");\\n                //     revert(\\n                //         string(\\n                //             abi.encodePacked(\\n                //                 \\\"pool.calc_token_amount \\\",\\n                //                 \\\" _amount \\\",\\n                //                 uint2str(_amount)\\n                //             )\\n                //         )\\n                //     );\\n                // }\\n\\n                uint256 lpTok = pool.calc_token_amount(amounts, false);\\n                // _one_coin \\u0434\\u043b\\u044f \\u0432\\u043e\\u0437\\u0432\\u0440\\u0430\\u0442\\u0430 \\u043a\\u043e\\u043d\\u043a\\u0440\\u0435\\u0442\\u043d\\u043e\\u0439 \\u043c\\u043e\\u043d\\u0435\\u0442\\u044b (_assest)\\n                uint256 withdrAmount = pool.calc_withdraw_one_coin(lpTok, int128(uint128(i)));\\n                require(\\n                    withdrAmount <= onConnectorLpTokenAmount,\\n                    string(\\n                        abi.encodePacked(\\n                            \\\"Not enought lpToken own \\\",\\n                            \\\" _amount \\\",\\n                            uint2str(_amount),\\n                            \\\" lpTok \\\",\\n                            uint2str(lpTok),\\n                            \\\" onConnectorLpTokenAmount \\\",\\n                            uint2str(onConnectorLpTokenAmount),\\n                            \\\" withdrAmount \\\",\\n                            uint2str(withdrAmount)\\n                            // ,\\n                            // \\\" lpToken \\\",\\n                            // toAsciiString(pool.lp_token())\\n                        )\\n                    )\\n                );\\n\\n                iCurveToken(pool.lp_token()).approve(address(pool), lpTok);\\n\\n                //TODO: use withdrAmount?\\n                uint256 retAmount = pool.remove_liquidity_one_coin(lpTok, int128(uint128(i)), 0);\\n\\n                IERC20(_asset).transfer(_beneficiar, retAmount);\\n                iCurveToken(pool.lp_token()).transfer(\\n                    _beneficiar,\\n                    iCurveToken(pool.lp_token()).balanceOf(address(this))\\n                );\\n                return retAmount; // amounts[i];\\n            } else {\\n                amounts[i] = 0;\\n            }\\n        }\\n        revert(\\\"can't find active for withdraw from pool\\\");\\n    }\\n\\n    //TODO: remove\\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = _i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            bstr[k] = bytes1(uint8(48 + (_i % 10)));\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    // //TODO: remove\\n    // function toAsciiString(address x) internal pure returns (string memory) {\\n    //     bytes memory s = new bytes(40);\\n    //     for (uint i = 0; i < 20; i++) {\\n    //         bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8 * (19 - i)))));\\n    //         bytes1 hi = bytes1(uint8(b) / 16);\\n    //         bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n    //         s[2 * i] = char(hi);\\n    //         s[2 * i + 1] = char(lo);\\n    //     }\\n    //     return string(s);\\n    // }\\n\\n    // //TODO: remove\\n    // function char(bytes1 b) internal pure returns (bytes1 c) {\\n    //     if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n    //     else return bytes1(uint8(b) + 0x57);\\n    // }\\n}\\n\",\"keccak256\":\"0xd4e4bdb604246d3199958203878a0294deee5e409ed8ad77898ae2555e8e7d58\"},\"contracts/connectors/curve/interfaces/iCurvePool.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n/// @title Connector to curve->aave \\n/// @notice from https://github.com/curvefi/curve-contract-polygon/blob/master/contracts/pools/aave/StableSwapAave.vy\\n/// @dev check number of coins in pool and add functions  with nesessary  uint256[N_COINS]\\n\\ninterface iCurvePool {\\n\\n// def add_liquidity(_amounts: uint256[N_COINS], _min_mint_amount: uint256, _use_underlying: bool = False) -> uint256:\\nfunction add_liquidity (uint[3] memory _amounts, uint256 _min_mint_amount, bool _use_underlying) external returns (uint256); //check uint[3] memory or calldata\\n\\n /** def remove_liquidity(\\n    _amount: uint256,\\n    _min_amounts: uint256[N_COINS],\\n    _use_underlying: bool = False,\\n) -> uint256[N_COINS]:\\n */\\nfunction remove_liquidity (uint256 _amounts, uint[3] memory _min_amounts, bool _use_underlying) external returns (uint256[3] memory ); //check uint[3] memory or calldata\\nfunction underlying_coins (uint i ) external view returns (address);\\nfunction lp_token () external view returns (address);\\nfunction calc_token_amount(uint[3] memory _amounts, bool _is_deposite) external view  returns (uint256);\\nfunction coins(uint256 i) external view returns (address);\\nfunction get_virtual_price() external view returns (uint256);\\n// StableSwap.get_dy(i: int128, j: int128, _dx: uint256) \\u2192 uint256: view\\nfunction get_dy(int128 i, int128 j, uint256 _dx ) external view returns (uint256);\\nfunction calc_withdraw_one_coin(uint256 _amount, int128 i) external view returns (uint256);\\n//remove_liquidity_one_coin(_token_amount: uint256, i: int128, _min_amount: uint256) \\u2192 uint256\\nfunction remove_liquidity_one_coin(uint256 _token_amount , int128 i, uint256 _min_amount) external returns  (uint256);\\n// StableSwap.remove_liquidity_imbalance(_amounts: uint256[N_COINS], _max_burn_amount: uint256) \\u2192 uint256\\nfunction remove_liquidity_imbalance(uint[3] memory _amounts, uint256 _maxAmount ) external returns (uint256);\\n}\",\"keccak256\":\"0x3acb077e6be9787db66bcc16a0fd6315a81c940302e5f2b27858625b547e0bc8\"},\"contracts/connectors/curve/interfaces/iCurveToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface iCurveToken is IERC20 {\\n    function mint(address _sender, uint256 amount) external;\\n\\n    function burnFrom(address _sender, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xec285140f0a15606303b5f2464a6d4a8c793a238c032d47a87a265679b57afaf\",\"license\":\"MIT\"},\"contracts/interfaces/IConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/// @title Common inrterface to DeFi protocol connectors\\n/// @author @Stanta\\n/// @notice Every connector have to implement this function\\n/// @dev Choosing of connector releasing by changing address of connector's contract\\ninterface IConnector {\\n    function stake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiar\\n    ) external;\\n\\n    function unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _to\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xf418605c420c689e5cdd7cf9a49d8906f8c5631a629a5d6eea6d9f2eba79fdb8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b6100c9565b6001600160a01b0381166100795760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604482015260640160405180910390fd5b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611532806100d86000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063715018a611610066578063715018a6146101195780638da5cb5b14610121578063926e31d614610132578063dff8720314610153578063f2fde38b1461016657600080fd5b806316f0115b14610098578063294091cd146100c85780632dc10a54146100dd5780634437152a14610106575b600080fd5b6002546100ab906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100db6100d6366004611109565b610179565b005b6100ab6100eb36600461116d565b6001602052600090815260409020546001600160a01b031681565b6100db6101143660046110cf565b610589565b6100db61062d565b6000546001600160a01b03166100ab565b610145610140366004611109565b610663565b6040519081526020016100bf565b6100db610161366004611186565b610e7f565b6100db6101743660046110cf565b610efd565b6101816110b1565b60005b600381101561052d5760025460405163c661065760e01b8152600481018390526000916001600160a01b03169063c66106579060240160206040518083038186803b1580156101d257600080fd5b505afa1580156101e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020a91906110ec565b9050856001600160a01b0316816001600160a01b031614156105015760025460405163095ea7b360e01b81526001600160a01b039182166004820152602481018790529087169063095ea7b390604401602060405180830381600087803b15801561027457600080fd5b505af1158015610288573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ac919061114b565b50848383600381106102c0576102c06114bb565b6020020152600254604051633883e11960e01b81526000916001600160a01b031690633883e119906102f99087906001906004016112e4565b60206040518083038186803b15801561031157600080fd5b505afa158015610325573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034991906111b6565b6002549091506000906001600160a01b0316632b6e993a86606461036e8660636113fe565b61037891906113ea565b60006040518463ffffffff1660e01b815260040161039893929190611301565b602060405180830381600087803b1580156103b257600080fd5b505af11580156103c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ea91906111b6565b9050600260009054906101000a90046001600160a01b03166001600160a01b03166382c630666040518163ffffffff1660e01b815260040160206040518083038186803b15801561043a57600080fd5b505afa15801561044e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047291906110ec565b60405163a9059cbb60e01b81526001600160a01b03888116600483015260248201849052919091169063a9059cbb90604401602060405180830381600087803b1580156104be57600080fd5b505af11580156104d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f6919061114b565b505050505050505050565b6000838360038110610515576105156114bb565b6020020152508061052581611460565b915050610184565b5060405162461bcd60e51b815260206004820152602560248201527f63616e27742066696e642061637469766520666f72207374616b696e6720696e604482015264081c1bdbdb60da1b60648201526084015b60405180910390fd5b6000546001600160a01b031633146105b35760405162461bcd60e51b815260040161058090611358565b6001600160a01b0381166105d95760405162461bcd60e51b81526004016105809061139b565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527fd50df7b632d9dd4177a35984990e76264db301d1fe81eaefb3713e915aab8fd89060200160405180910390a150565b6000546001600160a01b031633146106575760405162461bcd60e51b815260040161058090611358565b6106616000610f33565b565b600061066d6110b1565b60005b6003811015610e1e5760025460405163c661065760e01b8152600481018390526000916001600160a01b03169063c66106579060240160206040518083038186803b1580156106be57600080fd5b505afa1580156106d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f691906110ec565b9050866001600160a01b0316816001600160a01b03161415610df25785838360038110610725576107256114bb565b6020020181815250506000600260009054906101000a90046001600160a01b03166001600160a01b03166382c630666040518163ffffffff1660e01b815260040160206040518083038186803b15801561077e57600080fd5b505afa158015610792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b691906110ec565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b1580156107f757600080fd5b505afa15801561080b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082f91906111b6565b600254604051633883e11960e01b81529192506000916001600160a01b0390911690633883e1199061086790889085906004016112e4565b60206040518083038186803b15801561087f57600080fd5b505afa158015610893573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b791906111b6565b60025460405163cc2b27d760e01b815260048101839052600f87900b60248201529192506000916001600160a01b039091169063cc2b27d79060440160206040518083038186803b15801561090b57600080fd5b505afa15801561091f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094391906111b6565b9050828111156109528a610fa9565b61095b84610fa9565b61096486610fa9565b61096d85610fa9565b60405160200161098094939291906111f8565b604051602081830303815290604052906109ad5760405162461bcd60e51b81526004016105809190611325565b50600260009054906101000a90046001600160a01b03166001600160a01b03166382c630666040518163ffffffff1660e01b815260040160206040518083038186803b1580156109fc57600080fd5b505afa158015610a10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3491906110ec565b60025460405163095ea7b360e01b81526001600160a01b0391821660048201526024810185905291169063095ea7b390604401602060405180830381600087803b158015610a8157600080fd5b505af1158015610a95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab9919061114b565b50600254604051630d2680e960e11b815260048101849052600f87900b6024820152600060448201819052916001600160a01b031690631a4d01d290606401602060405180830381600087803b158015610b1257600080fd5b505af1158015610b26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4a91906111b6565b60405163a9059cbb60e01b81526001600160a01b038b8116600483015260248201839052919250908c169063a9059cbb90604401602060405180830381600087803b158015610b9857600080fd5b505af1158015610bac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd0919061114b565b50600260009054906101000a90046001600160a01b03166001600160a01b03166382c630666040518163ffffffff1660e01b815260040160206040518083038186803b158015610c1f57600080fd5b505afa158015610c33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5791906110ec565b6001600160a01b031663a9059cbb8a600260009054906101000a90046001600160a01b03166001600160a01b03166382c630666040518163ffffffff1660e01b815260040160206040518083038186803b158015610cb457600080fd5b505afa158015610cc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cec91906110ec565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b158015610d2d57600080fd5b505afa158015610d41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6591906111b6565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015610dab57600080fd5b505af1158015610dbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de3919061114b565b509650610e7895505050505050565b6000838360038110610e0657610e066114bb565b60200201525080610e1681611460565b915050610670565b5060405162461bcd60e51b815260206004820152602860248201527f63616e27742066696e642061637469766520666f7220776974686472617720666044820152671c9bdb481c1bdbdb60c21b6064820152608401610580565b9392505050565b6000546001600160a01b03163314610ea95760405162461bcd60e51b815260040161058090611358565b6001600160a01b038116610ecf5760405162461bcd60e51b81526004016105809061139b565b60009182526001602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6000546001600160a01b03163314610f275760405162461bcd60e51b815260040161058090611358565b610f3081610f33565b50565b6001600160a01b038116610f595760405162461bcd60e51b81526004016105809061139b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606081610fcd5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610ff75780610fe181611460565b9150610ff09050600a836113ea565b9150610fd1565b60008167ffffffffffffffff811115611012576110126114d1565b6040519080825280601f01601f19166020018201604052801561103c576020820181803683370190505b509050815b85156110a85761105260018261141d565b905061105f600a8761147b565b61106a9060306113d2565b60f81b82828151811061107f5761107f6114bb565b60200101906001600160f81b031916908160001a9053506110a1600a876113ea565b9550611041565b50949350505050565b60405180606001604052806003906020820280368337509192915050565b6000602082840312156110e157600080fd5b8135610e78816114e7565b6000602082840312156110fe57600080fd5b8151610e78816114e7565b60008060006060848603121561111e57600080fd5b8335611129816114e7565b9250602084013591506040840135611140816114e7565b809150509250925092565b60006020828403121561115d57600080fd5b81518015158114610e7857600080fd5b60006020828403121561117f57600080fd5b5035919050565b6000806040838503121561119957600080fd5b8235915060208301356111ab816114e7565b809150509250929050565b6000602082840312156111c857600080fd5b5051919050565b8060005b60038110156111f25781518452602093840193909101906001016111d3565b50505050565b7f4e6f7420656e6f75676874206c70546f6b656e206f776e2000000000000000008152680102fb0b6b7bab73a160bd1b601882015260008551611242816021850160208a01611434565b6601036382a37b5960cd1b6021918401918201528551611269816028840160208a01611434565b7f206f6e436f6e6e6563746f724c70546f6b656e416d6f756e74200000000000006028929091019182015284516112a7816042840160208901611434565b6d0103bb4ba34323920b6b7bab73a160951b6042929091019182015283516112d6816050840160208801611434565b016050019695505050505050565b608081016112f282856111cf565b82151560608301529392505050565b60a0810161130f82866111cf565b8360608301528215156080830152949350505050565b6020815260008251806020840152611344816040850160208701611434565b601f01601f19169190910160400192915050565b60208082526023908201527f4f776e61626c654578743a2063616c6c6572206973206e6f7420746865206f776040820152623732b960e91b606082015260800190565b60208082526018908201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604082015260600190565b600082198211156113e5576113e561148f565b500190565b6000826113f9576113f96114a5565b500490565b60008160001904831182151516156114185761141861148f565b500290565b60008282101561142f5761142f61148f565b500390565b60005b8381101561144f578181015183820152602001611437565b838111156111f25750506000910152565b60006000198214156114745761147461148f565b5060010190565b60008261148a5761148a6114a5565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610f3057600080fdfea264697066735822122002ae23a87c979af77c2130a12b3b972c418e19779175b4559f38e8bcfabf6ccd64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063715018a611610066578063715018a6146101195780638da5cb5b14610121578063926e31d614610132578063dff8720314610153578063f2fde38b1461016657600080fd5b806316f0115b14610098578063294091cd146100c85780632dc10a54146100dd5780634437152a14610106575b600080fd5b6002546100ab906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100db6100d6366004611109565b610179565b005b6100ab6100eb36600461116d565b6001602052600090815260409020546001600160a01b031681565b6100db6101143660046110cf565b610589565b6100db61062d565b6000546001600160a01b03166100ab565b610145610140366004611109565b610663565b6040519081526020016100bf565b6100db610161366004611186565b610e7f565b6100db6101743660046110cf565b610efd565b6101816110b1565b60005b600381101561052d5760025460405163c661065760e01b8152600481018390526000916001600160a01b03169063c66106579060240160206040518083038186803b1580156101d257600080fd5b505afa1580156101e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020a91906110ec565b9050856001600160a01b0316816001600160a01b031614156105015760025460405163095ea7b360e01b81526001600160a01b039182166004820152602481018790529087169063095ea7b390604401602060405180830381600087803b15801561027457600080fd5b505af1158015610288573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ac919061114b565b50848383600381106102c0576102c06114bb565b6020020152600254604051633883e11960e01b81526000916001600160a01b031690633883e119906102f99087906001906004016112e4565b60206040518083038186803b15801561031157600080fd5b505afa158015610325573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034991906111b6565b6002549091506000906001600160a01b0316632b6e993a86606461036e8660636113fe565b61037891906113ea565b60006040518463ffffffff1660e01b815260040161039893929190611301565b602060405180830381600087803b1580156103b257600080fd5b505af11580156103c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ea91906111b6565b9050600260009054906101000a90046001600160a01b03166001600160a01b03166382c630666040518163ffffffff1660e01b815260040160206040518083038186803b15801561043a57600080fd5b505afa15801561044e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047291906110ec565b60405163a9059cbb60e01b81526001600160a01b03888116600483015260248201849052919091169063a9059cbb90604401602060405180830381600087803b1580156104be57600080fd5b505af11580156104d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f6919061114b565b505050505050505050565b6000838360038110610515576105156114bb565b6020020152508061052581611460565b915050610184565b5060405162461bcd60e51b815260206004820152602560248201527f63616e27742066696e642061637469766520666f72207374616b696e6720696e604482015264081c1bdbdb60da1b60648201526084015b60405180910390fd5b6000546001600160a01b031633146105b35760405162461bcd60e51b815260040161058090611358565b6001600160a01b0381166105d95760405162461bcd60e51b81526004016105809061139b565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527fd50df7b632d9dd4177a35984990e76264db301d1fe81eaefb3713e915aab8fd89060200160405180910390a150565b6000546001600160a01b031633146106575760405162461bcd60e51b815260040161058090611358565b6106616000610f33565b565b600061066d6110b1565b60005b6003811015610e1e5760025460405163c661065760e01b8152600481018390526000916001600160a01b03169063c66106579060240160206040518083038186803b1580156106be57600080fd5b505afa1580156106d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f691906110ec565b9050866001600160a01b0316816001600160a01b03161415610df25785838360038110610725576107256114bb565b6020020181815250506000600260009054906101000a90046001600160a01b03166001600160a01b03166382c630666040518163ffffffff1660e01b815260040160206040518083038186803b15801561077e57600080fd5b505afa158015610792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b691906110ec565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b1580156107f757600080fd5b505afa15801561080b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082f91906111b6565b600254604051633883e11960e01b81529192506000916001600160a01b0390911690633883e1199061086790889085906004016112e4565b60206040518083038186803b15801561087f57600080fd5b505afa158015610893573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b791906111b6565b60025460405163cc2b27d760e01b815260048101839052600f87900b60248201529192506000916001600160a01b039091169063cc2b27d79060440160206040518083038186803b15801561090b57600080fd5b505afa15801561091f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094391906111b6565b9050828111156109528a610fa9565b61095b84610fa9565b61096486610fa9565b61096d85610fa9565b60405160200161098094939291906111f8565b604051602081830303815290604052906109ad5760405162461bcd60e51b81526004016105809190611325565b50600260009054906101000a90046001600160a01b03166001600160a01b03166382c630666040518163ffffffff1660e01b815260040160206040518083038186803b1580156109fc57600080fd5b505afa158015610a10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3491906110ec565b60025460405163095ea7b360e01b81526001600160a01b0391821660048201526024810185905291169063095ea7b390604401602060405180830381600087803b158015610a8157600080fd5b505af1158015610a95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab9919061114b565b50600254604051630d2680e960e11b815260048101849052600f87900b6024820152600060448201819052916001600160a01b031690631a4d01d290606401602060405180830381600087803b158015610b1257600080fd5b505af1158015610b26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4a91906111b6565b60405163a9059cbb60e01b81526001600160a01b038b8116600483015260248201839052919250908c169063a9059cbb90604401602060405180830381600087803b158015610b9857600080fd5b505af1158015610bac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd0919061114b565b50600260009054906101000a90046001600160a01b03166001600160a01b03166382c630666040518163ffffffff1660e01b815260040160206040518083038186803b158015610c1f57600080fd5b505afa158015610c33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5791906110ec565b6001600160a01b031663a9059cbb8a600260009054906101000a90046001600160a01b03166001600160a01b03166382c630666040518163ffffffff1660e01b815260040160206040518083038186803b158015610cb457600080fd5b505afa158015610cc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cec91906110ec565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b158015610d2d57600080fd5b505afa158015610d41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6591906111b6565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015610dab57600080fd5b505af1158015610dbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de3919061114b565b509650610e7895505050505050565b6000838360038110610e0657610e066114bb565b60200201525080610e1681611460565b915050610670565b5060405162461bcd60e51b815260206004820152602860248201527f63616e27742066696e642061637469766520666f7220776974686472617720666044820152671c9bdb481c1bdbdb60c21b6064820152608401610580565b9392505050565b6000546001600160a01b03163314610ea95760405162461bcd60e51b815260040161058090611358565b6001600160a01b038116610ecf5760405162461bcd60e51b81526004016105809061139b565b60009182526001602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6000546001600160a01b03163314610f275760405162461bcd60e51b815260040161058090611358565b610f3081610f33565b50565b6001600160a01b038116610f595760405162461bcd60e51b81526004016105809061139b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606081610fcd5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610ff75780610fe181611460565b9150610ff09050600a836113ea565b9150610fd1565b60008167ffffffffffffffff811115611012576110126114d1565b6040519080825280601f01601f19166020018201604052801561103c576020820181803683370190505b509050815b85156110a85761105260018261141d565b905061105f600a8761147b565b61106a9060306113d2565b60f81b82828151811061107f5761107f6114bb565b60200101906001600160f81b031916908160001a9053506110a1600a876113ea565b9550611041565b50949350505050565b60405180606001604052806003906020820280368337509192915050565b6000602082840312156110e157600080fd5b8135610e78816114e7565b6000602082840312156110fe57600080fd5b8151610e78816114e7565b60008060006060848603121561111e57600080fd5b8335611129816114e7565b9250602084013591506040840135611140816114e7565b809150509250925092565b60006020828403121561115d57600080fd5b81518015158114610e7857600080fd5b60006020828403121561117f57600080fd5b5035919050565b6000806040838503121561119957600080fd5b8235915060208301356111ab816114e7565b809150509250929050565b6000602082840312156111c857600080fd5b5051919050565b8060005b60038110156111f25781518452602093840193909101906001016111d3565b50505050565b7f4e6f7420656e6f75676874206c70546f6b656e206f776e2000000000000000008152680102fb0b6b7bab73a160bd1b601882015260008551611242816021850160208a01611434565b6601036382a37b5960cd1b6021918401918201528551611269816028840160208a01611434565b7f206f6e436f6e6e6563746f724c70546f6b656e416d6f756e74200000000000006028929091019182015284516112a7816042840160208901611434565b6d0103bb4ba34323920b6b7bab73a160951b6042929091019182015283516112d6816050840160208801611434565b016050019695505050505050565b608081016112f282856111cf565b82151560608301529392505050565b60a0810161130f82866111cf565b8360608301528215156080830152949350505050565b6020815260008251806020840152611344816040850160208701611434565b601f01601f19169190910160400192915050565b60208082526023908201527f4f776e61626c654578743a2063616c6c6572206973206e6f7420746865206f776040820152623732b960e91b606082015260800190565b60208082526018908201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604082015260600190565b600082198211156113e5576113e561148f565b500190565b6000826113f9576113f96114a5565b500490565b60008160001904831182151516156114185761141861148f565b500290565b60008282101561142f5761142f61148f565b500390565b60005b8381101561144f578181015183820152602001611437565b838111156111f25750506000910152565b60006000198214156114745761147461148f565b5060010190565b60008261148a5761148a6114a5565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610f3057600080fdfea264697066735822122002ae23a87c979af77c2130a12b3b972c418e19779175b4559f38e8bcfabf6ccd64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4391,
        "contract": "contracts/connectors/ConnectorCurve.sol:ConnectorCurve",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4395,
        "contract": "contracts/connectors/ConnectorCurve.sol:ConnectorCurve",
        "label": "rolemap",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 7686,
        "contract": "contracts/connectors/ConnectorCurve.sol:ConnectorCurve",
        "label": "pool",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(iCurvePool)9306"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(iCurvePool)9306": {
        "encoding": "inplace",
        "label": "contract iCurvePool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}