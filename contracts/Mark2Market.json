{
  "address": "0xbB57FE325e769DEDB1236525a91cDEd842143fA7",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "ConsoleLog",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "assetPrices",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amountInVault",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "usdcPriceInVault",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "diffToTarget",
                  "type": "uint256"
                },
                {
                  "internalType": "int8",
                  "name": "diffToTargetSign",
                  "type": "int8"
                },
                {
                  "internalType": "bool",
                  "name": "targetIsZero",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "usdcPriceDenominator",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "usdcSellPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "usdcBuyPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct IMark2Market.AssetPrices[]",
              "name": "assetPrices",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "totalUsdcPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMark2Market.TotalAssetPrices",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetPricesForBalance",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amountInVault",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "usdcPriceInVault",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "diffToTarget",
                  "type": "uint256"
                },
                {
                  "internalType": "int8",
                  "name": "diffToTargetSign",
                  "type": "int8"
                },
                {
                  "internalType": "bool",
                  "name": "targetIsZero",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "usdcPriceDenominator",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "usdcSellPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "usdcBuyPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct IMark2Market.AssetPrices[]",
              "name": "assetPrices",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "totalUsdcPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMark2Market.TotalAssetPrices",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "withdrawToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "assetPricesForBalance",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amountInVault",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "usdcPriceInVault",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "diffToTarget",
                  "type": "uint256"
                },
                {
                  "internalType": "int8",
                  "name": "diffToTargetSign",
                  "type": "int8"
                },
                {
                  "internalType": "bool",
                  "name": "targetIsZero",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "usdcPriceDenominator",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "usdcSellPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "usdcBuyPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct IMark2Market.AssetPrices[]",
              "name": "assetPrices",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "totalUsdcPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMark2Market.TotalAssetPrices",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_investmentPortfolio",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investmentPortfolio",
      "outputs": [
        {
          "internalType": "contract InvestmentPortfolio",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "rolemap",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_actor",
          "type": "address"
        }
      ],
      "name": "setRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract Vault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5f158a34691a7211b2fef54903d7fea14289bbaa2ce1778c4ef69b35090f6418",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xbB57FE325e769DEDB1236525a91cDEd842143fA7",
    "transactionIndex": 0,
    "gasUsed": "1945700",
    "logsBloom": "0x
    "blockHash": "0x9c7740fe5d95ea35014a0fc64bd05da7beed844f499f4e45f8fdcff97fd69efb",
    "transactionHash": "0x5f158a34691a7211b2fef54903d7fea14289bbaa2ce1778c4ef69b35090f6418",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 21675004,
        "transactionHash": "0x5f158a34691a7211b2fef54903d7fea14289bbaa2ce1778c4ef69b35090f6418",
        "address": "0xbB57FE325e769DEDB1236525a91cDEd842143fA7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9c7740fe5d95ea35014a0fc64bd05da7beed844f499f4e45f8fdcff97fd69efb"
      }
    ],
    "blockNumber": 21675004,
    "cumulativeGasUsed": "1945700",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "4b2c02ad00a20f5dc92f2cdd9d4eb77f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"ConsoleLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"assetPrices\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInVault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcPriceInVault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"diffToTarget\",\"type\":\"uint256\"},{\"internalType\":\"int8\",\"name\":\"diffToTargetSign\",\"type\":\"int8\"},{\"internalType\":\"bool\",\"name\":\"targetIsZero\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"usdcPriceDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcSellPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcBuyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct IMark2Market.AssetPrices[]\",\"name\":\"assetPrices\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"totalUsdcPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IMark2Market.TotalAssetPrices\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetPricesForBalance\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInVault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcPriceInVault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"diffToTarget\",\"type\":\"uint256\"},{\"internalType\":\"int8\",\"name\":\"diffToTargetSign\",\"type\":\"int8\"},{\"internalType\":\"bool\",\"name\":\"targetIsZero\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"usdcPriceDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcSellPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcBuyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct IMark2Market.AssetPrices[]\",\"name\":\"assetPrices\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"totalUsdcPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IMark2Market.TotalAssetPrices\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"withdrawToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"assetPricesForBalance\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInVault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcPriceInVault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"diffToTarget\",\"type\":\"uint256\"},{\"internalType\":\"int8\",\"name\":\"diffToTargetSign\",\"type\":\"int8\"},{\"internalType\":\"bool\",\"name\":\"targetIsZero\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"usdcPriceDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcSellPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcBuyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct IMark2Market.AssetPrices[]\",\"name\":\"assetPrices\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"totalUsdcPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IMark2Market.TotalAssetPrices\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_investmentPortfolio\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investmentPortfolio\",\"outputs\":[{\"internalType\":\"contract InvestmentPortfolio\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"rolemap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_actor\",\"type\":\"address\"}],\"name\":\"setRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"assetPricesForBalance(address,uint256)\":{\"params\":{\"withdrawAmount\":\"Not normilized amount to withdraw\",\"withdrawToken\":\"Token to withdraw\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Mark2Market.sol\":\"Mark2Market\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x084f583de2c714665b0304529fe8b826a2809f29d03314e4dd9eea926e4bb0f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/Mark2Market.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0 <0.9.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./interfaces/IMark2Market.sol\\\";\\nimport \\\"./interfaces/IPriceGetter.sol\\\";\\nimport \\\"./OwnableExt.sol\\\";\\nimport \\\"./registries/InvestmentPortfolio.sol\\\";\\nimport \\\"./Vault.sol\\\";\\n\\n//TODO: use AccessControl or Ownable from zeppelin\\ncontract Mark2Market is IMark2Market, OwnableExt {\\n    Vault public vault;\\n    InvestmentPortfolio public investmentPortfolio;\\n\\n    //TODO: remove\\n    event ConsoleLog(string str);\\n\\n    function init(address _vault, address _investmentPortfolio) public onlyOwner {\\n        require(_vault != address(0), \\\"Zero address not allowed\\\");\\n        require(_investmentPortfolio != address(0), \\\"Zero address not allowed\\\");\\n        vault = Vault(_vault);\\n        investmentPortfolio = InvestmentPortfolio(_investmentPortfolio);\\n    }\\n\\n    function assetPrices() public view override returns (TotalAssetPrices memory) {\\n        InvestmentPortfolio.AssetInfo[] memory assetInfos = investmentPortfolio.getAllAssetInfos();\\n\\n        uint256 totalUsdcPrice = 0;\\n        uint256 count = assetInfos.length;\\n        AssetPrices[] memory assetPrices = new AssetPrices[](count);\\n        for (uint8 i = 0; i < count; i++) {\\n            InvestmentPortfolio.AssetInfo memory assetInfo = assetInfos[i];\\n            uint256 amountInVault = IERC20(assetInfo.asset).balanceOf(address(vault));\\n            // normilize amountInVault to 18 decimals\\n            //TODO: denominator usage\\n            uint256 amountDenominator = 10**(18 - IERC20Metadata(assetInfo.asset).decimals());\\n            amountInVault = amountInVault * amountDenominator;\\n\\n            IPriceGetter priceGetter = IPriceGetter(assetInfo.priceGetter);\\n\\n            uint256 usdcPriceDenominator = priceGetter.denominator();\\n            uint256 usdcSellPrice = priceGetter.getUsdcSellPrice();\\n            uint256 usdcBuyPrice = priceGetter.getUsdcBuyPrice();\\n\\n            // in decimals: 18 + 18 - 18 => 18\\n            uint256 usdcPriceInVault = (amountInVault * usdcSellPrice) / usdcPriceDenominator;\\n\\n            totalUsdcPrice += usdcPriceInVault;\\n\\n            assetPrices[i] = AssetPrices(\\n                assetInfo.asset,\\n                amountInVault,\\n                usdcPriceInVault,\\n                0,\\n                int8(0),\\n                false,\\n                usdcPriceDenominator,\\n                usdcSellPrice,\\n                usdcBuyPrice,\\n                IERC20Metadata(assetInfo.asset).decimals(),\\n                IERC20Metadata(assetInfo.asset).name(),\\n                IERC20Metadata(assetInfo.asset).symbol()\\n            );\\n        }\\n\\n        TotalAssetPrices memory totalPrices = TotalAssetPrices(assetPrices, totalUsdcPrice);\\n\\n        return totalPrices;\\n    }\\n\\n    function assetPricesForBalance() external override returns (TotalAssetPrices memory) {\\n        return assetPricesForBalance(address(0), 0);\\n    }\\n\\n    /**\\n     * @param withdrawToken Token to withdraw\\n     * @param withdrawAmount Not normilized amount to withdraw\\n     */\\n    function assetPricesForBalance(address withdrawToken, uint256 withdrawAmount)\\n        public\\n        override\\n        returns (TotalAssetPrices memory)\\n    {\\n        if (withdrawToken != address(0)) {\\n            // normilize withdrawAmount to 18 decimals\\n            //TODO: denominator usage\\n            uint256 withdrawAmountDenominator = 10**(18 - IERC20Metadata(withdrawToken).decimals());\\n            withdrawAmount = withdrawAmount * withdrawAmountDenominator;\\n        }\\n        // //TODO: remove\\n        // log(\\\"withdrawAmount: \\\", withdrawAmount);\\n\\n        InvestmentPortfolio.AssetWeight[] memory assetWeights = investmentPortfolio\\n            .getAllAssetWeights();\\n\\n        // //TODO: remove\\n        // log(\\\"assetWeights.length: \\\", assetWeights.length);\\n\\n        uint256 totalUsdcPrice = 0;\\n        uint256 count = assetWeights.length;\\n        AssetPrices[] memory assetPrices = new AssetPrices[](count);\\n        for (uint8 i = 0; i < count; i++) {\\n            InvestmentPortfolio.AssetWeight memory assetWeight = assetWeights[i];\\n\\n            uint256 amountInVault = IERC20(assetWeight.asset).balanceOf(address(vault));\\n            // normilize amountInVault to 18 decimals\\n            //TODO: denominator usage\\n            uint256 amountDenominator = 10**(18 - IERC20Metadata(assetWeight.asset).decimals());\\n            amountInVault = amountInVault * amountDenominator;\\n            // //TODO: remove\\n            // log(\\\"amountInVault: \\\", amountInVault);\\n\\n            InvestmentPortfolio.AssetInfo memory assetInfo = investmentPortfolio.getAssetInfo(\\n                assetWeight.asset\\n            );\\n            IPriceGetter priceGetter = IPriceGetter(assetInfo.priceGetter);\\n\\n            uint256 usdcPriceDenominator = priceGetter.denominator();\\n            uint256 usdcSellPrice = priceGetter.getUsdcSellPrice();\\n            uint256 usdcBuyPrice = priceGetter.getUsdcBuyPrice();\\n\\n            // in decimals: 18 + 18 - 18 => 18\\n            uint256 usdcPriceInVault = (amountInVault * usdcSellPrice) / usdcPriceDenominator;\\n\\n            totalUsdcPrice += usdcPriceInVault;\\n\\n            assetPrices[i] = AssetPrices(\\n                assetWeight.asset,\\n                amountInVault,\\n                usdcPriceInVault,\\n                0,\\n                int8(0),\\n                false,\\n                usdcPriceDenominator,\\n                usdcSellPrice,\\n                usdcBuyPrice,\\n                IERC20Metadata(assetWeight.asset).decimals(),\\n                IERC20Metadata(assetWeight.asset).name(),\\n                IERC20Metadata(assetWeight.asset).symbol()\\n            );\\n        }\\n\\n        // 3. validate withdrawAmount\\n        require(\\n            totalUsdcPrice >= withdrawAmount,\\n            string(\\n                abi.encodePacked(\\n                    \\\"Withdraw more than total: \\\",\\n                    uint2str(withdrawAmount),\\n                    \\\" > \\\",\\n                    uint2str(totalUsdcPrice)\\n                )\\n            )\\n        );\\n\\n        // 4. correct total with withdrawAmount\\n        // //TODO: remove\\n        // log(\\\"totalUsdcPrice before correction: \\\", totalUsdcPrice);\\n\\n        totalUsdcPrice = totalUsdcPrice - withdrawAmount;\\n        log(\\\"totalUsdcPrice after correction: \\\", totalUsdcPrice);\\n\\n        for (uint8 i = 0; i < count; i++) {\\n            AssetPrices memory assetPrice = assetPrices[i];\\n            (\\n                assetPrice.diffToTarget,\\n                assetPrice.diffToTargetSign,\\n                assetPrice.targetIsZero\\n            ) = diffToTarget(totalUsdcPrice, assetPrice.asset);\\n\\n            // emit ConsoleLog(\\n            //     string(\\n            //         abi.encodePacked(\\n            //             uint2str(i),\\n            //             \\\" | \\\",\\n            //             IERC20Metadata(assetPrice.asset).symbol(),\\n            //             \\\" | \\\",\\n            //             uint2str(assetPrice.amountInVault),\\n            //             \\\" | \\\",\\n            //             uint2str(assetPrice.usdcPriceInVault),\\n            //             \\\" | \\\",\\n            //             uint2str(assetPrice.diffToTarget),\\n            //             \\\" | \\\",\\n            //             uint2str(assetPrice.usdcSellPrice),\\n            //             \\\" | \\\",\\n            //             uint2str(assetPrice.usdcBuyPrice)\\n            //         )\\n            //     )\\n            // );\\n\\n            // update diff for withdrawn token\\n            if (withdrawAmount > 0 && assetPrice.asset == withdrawToken) {\\n                if (assetPrice.diffToTargetSign < 0) {\\n                    if (assetPrice.diffToTarget > withdrawAmount) {\\n                        assetPrice.diffToTarget = assetPrice.diffToTarget - withdrawAmount;\\n                    } else {\\n                        assetPrice.diffToTarget = withdrawAmount - assetPrice.diffToTarget;\\n                        assetPrice.diffToTargetSign = int8(1);\\n                    }\\n                } else {\\n                    assetPrice.diffToTarget = assetPrice.diffToTarget + withdrawAmount;\\n                }\\n            }\\n\\n            // emit ConsoleLog(\\n            //     string(\\n            //         abi.encodePacked(\\n            //             // uint2str(i),\\n            //             // \\\" | \\\",\\n            //             IERC20Metadata(assetPrice.asset).symbol(),\\n            //             \\\" | \\\",\\n            //             uint2str(assetPrice.amountInVault),\\n            //             // \\\" | \\\",\\n            //             // uint2str(assetPrice.usdcPriceInVault),\\n            //             \\\" | \\\",\\n            //             uint2str(assetPrice.diffToTarget),\\n            //             \\\" | \\\",\\n            //             uint2str(assetPrice.usdcSellPrice),\\n            //             \\\" | \\\",\\n            //             uint2str(assetPrice.usdcBuyPrice)\\n            //         )\\n            //     )\\n            // );\\n        }\\n\\n        TotalAssetPrices memory totalPrices = TotalAssetPrices(assetPrices, totalUsdcPrice);\\n\\n        return totalPrices;\\n    }\\n\\n    /**\\n     * @param totalUsdcPrice - Total normilized to 10**18\\n     * @param asset - Token address to calc\\n     * @return normilized to 10**18 diff amount, sign and mark that mean that need sell all\\n     */\\n    function diffToTarget(uint256 totalUsdcPrice, address asset)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            int8,\\n            bool\\n        )\\n    {\\n        InvestmentPortfolio.AssetWeight memory assetWeight = investmentPortfolio.getAssetWeight(\\n            asset\\n        );\\n\\n        uint256 targetUsdcAmount = (totalUsdcPrice * assetWeight.targetWeight) /\\n            investmentPortfolio.TOTAL_WEIGHT();\\n\\n        InvestmentPortfolio.AssetInfo memory assetInfo = investmentPortfolio.getAssetInfo(asset);\\n        IPriceGetter priceGetter = IPriceGetter(assetInfo.priceGetter);\\n\\n        uint256 usdcPriceDenominator = priceGetter.denominator();\\n        uint256 usdcBuyPrice = priceGetter.getUsdcBuyPrice();\\n\\n        // in decimals: 18 * 18 / 18 => 18\\n        uint256 targetTokenAmount = (targetUsdcAmount * usdcPriceDenominator) / usdcBuyPrice;\\n\\n        // normilize currentAmount to 18 decimals\\n        uint256 currentAmount = IERC20(asset).balanceOf(address(vault));\\n        //TODO: denominator usage\\n        uint256 denominator = 10**(18 - IERC20Metadata(asset).decimals());\\n        currentAmount = currentAmount * denominator;\\n\\n        bool targetIsZero;\\n        if (targetTokenAmount == 0) {\\n            targetIsZero = true;\\n        } else {\\n            targetIsZero = false;\\n        }\\n\\n        if (targetTokenAmount >= currentAmount) {\\n            return (targetTokenAmount - currentAmount, int8(1), targetIsZero);\\n        } else {\\n            return (currentAmount - targetTokenAmount, int8(-1), targetIsZero);\\n        }\\n    }\\n\\n    //TODO: remove\\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = _i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            bstr[k] = bytes1(uint8(48 + (_i % 10)));\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    //TODO: remove\\n    function log(string memory message, uint value) internal {\\n        emit ConsoleLog(string(abi.encodePacked(message, uint2str(value))));\\n    }\\n}\\n\\n/* // function m2m () {\\n\\n    // calculate proportions and changes value\\n        for (uint8 a = 0; a<actives.length; a++) {\\n                totalSum +=  (uint128 (actives[a].balance)) * priceAct;\\n\\n\\n        }\\n\\n    }\\n */\\n\",\"keccak256\":\"0x35a27157d755f305644afa73a9bde65b0804fda67aa57f36915a5828416603fd\",\"license\":\"GPL-3.0\"},\"contracts/OwnableExt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableExt is Context {\\n    address private _owner;\\n    mapping(bytes32 => address) public rolemap;\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"OwnableExt: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function setRole(bytes32 _role, address _actor) external onlyOwner {\\n        require(_actor != address(0), \\\"Zero address not allowed\\\");\\n        rolemap[_role] = _actor;\\n        //TODO: \\u0434\\u043e\\u0431\\u0430\\u0432\\u0438\\u0442\\u044c \\u0441\\u043e\\u0431\\u044b\\u0442\\u0438\\u0435\\n    }\\n\\n    modifier onlyRole(bytes32 _role) {\\n        require(rolemap[_role] == _msgSender(), \\\"OwnableExt: caller has not the role\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        require(newOwner != address(0), \\\"Zero address not allowed\\\");\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc1a82972bca3ffd2428a667ce77a7f33c0ebdf1f18eee615059eb57ca6f303c1\",\"license\":\"MIT\"},\"contracts/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./connectors/aave/interfaces/IAaveIncentivesController.sol\\\";\\n\\n/**\\n * Vault address is used as owner for all tokens for Overnights.\\n * So you able to use Vault address to check any tokens balances.\\n * Vault doesn't know about what it has and how mauch.\\n * Vault can contain any tokens but only IERC20 could be transfered\\n * in real work.\\n * NOTE: currently work with ETH/MATIC or other payments not realised.\\n * NOTE: not used SafeERC20 and it may be changed in future\\n */\\ncontract Vault is AccessControl {\\n    bytes32 public constant PORTFOLIO_MANAGER = keccak256(\\\"PORTFOLIO_MANAGER\\\");\\n    bytes32 public constant REWARD_MANAGER = keccak256(\\\"REWARD_MANAGER\\\");\\n\\n    // Only Vault can claiming aave rewards\\n    IAaveIncentivesController public aaveReward;\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    modifier onlyPortfolioManager() {\\n        require(hasRole(PORTFOLIO_MANAGER, msg.sender), \\\"Caller is not the PORTFOLIO_MANAGER\\\");\\n        _;\\n    }\\n\\n    modifier onlyRewardManager() {\\n        require(hasRole(REWARD_MANAGER, msg.sender), \\\"Caller is not the REWARD_MANAGER\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function setPortfolioManager(address _portfolioManager) public onlyAdmin {\\n        require(_portfolioManager != address(0), \\\"Zero address not allowed\\\");\\n        grantRole(PORTFOLIO_MANAGER, _portfolioManager);\\n    }\\n\\n    function setRewardManager(address _rewardManager) public onlyAdmin {\\n        require(_rewardManager != address(0), \\\"Zero address not allowed\\\");\\n        grantRole(REWARD_MANAGER, _rewardManager);\\n    }\\n\\n\\n    function setAaveReward(address _aaveReward) public onlyAdmin {\\n        require(_aaveReward != address(0), \\\"Zero address not allowed\\\");\\n        aaveReward = IAaveIncentivesController(_aaveReward);\\n    }\\n\\n\\n\\n    //TODO: do we really need this feature?\\n    function removePortfolioManager(address _portfolioManager) public onlyAdmin {\\n        require(_portfolioManager != address(0), \\\"Zero address not allowed\\\");\\n        revokeRole(PORTFOLIO_MANAGER, _portfolioManager);\\n    }\\n\\n\\n    function claimRewardAave(address[] calldata assets, uint256 amount) public onlyRewardManager {\\n        aaveReward.claimRewards(assets, amount, address(this));\\n    }\\n\\n\\n    /**\\n     * @dev proxy to IERC20().totalSupply();\\n     */\\n    function totalSupply(IERC20 token) external view returns (uint256) {\\n        return token.totalSupply();\\n    }\\n\\n    /**\\n     * @dev proxy to IERC20().balanceOf();\\n     */\\n    function balanceOf(IERC20 token, address account) external view returns (uint256) {\\n        return token.balanceOf(account);\\n    }\\n\\n    /**\\n     * @dev proxy to IERC20().allowance();\\n     */\\n    function allowance(\\n        IERC20 token,\\n        address owner,\\n        address spender\\n    ) external view returns (uint256) {\\n        return token.allowance(owner, spender);\\n    }\\n\\n    /**\\n     * @dev proxy to IERC20().approve();\\n     */\\n    function approve(\\n        IERC20 token,\\n        address spender,\\n        uint256 amount\\n    ) external onlyPortfolioManager returns (bool) {\\n        return token.approve(spender, amount);\\n    }\\n\\n    /**\\n     * @dev proxy to IERC20().transfer();\\n     */\\n    function transfer(\\n        IERC20 token,\\n        address recipient,\\n        uint256 amount\\n    ) external onlyPortfolioManager returns (bool) {\\n        return token.transfer(recipient, amount);\\n    }\\n\\n    /**\\n     * @dev proxy to IERC20().transferFrom();\\n     */\\n    function transferFrom(\\n        IERC20 token,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external onlyPortfolioManager returns (bool) {\\n        return token.transferFrom(sender, recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0417317e36c696b5538d5acd6be2705f0e2adc2735b99af4e287718ab98381e1\",\"license\":\"MIT\"},\"contracts/connectors/aave/interfaces/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IAaveIncentivesController {\\n\\n    event RewardsAccrued(address indexed user, uint256 amount);\\n\\n    event RewardsClaimed(\\n        address indexed user,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    event RewardsClaimed(\\n        address indexed user,\\n        address indexed to,\\n        address indexed claimer,\\n        uint256 amount\\n    );\\n\\n    event ClaimerSet(address indexed user, address indexed claimer);\\n\\n    /**\\n     * @dev Whitelists an address to claim the rewards on behalf of another address\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n    function setClaimer(address user, address claimer) external;\\n\\n    /**\\n     * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n   * @param user The address of the user\\n   * @return The claimer address\\n   */\\n    function getClaimer(address user) external view returns (address);\\n\\n    /**\\n     * @dev Configure assets for a certain rewards emission\\n   * @param assets The assets to incentivize\\n   * @param emissionsPerSecond The emission for each asset\\n   */\\n    function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond)\\n    external;\\n\\n\\n    /**\\n     * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param asset The address of the user\\n   * @param userBalance The balance of the user of the asset in the lending pool\\n   * @param totalSupply The total supply of the asset in the lending pool\\n   **/\\n    function handleAction(\\n        address asset,\\n        uint256 userBalance,\\n        uint256 totalSupply\\n    ) external;\\n\\n    /**\\n     * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n   * @param user The address of the user\\n   * @return The rewards\\n   **/\\n    function getRewardsBalance(address[] calldata assets, address user)\\n    external\\n    view\\n    returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n   * @param amount Amount of rewards to claim\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n   * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param amount Amount of rewards to claim\\n   * @param user Address to check and claim rewards\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n    function claimRewardsOnBehalf(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address user,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev returns the unclaimed rewards of the user\\n   * @param user the address of the user\\n   * @return the unclaimed user rewards\\n   */\\n    function getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n    /**\\n    * @dev for backward compatibility with previous implementation of the Incentives controller\\n  */\\n    function REWARD_TOKEN() external view returns (address);\\n}\\n\",\"keccak256\":\"0xbf9877dc6ded4a81eb08f0db651e28b0789a03b38d1fe3afeb4e768894c66d77\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IMark2Market.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IMark2Market {\\n    struct AssetPrices {\\n        address asset;\\n        uint256 amountInVault; // balance on Vault\\n        uint256 usdcPriceInVault; // current total price of balance at USDC\\n        uint256 diffToTarget; // diff usdcPriceInVault to target in portfolio\\n        int8 diffToTargetSign; // diff sign usdcPriceInVault to target in portfolio\\n        bool targetIsZero; // mean that we should trade all tokens to zero ownership\\n        //\\n        uint256 usdcPriceDenominator;\\n        uint256 usdcSellPrice;\\n        uint256 usdcBuyPrice;\\n        //\\n        uint256 decimals;\\n        string name;\\n        string symbol;\\n    }\\n\\n    struct TotalAssetPrices {\\n        AssetPrices[] assetPrices;\\n        uint256 totalUsdcPrice;\\n    }\\n\\n    function assetPrices() external view returns (TotalAssetPrices memory);\\n\\n    function assetPricesForBalance() external returns (TotalAssetPrices memory);\\n\\n    function assetPricesForBalance(address withdrawToken, uint256 withdrawAmount)\\n        external\\n        returns (TotalAssetPrices memory);\\n}\\n\",\"keccak256\":\"0x337e6890f27d2fd68742e24f9b367952b8b38a2f0d6c6ad15e67e1795ceaaa0d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPriceGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IPriceGetter {\\n    /**\\n     * Token buy price at USDC. Amount of USDC we should spend to buy one token.\\n     * Returned value is [USDC/token]\\n     * Usage: tokenAmount = usdcAmount * denominator() / getUsdcBuyPrice()\\n     * Normilized to 10**18\\n     */\\n    function getUsdcBuyPrice() external view returns (uint256);\\n\\n    /**\\n     * Token sell price at USDC. Amount of USDC we got if sell one token.\\n     * Returned value is [USDC/token]\\n     * Usage: usdcAmount = tokenAmount * getUsdcSellPrice() / denominator()\\n     * Normilized to 10**18\\n     */\\n    function getUsdcSellPrice() external view returns (uint256);\\n\\n    /**\\n     * Denominator for normalization. Default 10**18.\\n     */\\n    function denominator() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2ffb91797f2de81cf176b8ebe0be12d7250279b61f1ee7f8d37ae41e00ecb04e\",\"license\":\"MIT\"},\"contracts/registries/InvestmentPortfolio.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract InvestmentPortfolio is AccessControl {\\n    uint256 public constant TOTAL_WEIGHT = 100000; // 100000 ~ 100%\\n\\n    mapping(address => uint256) public assetInfoPositions;\\n    AssetInfo[] public assetInfos;\\n    mapping(address => uint256) public assetWeightPositions;\\n    AssetWeight[] public assetWeights;\\n\\n    event UpdatedAssetWeight(\\n        uint256 index,\\n        address asset,\\n        uint256 minWeight,\\n        uint256 targetWeight,\\n        uint256 maxWeight\\n    );\\n    event UpdatedAssetInfo(uint256 index, address asset, address priceGetter);\\n\\n    struct AssetWeight {\\n        address asset;\\n        uint256 minWeight;\\n        uint256 targetWeight;\\n        uint256 maxWeight;\\n    }\\n\\n    struct AssetInfo {\\n        address asset;\\n        address priceGetter;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function setAssetInfos(AssetInfo[] calldata _assetInfos) external onlyAdmin {\\n        for (uint8 i = 0; i < _assetInfos.length; i++) {\\n            _addAssetInfoAt(_assetInfos[i], i);\\n        }\\n        // truncate array if needed\\n        if (assetInfos.length > _assetInfos.length) {\\n            uint256 removeCount = assetInfos.length - _assetInfos.length;\\n            for (uint8 i = 0; i < removeCount; i++) {\\n                //TODO: do we need remove from mapping?\\n                assetInfos.pop();\\n            }\\n        }\\n    }\\n\\n    function addAssetInfoAt(AssetInfo calldata assetInfo, uint256 index) external onlyAdmin {\\n        _addAssetInfoAt(assetInfo, index);\\n    }\\n\\n    function _addAssetInfoAt(AssetInfo calldata assetInfo, uint256 index) internal {\\n        uint256 currentlength = assetInfos.length;\\n        // expand array id needed\\n        if (currentlength == 0 || currentlength - 1 < index) {\\n            uint256 additionalCount = index - currentlength + 1;\\n            for (uint8 i = 0; i < additionalCount; i++) {\\n                assetInfos.push();\\n            }\\n        }\\n        assetInfos[index] = assetInfo;\\n        assetInfoPositions[assetInfo.asset] = index;\\n        emit UpdatedAssetInfo(index, assetInfo.asset, assetInfo.priceGetter);\\n    }\\n\\n    function setWeights(AssetWeight[] calldata _assetWeights) external onlyAdmin {\\n        uint256 totalTarget = 0;\\n        for (uint8 i = 0; i < _assetWeights.length; i++) {\\n            AssetWeight memory assetWeight = _assetWeights[i];\\n            require(assetWeight.asset != address(0), \\\"weight without asset\\\");\\n            require(\\n                assetWeight.minWeight <= assetWeight.targetWeight,\\n                \\\"minWeight shouldn't higher than targetWeight\\\"\\n            );\\n            require(\\n                assetWeight.targetWeight <= assetWeight.maxWeight,\\n                \\\"targetWeight shouldn't higher than maxWeight\\\"\\n            );\\n            totalTarget += assetWeight.targetWeight;\\n        }\\n        require(totalTarget == TOTAL_WEIGHT, \\\"Total target should equal to TOTAL_WEIGHT\\\");\\n\\n        for (uint8 i = 0; i < _assetWeights.length; i++) {\\n            _addWeightAt(_assetWeights[i], i);\\n            assetWeightPositions[assetWeights[i].asset] = i;\\n        }\\n\\n        // truncate if need\\n        if (assetWeights.length > _assetWeights.length) {\\n            uint256 removeCount = assetWeights.length - _assetWeights.length;\\n            for (uint8 i = 0; i < removeCount; i++) {\\n                assetWeights.pop();\\n            }\\n        }\\n    }\\n\\n    function _addWeightAt(AssetWeight memory assetWeight, uint256 index) internal {\\n        uint256 currentlength = assetWeights.length;\\n        // expand if need\\n        if (currentlength == 0 || currentlength - 1 < index) {\\n            uint256 additionalCount = index - currentlength + 1;\\n            for (uint8 i = 0; i < additionalCount; i++) {\\n                assetWeights.push();\\n            }\\n        }\\n        assetWeights[index] = assetWeight;\\n        emit UpdatedAssetWeight(\\n            index,\\n            assetWeight.asset,\\n            assetWeight.minWeight,\\n            assetWeight.targetWeight,\\n            assetWeight.maxWeight\\n        );\\n    }\\n\\n    function getAssetInfo(address asset) external view returns (AssetInfo memory) {\\n        return assetInfos[assetInfoPositions[asset]];\\n    }\\n\\n    function getAllAssetInfos() external view returns (AssetInfo[] memory) {\\n        return assetInfos;\\n    }\\n\\n    function getAssetWeight(address asset) external view returns (AssetWeight memory) {\\n        return assetWeights[assetWeightPositions[asset]];\\n    }\\n\\n    function getAllAssetWeights() external view returns (AssetWeight[] memory) {\\n        return assetWeights;\\n    }\\n}\\n\",\"keccak256\":\"0x2f192bc7bc754d6b4f05bc0d6a8cdade1c0713d58a7fdef14a7dfbee9a4a7fb6\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b6100c9565b6001600160a01b0381166100795760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604482015260640160405180910390fd5b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6121c5806100d86000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638da5cb5b116100715780638da5cb5b146101395780639a707d871461014a578063dff8720314610152578063f09a401614610165578063f2fde38b14610178578063fbfa77cf1461018b57600080fd5b80630f1d897d146100ae5780632dc10a54146100de57806358a8316c14610107578063715018a61461011c578063734bd75d14610126575b600080fd5b6003546100c1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100c16100ec366004611b14565b6001602052600090815260409020546001600160a01b031681565b61010f61019e565b6040516100d59190611da0565b6101246101c3565b005b61010f6101343660046119ad565b610202565b6000546001600160a01b03166100c1565b61010f610aa9565b610124610160366004611b2d565b61109f565b610124610173366004611974565b61111d565b610124610186366004611950565b6111c1565b6002546100c1906001600160a01b031681565b6040805180820190915260608152600060208201526101be600080610202565b905090565b6000546001600160a01b031633146101f65760405162461bcd60e51b81526004016101ed90611d26565b60405180910390fd5b61020060006111f7565b565b6040805180820190915260608152600060208201526001600160a01b038316156102bf576000836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561026157600080fd5b505afa158015610275573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102999190611c2e565b6102a490601261205f565b6102af90600a611f7e565b90506102bb8184612029565b9250505b60035460408051630ffe53c160e21b815290516000926001600160a01b031691633ff94f049160048083019286929190829003018186803b15801561030357600080fd5b505afa158015610317573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261033f9190810190611a7f565b8051909150600090818167ffffffffffffffff81111561036157610361612143565b60405190808252806020026020018201604052801561039a57816020015b61038761180c565b81526020019060019003908161037f5790505b50905060005b828160ff161015610907576000858260ff16815181106103c2576103c261212d565b602090810291909101015180516002546040516370a0823160e01b81526001600160a01b0391821660048201529293506000929116906370a082319060240160206040518083038186803b15801561041957600080fd5b505afa15801561042d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104519190611c15565b9050600082600001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561049257600080fd5b505afa1580156104a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ca9190611c2e565b6104d590601261205f565b6104e090600a611f7e565b90506104ec8183612029565b60035484516040516357d6970b60e11b81526001600160a01b03918216600482015292945060009291169063afad2e1690602401604080518083038186803b15801561053757600080fd5b505afa15801561054b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056f9190611bdd565b90506000816020015190506000816001600160a01b03166396ce07956040518163ffffffff1660e01b815260040160206040518083038186803b1580156105b557600080fd5b505afa1580156105c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ed9190611c15565b90506000826001600160a01b0316632b8455f16040518163ffffffff1660e01b815260040160206040518083038186803b15801561062a57600080fd5b505afa15801561063e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106629190611c15565b90506000836001600160a01b031663ea2497846040518163ffffffff1660e01b815260040160206040518083038186803b15801561069f57600080fd5b505afa1580156106b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d79190611c15565b90506000836106e6848a612029565b6106f09190611f27565b90506106fc818e611f0f565b9c506040518061018001604052808a600001516001600160a01b03168152602001898152602001828152602001600081526020016000800b81526020016000151581526020018581526020018481526020018381526020018a600001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561079157600080fd5b505afa1580156107a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c99190611c2e565b60ff1681526020018a600001516001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561080e57600080fd5b505afa158015610822573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261084a9190810190611b52565b81526020018a600001516001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561088c57600080fd5b505afa1580156108a0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108c89190810190611b52565b8152508b8b60ff16815181106108e0576108e061212d565b602002602001018190525050505050505050505080806108ff906120cd565b9150506103a0565b50858310156109158761126d565b61091e8561126d565b60405160200161092f929190611cac565b6040516020818303038152906040529061095c5760405162461bcd60e51b81526004016101ed9190611d13565b506109678684612048565b925061098b60405180606001604052806021815260200161216f6021913984611375565b60005b828160ff161015610a88576000828260ff16815181106109b0576109b061212d565b602002602001015190506109c88582600001516113d7565b151560a0840152600090810b900b608083015260608201528715801590610a045750886001600160a01b031681600001516001600160a01b0316145b15610a75576000816080015160000b1215610a5f578781606001511115610a3f57878160600151610a359190612048565b6060820152610a75565b6060810151610a4e9089612048565b606082015260016080820152610a75565b878160600151610a6f9190611f0f565b60608201525b5080610a80816120cd565b91505061098e565b50604080518082019091529081526020810192909252509150505b92915050565b6040805180820190915260608152600060208201526003546040805163035d61bf60e31b815290516000926001600160a01b031691631aeb0df89160048083019286929190829003018186803b158015610b0257600080fd5b505afa158015610b16573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b3e91908101906119d9565b8051909150600090818167ffffffffffffffff811115610b6057610b60612143565b604051908082528060200260200182016040528015610b9957816020015b610b8661180c565b815260200190600190039081610b7e5790505b50905060005b828160ff161015611082576000858260ff1681518110610bc157610bc161212d565b602090810291909101015180516002546040516370a0823160e01b81526001600160a01b0391821660048201529293506000929116906370a082319060240160206040518083038186803b158015610c1857600080fd5b505afa158015610c2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c509190611c15565b9050600082600001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9157600080fd5b505afa158015610ca5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc99190611c2e565b610cd490601261205f565b610cdf90600a611f7e565b9050610ceb8183612029565b91506000836020015190506000816001600160a01b03166396ce07956040518163ffffffff1660e01b815260040160206040518083038186803b158015610d3157600080fd5b505afa158015610d45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d699190611c15565b90506000826001600160a01b0316632b8455f16040518163ffffffff1660e01b815260040160206040518083038186803b158015610da657600080fd5b505afa158015610dba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dde9190611c15565b90506000836001600160a01b031663ea2497846040518163ffffffff1660e01b815260040160206040518083038186803b158015610e1b57600080fd5b505afa158015610e2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e539190611c15565b9050600083610e628489612029565b610e6c9190611f27565b9050610e78818d611f0f565b9b5060405180610180016040528089600001516001600160a01b03168152602001888152602001828152602001600081526020016000800b815260200160001515815260200185815260200184815260200183815260200189600001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610f0d57600080fd5b505afa158015610f21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f459190611c2e565b60ff16815260200189600001516001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b158015610f8a57600080fd5b505afa158015610f9e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fc69190810190611b52565b815260200189600001516001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561100857600080fd5b505afa15801561101c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110449190810190611b52565b8152508a8a60ff168151811061105c5761105c61212d565b60200260200101819052505050505050505050808061107a906120cd565b915050610b9f565b506040805180820190915290815260208101929092525092915050565b6000546001600160a01b031633146110c95760405162461bcd60e51b81526004016101ed90611d26565b6001600160a01b0381166110ef5760405162461bcd60e51b81526004016101ed90611d69565b60009182526001602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6000546001600160a01b031633146111475760405162461bcd60e51b81526004016101ed90611d26565b6001600160a01b03821661116d5760405162461bcd60e51b81526004016101ed90611d69565b6001600160a01b0381166111935760405162461bcd60e51b81526004016101ed90611d69565b600280546001600160a01b039384166001600160a01b03199182161790915560038054929093169116179055565b6000546001600160a01b031633146111eb5760405162461bcd60e51b81526004016101ed90611d26565b6111f4816111f7565b50565b6001600160a01b03811661121d5760405162461bcd60e51b81526004016101ed90611d69565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060816112915750506040805180820190915260018152600360fc1b602082015290565b8160005b81156112bb57806112a5816120b2565b91506112b49050600a83611f27565b9150611295565b60008167ffffffffffffffff8111156112d6576112d6612143565b6040519080825280601f01601f191660200182016040528015611300576020820181803683370190505b509050815b851561136c57611316600182612048565b9050611323600a876120ed565b61132e906030611f0f565b60f81b8282815181106113435761134361212d565b60200101906001600160f81b031916908160001a905350611365600a87611f27565b9550611305565b50949350505050565b7f0f8db0708c4e6b233e2c285fe1ed66015dee71bd374ac8e835534be5f592d6a2826113a08361126d565b6040516020016113b1929190611c7d565b60408051601f19818403018152908290526113cb91611d13565b60405180910390a15050565b6003546040516303a7e9db60e41b81526001600160a01b0383811660048301526000928392839283921690633a7e9db09060240160806040518083038186803b15801561142357600080fd5b505afa158015611437573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145b9190611bf9565b90506000600360009054906101000a90046001600160a01b03166001600160a01b031663ed2a2f9d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114ad57600080fd5b505afa1580156114c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e59190611c15565b60408301516114f49089612029565b6114fe9190611f27565b6003546040516357d6970b60e11b81526001600160a01b0389811660048301529293506000929091169063afad2e1690602401604080518083038186803b15801561154857600080fd5b505afa15801561155c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115809190611bdd565b90506000816020015190506000816001600160a01b03166396ce07956040518163ffffffff1660e01b815260040160206040518083038186803b1580156115c657600080fd5b505afa1580156115da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115fe9190611c15565b90506000826001600160a01b031663ea2497846040518163ffffffff1660e01b815260040160206040518083038186803b15801561163b57600080fd5b505afa15801561164f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116739190611c15565b90506000816116828488612029565b61168c9190611f27565b6002546040516370a0823160e01b81526001600160a01b039182166004820152919250600091908d16906370a082319060240160206040518083038186803b1580156116d757600080fd5b505afa1580156116eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170f9190611c15565b905060008c6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561174c57600080fd5b505afa158015611760573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117849190611c2e565b61178f90601261205f565b61179a90600a611f7e565b90506117a68183612029565b91506000836117b7575060016117bb565b5060005b8284106117e3576117cc8385612048565b9c5060019b50995061180598505050505050505050565b6117ed8484612048565b9c506000199b50995061180598505050505050505050565b9250925092565b60405180610180016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000800b81526020016000151581526020016000815260200160008152602001600081526020016000815260200160608152602001606081525090565b60006040828403121561188c57600080fd5b6040516040810181811067ffffffffffffffff821117156118af576118af612143565b806040525080915082516118c281612159565b815260208301516118d281612159565b6020919091015292915050565b6000608082840312156118f157600080fd5b6040516080810181811067ffffffffffffffff8211171561191457611914612143565b8060405250809150825161192781612159565b808252506020830151602082015260408301516040820152606083015160608201525092915050565b60006020828403121561196257600080fd5b813561196d81612159565b9392505050565b6000806040838503121561198757600080fd5b823561199281612159565b915060208301356119a281612159565b809150509250929050565b600080604083850312156119c057600080fd5b82356119cb81612159565b946020939093013593505050565b600060208083850312156119ec57600080fd5b825167ffffffffffffffff811115611a0357600080fd5b8301601f81018513611a1457600080fd5b8051611a27611a2282611eeb565b611eba565b80828252848201915084840188868560061b8701011115611a4757600080fd5b600094505b83851015611a7357611a5e898261187a565b83526001949094019391850191604001611a4c565b50979650505050505050565b60006020808385031215611a9257600080fd5b825167ffffffffffffffff811115611aa957600080fd5b8301601f81018513611aba57600080fd5b8051611ac8611a2282611eeb565b80828252848201915084840188868560071b8701011115611ae857600080fd5b600094505b83851015611a7357611aff89826118df565b83526001949094019391850191608001611aed565b600060208284031215611b2657600080fd5b5035919050565b60008060408385031215611b4057600080fd5b8235915060208301356119a281612159565b600060208284031215611b6457600080fd5b815167ffffffffffffffff80821115611b7c57600080fd5b818401915084601f830112611b9057600080fd5b815181811115611ba257611ba2612143565b611bb5601f8201601f1916602001611eba565b9150808252856020828501011115611bcc57600080fd5b61136c816020840160208601612082565b600060408284031215611bef57600080fd5b61196d838361187a565b600060808284031215611c0b57600080fd5b61196d83836118df565b600060208284031215611c2757600080fd5b5051919050565b600060208284031215611c4057600080fd5b815160ff8116811461196d57600080fd5b60008151808452611c69816020860160208601612082565b601f01601f19169290920160200192915050565b60008351611c8f818460208801612082565b835190830190611ca3818360208801612082565b01949350505050565b7f5769746864726177206d6f7265207468616e20746f74616c3a20000000000000815260008351611ce481601a850160208801612082565b620101f160ed1b601a918401918201528351611d0781601d840160208801612082565b01601d01949350505050565b60208152600061196d6020830184611c51565b60208082526023908201527f4f776e61626c654578743a2063616c6c6572206973206e6f7420746865206f776040820152623732b960e91b606082015260800190565b60208082526018908201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604082015260600190565b600060208083526060808401855160408085880152828251808552608094508489019150848160051b8a0101878501945060005b82811015611ea4578a8203607f19018452855180516001600160a01b031683526101808a8201518b8501528682015187850152898201518a85015288820151611e218a86018260000b9052565b5060a08281015115159085015260c0808301519085015260e080830151908501526101008083015190850152610120808301519085015261014080830151818601839052611e7183870182611c51565b925050506101608083015192508482038186015250611e908183611c51565b978b0197958b019593505050600101611dd4565b5096909901519190970152509195945050505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715611ee357611ee3612143565b604052919050565b600067ffffffffffffffff821115611f0557611f05612143565b5060051b60200190565b60008219821115611f2257611f22612101565b500190565b600082611f3657611f36612117565b500490565b600181815b80851115611f76578160001904821115611f5c57611f5c612101565b80851615611f6957918102915b93841c9390800290611f40565b509250929050565b600061196d60ff841683600082611f9757506001610aa3565b81611fa457506000610aa3565b8160018114611fba5760028114611fc457611fe0565b6001915050610aa3565b60ff841115611fd557611fd5612101565b50506001821b610aa3565b5060208310610133831016604e8410600b8410161715612003575081810a610aa3565b61200d8383611f3b565b806000190482111561202157612021612101565b029392505050565b600081600019048311821515161561204357612043612101565b500290565b60008282101561205a5761205a612101565b500390565b600060ff821660ff84168082101561207957612079612101565b90039392505050565b60005b8381101561209d578181015183820152602001612085565b838111156120ac576000848401525b50505050565b60006000198214156120c6576120c6612101565b5060010190565b600060ff821660ff8114156120e4576120e4612101565b60010192915050565b6000826120fc576120fc612117565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146111f457600080fdfe746f74616c55736463507269636520616674657220636f7272656374696f6e3a20a26469706673582212208bb95c3a6415aa207de91ceecbfb25c8b0050792a67400afb1814a2a5b2939f064736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80638da5cb5b116100715780638da5cb5b146101395780639a707d871461014a578063dff8720314610152578063f09a401614610165578063f2fde38b14610178578063fbfa77cf1461018b57600080fd5b80630f1d897d146100ae5780632dc10a54146100de57806358a8316c14610107578063715018a61461011c578063734bd75d14610126575b600080fd5b6003546100c1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100c16100ec366004611b14565b6001602052600090815260409020546001600160a01b031681565b61010f61019e565b6040516100d59190611da0565b6101246101c3565b005b61010f6101343660046119ad565b610202565b6000546001600160a01b03166100c1565b61010f610aa9565b610124610160366004611b2d565b61109f565b610124610173366004611974565b61111d565b610124610186366004611950565b6111c1565b6002546100c1906001600160a01b031681565b6040805180820190915260608152600060208201526101be600080610202565b905090565b6000546001600160a01b031633146101f65760405162461bcd60e51b81526004016101ed90611d26565b60405180910390fd5b61020060006111f7565b565b6040805180820190915260608152600060208201526001600160a01b038316156102bf576000836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561026157600080fd5b505afa158015610275573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102999190611c2e565b6102a490601261205f565b6102af90600a611f7e565b90506102bb8184612029565b9250505b60035460408051630ffe53c160e21b815290516000926001600160a01b031691633ff94f049160048083019286929190829003018186803b15801561030357600080fd5b505afa158015610317573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261033f9190810190611a7f565b8051909150600090818167ffffffffffffffff81111561036157610361612143565b60405190808252806020026020018201604052801561039a57816020015b61038761180c565b81526020019060019003908161037f5790505b50905060005b828160ff161015610907576000858260ff16815181106103c2576103c261212d565b602090810291909101015180516002546040516370a0823160e01b81526001600160a01b0391821660048201529293506000929116906370a082319060240160206040518083038186803b15801561041957600080fd5b505afa15801561042d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104519190611c15565b9050600082600001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561049257600080fd5b505afa1580156104a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ca9190611c2e565b6104d590601261205f565b6104e090600a611f7e565b90506104ec8183612029565b60035484516040516357d6970b60e11b81526001600160a01b03918216600482015292945060009291169063afad2e1690602401604080518083038186803b15801561053757600080fd5b505afa15801561054b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056f9190611bdd565b90506000816020015190506000816001600160a01b03166396ce07956040518163ffffffff1660e01b815260040160206040518083038186803b1580156105b557600080fd5b505afa1580156105c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ed9190611c15565b90506000826001600160a01b0316632b8455f16040518163ffffffff1660e01b815260040160206040518083038186803b15801561062a57600080fd5b505afa15801561063e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106629190611c15565b90506000836001600160a01b031663ea2497846040518163ffffffff1660e01b815260040160206040518083038186803b15801561069f57600080fd5b505afa1580156106b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d79190611c15565b90506000836106e6848a612029565b6106f09190611f27565b90506106fc818e611f0f565b9c506040518061018001604052808a600001516001600160a01b03168152602001898152602001828152602001600081526020016000800b81526020016000151581526020018581526020018481526020018381526020018a600001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561079157600080fd5b505afa1580156107a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c99190611c2e565b60ff1681526020018a600001516001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561080e57600080fd5b505afa158015610822573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261084a9190810190611b52565b81526020018a600001516001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561088c57600080fd5b505afa1580156108a0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108c89190810190611b52565b8152508b8b60ff16815181106108e0576108e061212d565b602002602001018190525050505050505050505080806108ff906120cd565b9150506103a0565b50858310156109158761126d565b61091e8561126d565b60405160200161092f929190611cac565b6040516020818303038152906040529061095c5760405162461bcd60e51b81526004016101ed9190611d13565b506109678684612048565b925061098b60405180606001604052806021815260200161216f6021913984611375565b60005b828160ff161015610a88576000828260ff16815181106109b0576109b061212d565b602002602001015190506109c88582600001516113d7565b151560a0840152600090810b900b608083015260608201528715801590610a045750886001600160a01b031681600001516001600160a01b0316145b15610a75576000816080015160000b1215610a5f578781606001511115610a3f57878160600151610a359190612048565b6060820152610a75565b6060810151610a4e9089612048565b606082015260016080820152610a75565b878160600151610a6f9190611f0f565b60608201525b5080610a80816120cd565b91505061098e565b50604080518082019091529081526020810192909252509150505b92915050565b6040805180820190915260608152600060208201526003546040805163035d61bf60e31b815290516000926001600160a01b031691631aeb0df89160048083019286929190829003018186803b158015610b0257600080fd5b505afa158015610b16573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b3e91908101906119d9565b8051909150600090818167ffffffffffffffff811115610b6057610b60612143565b604051908082528060200260200182016040528015610b9957816020015b610b8661180c565b815260200190600190039081610b7e5790505b50905060005b828160ff161015611082576000858260ff1681518110610bc157610bc161212d565b602090810291909101015180516002546040516370a0823160e01b81526001600160a01b0391821660048201529293506000929116906370a082319060240160206040518083038186803b158015610c1857600080fd5b505afa158015610c2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c509190611c15565b9050600082600001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9157600080fd5b505afa158015610ca5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc99190611c2e565b610cd490601261205f565b610cdf90600a611f7e565b9050610ceb8183612029565b91506000836020015190506000816001600160a01b03166396ce07956040518163ffffffff1660e01b815260040160206040518083038186803b158015610d3157600080fd5b505afa158015610d45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d699190611c15565b90506000826001600160a01b0316632b8455f16040518163ffffffff1660e01b815260040160206040518083038186803b158015610da657600080fd5b505afa158015610dba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dde9190611c15565b90506000836001600160a01b031663ea2497846040518163ffffffff1660e01b815260040160206040518083038186803b158015610e1b57600080fd5b505afa158015610e2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e539190611c15565b9050600083610e628489612029565b610e6c9190611f27565b9050610e78818d611f0f565b9b5060405180610180016040528089600001516001600160a01b03168152602001888152602001828152602001600081526020016000800b815260200160001515815260200185815260200184815260200183815260200189600001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610f0d57600080fd5b505afa158015610f21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f459190611c2e565b60ff16815260200189600001516001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b158015610f8a57600080fd5b505afa158015610f9e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fc69190810190611b52565b815260200189600001516001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561100857600080fd5b505afa15801561101c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110449190810190611b52565b8152508a8a60ff168151811061105c5761105c61212d565b60200260200101819052505050505050505050808061107a906120cd565b915050610b9f565b506040805180820190915290815260208101929092525092915050565b6000546001600160a01b031633146110c95760405162461bcd60e51b81526004016101ed90611d26565b6001600160a01b0381166110ef5760405162461bcd60e51b81526004016101ed90611d69565b60009182526001602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6000546001600160a01b031633146111475760405162461bcd60e51b81526004016101ed90611d26565b6001600160a01b03821661116d5760405162461bcd60e51b81526004016101ed90611d69565b6001600160a01b0381166111935760405162461bcd60e51b81526004016101ed90611d69565b600280546001600160a01b039384166001600160a01b03199182161790915560038054929093169116179055565b6000546001600160a01b031633146111eb5760405162461bcd60e51b81526004016101ed90611d26565b6111f4816111f7565b50565b6001600160a01b03811661121d5760405162461bcd60e51b81526004016101ed90611d69565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060816112915750506040805180820190915260018152600360fc1b602082015290565b8160005b81156112bb57806112a5816120b2565b91506112b49050600a83611f27565b9150611295565b60008167ffffffffffffffff8111156112d6576112d6612143565b6040519080825280601f01601f191660200182016040528015611300576020820181803683370190505b509050815b851561136c57611316600182612048565b9050611323600a876120ed565b61132e906030611f0f565b60f81b8282815181106113435761134361212d565b60200101906001600160f81b031916908160001a905350611365600a87611f27565b9550611305565b50949350505050565b7f0f8db0708c4e6b233e2c285fe1ed66015dee71bd374ac8e835534be5f592d6a2826113a08361126d565b6040516020016113b1929190611c7d565b60408051601f19818403018152908290526113cb91611d13565b60405180910390a15050565b6003546040516303a7e9db60e41b81526001600160a01b0383811660048301526000928392839283921690633a7e9db09060240160806040518083038186803b15801561142357600080fd5b505afa158015611437573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145b9190611bf9565b90506000600360009054906101000a90046001600160a01b03166001600160a01b031663ed2a2f9d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114ad57600080fd5b505afa1580156114c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e59190611c15565b60408301516114f49089612029565b6114fe9190611f27565b6003546040516357d6970b60e11b81526001600160a01b0389811660048301529293506000929091169063afad2e1690602401604080518083038186803b15801561154857600080fd5b505afa15801561155c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115809190611bdd565b90506000816020015190506000816001600160a01b03166396ce07956040518163ffffffff1660e01b815260040160206040518083038186803b1580156115c657600080fd5b505afa1580156115da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115fe9190611c15565b90506000826001600160a01b031663ea2497846040518163ffffffff1660e01b815260040160206040518083038186803b15801561163b57600080fd5b505afa15801561164f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116739190611c15565b90506000816116828488612029565b61168c9190611f27565b6002546040516370a0823160e01b81526001600160a01b039182166004820152919250600091908d16906370a082319060240160206040518083038186803b1580156116d757600080fd5b505afa1580156116eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170f9190611c15565b905060008c6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561174c57600080fd5b505afa158015611760573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117849190611c2e565b61178f90601261205f565b61179a90600a611f7e565b90506117a68183612029565b91506000836117b7575060016117bb565b5060005b8284106117e3576117cc8385612048565b9c5060019b50995061180598505050505050505050565b6117ed8484612048565b9c506000199b50995061180598505050505050505050565b9250925092565b60405180610180016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000800b81526020016000151581526020016000815260200160008152602001600081526020016000815260200160608152602001606081525090565b60006040828403121561188c57600080fd5b6040516040810181811067ffffffffffffffff821117156118af576118af612143565b806040525080915082516118c281612159565b815260208301516118d281612159565b6020919091015292915050565b6000608082840312156118f157600080fd5b6040516080810181811067ffffffffffffffff8211171561191457611914612143565b8060405250809150825161192781612159565b808252506020830151602082015260408301516040820152606083015160608201525092915050565b60006020828403121561196257600080fd5b813561196d81612159565b9392505050565b6000806040838503121561198757600080fd5b823561199281612159565b915060208301356119a281612159565b809150509250929050565b600080604083850312156119c057600080fd5b82356119cb81612159565b946020939093013593505050565b600060208083850312156119ec57600080fd5b825167ffffffffffffffff811115611a0357600080fd5b8301601f81018513611a1457600080fd5b8051611a27611a2282611eeb565b611eba565b80828252848201915084840188868560061b8701011115611a4757600080fd5b600094505b83851015611a7357611a5e898261187a565b83526001949094019391850191604001611a4c565b50979650505050505050565b60006020808385031215611a9257600080fd5b825167ffffffffffffffff811115611aa957600080fd5b8301601f81018513611aba57600080fd5b8051611ac8611a2282611eeb565b80828252848201915084840188868560071b8701011115611ae857600080fd5b600094505b83851015611a7357611aff89826118df565b83526001949094019391850191608001611aed565b600060208284031215611b2657600080fd5b5035919050565b60008060408385031215611b4057600080fd5b8235915060208301356119a281612159565b600060208284031215611b6457600080fd5b815167ffffffffffffffff80821115611b7c57600080fd5b818401915084601f830112611b9057600080fd5b815181811115611ba257611ba2612143565b611bb5601f8201601f1916602001611eba565b9150808252856020828501011115611bcc57600080fd5b61136c816020840160208601612082565b600060408284031215611bef57600080fd5b61196d838361187a565b600060808284031215611c0b57600080fd5b61196d83836118df565b600060208284031215611c2757600080fd5b5051919050565b600060208284031215611c4057600080fd5b815160ff8116811461196d57600080fd5b60008151808452611c69816020860160208601612082565b601f01601f19169290920160200192915050565b60008351611c8f818460208801612082565b835190830190611ca3818360208801612082565b01949350505050565b7f5769746864726177206d6f7265207468616e20746f74616c3a20000000000000815260008351611ce481601a850160208801612082565b620101f160ed1b601a918401918201528351611d0781601d840160208801612082565b01601d01949350505050565b60208152600061196d6020830184611c51565b60208082526023908201527f4f776e61626c654578743a2063616c6c6572206973206e6f7420746865206f776040820152623732b960e91b606082015260800190565b60208082526018908201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604082015260600190565b600060208083526060808401855160408085880152828251808552608094508489019150848160051b8a0101878501945060005b82811015611ea4578a8203607f19018452855180516001600160a01b031683526101808a8201518b8501528682015187850152898201518a85015288820151611e218a86018260000b9052565b5060a08281015115159085015260c0808301519085015260e080830151908501526101008083015190850152610120808301519085015261014080830151818601839052611e7183870182611c51565b925050506101608083015192508482038186015250611e908183611c51565b978b0197958b019593505050600101611dd4565b5096909901519190970152509195945050505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715611ee357611ee3612143565b604052919050565b600067ffffffffffffffff821115611f0557611f05612143565b5060051b60200190565b60008219821115611f2257611f22612101565b500190565b600082611f3657611f36612117565b500490565b600181815b80851115611f76578160001904821115611f5c57611f5c612101565b80851615611f6957918102915b93841c9390800290611f40565b509250929050565b600061196d60ff841683600082611f9757506001610aa3565b81611fa457506000610aa3565b8160018114611fba5760028114611fc457611fe0565b6001915050610aa3565b60ff841115611fd557611fd5612101565b50506001821b610aa3565b5060208310610133831016604e8410600b8410161715612003575081810a610aa3565b61200d8383611f3b565b806000190482111561202157612021612101565b029392505050565b600081600019048311821515161561204357612043612101565b500290565b60008282101561205a5761205a612101565b500390565b600060ff821660ff84168082101561207957612079612101565b90039392505050565b60005b8381101561209d578181015183820152602001612085565b838111156120ac576000848401525b50505050565b60006000198214156120c6576120c6612101565b5060010190565b600060ff821660ff8114156120e4576120e4612101565b60010192915050565b6000826120fc576120fc612117565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146111f457600080fdfe746f74616c55736463507269636520616674657220636f7272656374696f6e3a20a26469706673582212208bb95c3a6415aa207de91ceecbfb25c8b0050792a67400afb1814a2a5b2939f064736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "assetPricesForBalance(address,uint256)": {
        "params": {
          "withdrawAmount": "Not normilized amount to withdraw",
          "withdrawToken": "Token to withdraw"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4391,
        "contract": "contracts/Mark2Market.sol:Mark2Market",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4395,
        "contract": "contracts/Mark2Market.sol:Mark2Market",
        "label": "rolemap",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 3262,
        "contract": "contracts/Mark2Market.sol:Mark2Market",
        "label": "vault",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(Vault)6081"
      },
      {
        "astId": 3265,
        "contract": "contracts/Mark2Market.sol:Mark2Market",
        "label": "investmentPortfolio",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(InvestmentPortfolio)11080"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(InvestmentPortfolio)11080": {
        "encoding": "inplace",
        "label": "contract InvestmentPortfolio",
        "numberOfBytes": "20"
      },
      "t_contract(Vault)6081": {
        "encoding": "inplace",
        "label": "contract Vault",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}