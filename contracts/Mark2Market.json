{
  "address": "0xBaC3100BEEE79CA34B18fbcD0437bd382Ee5611B",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "portfolio",
          "type": "address"
        }
      ],
      "name": "PortfolioUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "VaultUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "assetPrices",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amountInVault",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "usdcPriceInVault",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "usdcPriceDenominator",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "usdcSellPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "usdcBuyPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct IMark2Market.AssetPrices[]",
              "name": "assetPrices",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "totalUsdcPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMark2Market.TotalAssetPrices",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetPricesForBalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "int256",
              "name": "diffToTarget",
              "type": "int256"
            },
            {
              "internalType": "bool",
              "name": "targetIsZero",
              "type": "bool"
            }
          ],
          "internalType": "struct IMark2Market.BalanceAssetPrices[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "withdrawToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "assetPricesForBalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "int256",
              "name": "diffToTarget",
              "type": "int256"
            },
            {
              "internalType": "bool",
              "name": "targetIsZero",
              "type": "bool"
            }
          ],
          "internalType": "struct IMark2Market.BalanceAssetPrices[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "portfolio",
      "outputs": [
        {
          "internalType": "contract Portfolio",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_portfolio",
          "type": "address"
        }
      ],
      "name": "setPortfolio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUsdcPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract Vault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x93e7ef772538ccaae3a072004e64043b79347237b14a5ad977782065747115e3",
  "receipt": {
    "to": null,
    "from": "0x5CB01385d3097b6a189d1ac8BA3364D900666445",
    "contractAddress": "0xBaC3100BEEE79CA34B18fbcD0437bd382Ee5611B",
    "transactionIndex": 39,
    "gasUsed": "1654288",
    "logsBloom": "0x00000000000000000000000000000000000000000020000000800000000000000000000000000000020000000000100000008000000000000000000000000000000004000000000000000000000000800011000000000000000100000000000000000000020000000000000000000800000000000000000080000000080000400000000000000000800000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000000000000000000000000000000100000004020000000000000000000000000000000040000000000000000000000000000100000",
    "blockHash": "0xb1ef1349dd38363d96780be2c24650af11114195ad1b33ca7c33f7f823c708c5",
    "transactionHash": "0x93e7ef772538ccaae3a072004e64043b79347237b14a5ad977782065747115e3",
    "logs": [
      {
        "transactionIndex": 39,
        "blockNumber": 22233693,
        "transactionHash": "0x93e7ef772538ccaae3a072004e64043b79347237b14a5ad977782065747115e3",
        "address": "0xBaC3100BEEE79CA34B18fbcD0437bd382Ee5611B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005cb01385d3097b6a189d1ac8ba3364d900666445"
        ],
        "data": "0x",
        "logIndex": 212,
        "blockHash": "0xb1ef1349dd38363d96780be2c24650af11114195ad1b33ca7c33f7f823c708c5"
      },
      {
        "transactionIndex": 39,
        "blockNumber": 22233693,
        "transactionHash": "0x93e7ef772538ccaae3a072004e64043b79347237b14a5ad977782065747115e3",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005cb01385d3097b6a189d1ac8ba3364d900666445",
          "0x0000000000000000000000007b5000af8ab69fd59eb0d4f5762bff57c9c04385"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000b050fc31e2c000000000000000000000000000000000000000000000000000d2d8fb80736b06e800000000000000000000000000000000000000000000aaeb6155229966840dfe000000000000000000000000000000000000000000000000d228aa84418846e800000000000000000000000000000000000000000000aaeb620573959866cdfe",
        "logIndex": 213,
        "blockHash": "0xb1ef1349dd38363d96780be2c24650af11114195ad1b33ca7c33f7f823c708c5"
      }
    ],
    "blockNumber": 22233693,
    "cumulativeGasUsed": "8119030",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "5940fe62ab9ebf2b846c1724dc847104",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"portfolio\",\"type\":\"address\"}],\"name\":\"PortfolioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"VaultUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"assetPrices\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInVault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcPriceInVault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcPriceDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcSellPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcBuyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct IMark2Market.AssetPrices[]\",\"name\":\"assetPrices\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"totalUsdcPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IMark2Market.TotalAssetPrices\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetPricesForBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"diffToTarget\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"targetIsZero\",\"type\":\"bool\"}],\"internalType\":\"struct IMark2Market.BalanceAssetPrices[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"withdrawToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"assetPricesForBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"diffToTarget\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"targetIsZero\",\"type\":\"bool\"}],\"internalType\":\"struct IMark2Market.BalanceAssetPrices[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"portfolio\",\"outputs\":[{\"internalType\":\"contract Portfolio\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_portfolio\",\"type\":\"address\"}],\"name\":\"setPortfolio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsdcPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"assetPricesForBalance(address,uint256)\":{\"params\":{\"withdrawAmount\":\"Not normalized amount to withdraw\",\"withdrawToken\":\"Token to withdraw\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Mark2Market.sol\":\"Mark2Market\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe5f33b553368181a44ff0c77942ed831152bfa731bc4d1c12a363ef6918366b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x693d1a6333975d5bd166fcc844874f96affecbf45dc5c34fa7d172248d74c06b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa1b27b3f44ff825974e5268e8f63ad3b03add5b464880d860fbb8cae043e17f7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x842c66d5965ed0bf77f274732c2a93a7e2223d53171ec9cccc473bde75104ead\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5fa25f305839292fab713256214f2868e0257d29826b14282bbd7f1e34f5af38\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x905cd0ecd91d1de79a4679d745b79cf852ca8ccda5d25d1c49c6bd17a5edc0cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6aa521718bf139b44ce56f194f6aea1d590cacef995b5a84703fb1579fa49be9\",\"license\":\"MIT\"},\"contracts/Mark2Market.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IMark2Market.sol\\\";\\nimport \\\"./interfaces/IPriceGetter.sol\\\";\\nimport \\\"./registries/Portfolio.sol\\\";\\nimport \\\"./Vault.sol\\\";\\n\\ncontract Mark2Market is IMark2Market, Ownable {\\n    // ---  fields\\n\\n    Vault public vault;\\n    Portfolio public portfolio;\\n\\n    // ---  events\\n\\n    event VaultUpdated(address vault);\\n    event PortfolioUpdated(address portfolio);\\n\\n    // ---  setters\\n\\n    function setVault(address _vault) external onlyOwner {\\n        require(_vault != address(0), \\\"Zero address not allowed\\\");\\n        vault = Vault(_vault);\\n        emit VaultUpdated(_vault);\\n    }\\n\\n    function setPortfolio(address _portfolio) external onlyOwner {\\n        require(_portfolio != address(0), \\\"Zero address not allowed\\\");\\n        portfolio = Portfolio(_portfolio);\\n        emit PortfolioUpdated(_portfolio);\\n    }\\n\\n    // ---  logic\\n\\n    function assetPrices() public view override returns (TotalAssetPrices memory) {\\n        Portfolio.AssetInfo[] memory assetInfos = portfolio.getAllAssetInfos();\\n\\n        uint256 totalUsdcPrice = 0;\\n        uint256 count = assetInfos.length;\\n        AssetPrices[] memory assetPrices = new AssetPrices[](count);\\n        for (uint8 i = 0; i < count; i++) {\\n            Portfolio.AssetInfo memory assetInfo = assetInfos[i];\\n            uint256 amountInVault = _currentAmountInVault(assetInfo.asset);\\n\\n            IPriceGetter priceGetter = IPriceGetter(assetInfo.priceGetter);\\n\\n            uint256 usdcPriceDenominator = priceGetter.denominator();\\n            uint256 usdcSellPrice = priceGetter.getUsdcSellPrice();\\n            uint256 usdcBuyPrice = priceGetter.getUsdcBuyPrice();\\n\\n            // in decimals: 18 + 18 - 18 => 18\\n            uint256 usdcPriceInVault = (amountInVault * usdcSellPrice) / usdcPriceDenominator;\\n\\n            totalUsdcPrice += usdcPriceInVault;\\n\\n            assetPrices[i] = AssetPrices(\\n                assetInfo.asset,\\n                amountInVault,\\n                usdcPriceInVault,\\n                usdcPriceDenominator,\\n                usdcSellPrice,\\n                usdcBuyPrice,\\n                IERC20Metadata(assetInfo.asset).decimals(),\\n                IERC20Metadata(assetInfo.asset).name(),\\n                IERC20Metadata(assetInfo.asset).symbol()\\n            );\\n        }\\n\\n        TotalAssetPrices memory totalPrices = TotalAssetPrices(assetPrices, totalUsdcPrice);\\n\\n        return totalPrices;\\n    }\\n\\n    function totalUsdcPrice() public view override returns (uint256)\\n    {\\n        Portfolio.AssetWeight[] memory assetWeights = portfolio.getAllAssetWeights();\\n\\n        uint256 totalUsdcPrice = 0;\\n        uint256 count = assetWeights.length;\\n        for (uint8 i = 0; i < count; i++) {\\n            Portfolio.AssetWeight memory assetWeight = assetWeights[i];\\n\\n            uint256 amountInVault = _currentAmountInVault(assetWeight.asset);\\n\\n            Portfolio.AssetInfo memory assetInfo = portfolio.getAssetInfo(assetWeight.asset);\\n            IPriceGetter priceGetter = IPriceGetter(assetInfo.priceGetter);\\n\\n            uint256 usdcPriceDenominator = priceGetter.denominator();\\n            uint256 usdcSellPrice = priceGetter.getUsdcSellPrice();\\n\\n            // in decimals: 18 + 18 - 18 => 18\\n            uint256 usdcPriceInVault = (amountInVault * usdcSellPrice) / usdcPriceDenominator;\\n\\n            totalUsdcPrice += usdcPriceInVault;\\n        }\\n\\n        return totalUsdcPrice;\\n    }\\n\\n\\n    function assetPricesForBalance() external view override returns (BalanceAssetPrices[] memory) {\\n        return assetPricesForBalance(address(0), 0);\\n    }\\n\\n    /**\\n     * @param withdrawToken Token to withdraw\\n     * @param withdrawAmount Not normalized amount to withdraw\\n     */\\n    function assetPricesForBalance(address withdrawToken, uint256 withdrawAmount)\\n        public\\n        view\\n        override\\n        returns (BalanceAssetPrices[] memory)\\n    {\\n        if (withdrawToken != address(0)) {\\n            // normalize withdrawAmount to 18 decimals\\n            //TODO: denominator usage\\n            uint256 withdrawAmountDenominator = 10**(18 - IERC20Metadata(withdrawToken).decimals());\\n            withdrawAmount = withdrawAmount * withdrawAmountDenominator;\\n        }\\n\\n        uint256 totalUsdcPrice = totalUsdcPrice();\\n\\n        // 3. validate withdrawAmount\\n        // use `if` instead of `require` because less gas when need to build complex string for revert\\n        if (totalUsdcPrice < withdrawAmount) {\\n            revert(string(\\n                abi.encodePacked(\\n                    \\\"Withdraw more than total: \\\",\\n                    uint2str(withdrawAmount),\\n                    \\\" > \\\",\\n                    uint2str(totalUsdcPrice)\\n                )\\n            ));\\n        }\\n\\n        // 4. correct total with withdrawAmount\\n        totalUsdcPrice = totalUsdcPrice - withdrawAmount;\\n\\n        // 5. calc diffs to target values\\n        Portfolio.AssetWeight[] memory assetWeights = portfolio.getAllAssetWeights();\\n        uint256 count = assetWeights.length;\\n        BalanceAssetPrices[] memory assetPrices = new BalanceAssetPrices[](count);\\n        for (uint8 i = 0; i < count; i++) {\\n            Portfolio.AssetWeight memory assetWeight = assetWeights[i];\\n            int256 diffToTarget = 0;\\n            bool targetIsZero = false;\\n            (diffToTarget, targetIsZero) = _diffToTarget(totalUsdcPrice, assetWeight);\\n            // update diff for withdrawn token\\n            if (withdrawAmount > 0 && assetWeight.asset == withdrawToken) {\\n                diffToTarget = diffToTarget + int256(withdrawAmount);\\n            }\\n            assetPrices[i] = BalanceAssetPrices(\\n                assetWeight.asset,\\n                diffToTarget,\\n                targetIsZero\\n            );\\n        }\\n\\n        return assetPrices;\\n    }\\n\\n    /**\\n     * @param totalUsdcPrice - Total normilized to 10**18\\n     * @param assetWeight - Token address to calc\\n     * @return normalized to 10**18 signed diff amount and mark that mean that need sell all\\n     */\\n    function _diffToTarget(uint256 totalUsdcPrice, Portfolio.AssetWeight memory assetWeight)\\n        internal\\n        view\\n        returns (\\n            int256,\\n            bool\\n        )\\n    {\\n        address asset = assetWeight.asset;\\n\\n        uint256 targetUsdcAmount = (totalUsdcPrice * assetWeight.targetWeight) /\\n            portfolio.TOTAL_WEIGHT();\\n\\n        Portfolio.AssetInfo memory assetInfo = portfolio.getAssetInfo(asset);\\n        IPriceGetter priceGetter = IPriceGetter(assetInfo.priceGetter);\\n\\n        uint256 usdcPriceDenominator = priceGetter.denominator();\\n        uint256 usdcBuyPrice = priceGetter.getUsdcBuyPrice();\\n\\n        // in decimals: 18 * 18 / 18 => 18\\n        uint256 targetTokenAmount = (targetUsdcAmount * usdcPriceDenominator) / usdcBuyPrice;\\n\\n        // normalize currentAmount to 18 decimals\\n        uint256 currentAmount = _currentAmountInVault(asset);\\n\\n        bool targetIsZero;\\n        if (targetTokenAmount == 0) {\\n            targetIsZero = true;\\n        } else {\\n            targetIsZero = false;\\n        }\\n\\n        int256 diff = int256(targetTokenAmount) - int256(currentAmount);\\n        return (diff, targetIsZero);\\n    }\\n\\n    function _currentAmountInVault(address asset) internal view returns (uint256){\\n        // normalize currentAmount to 18 decimals\\n        uint256 currentAmount = IERC20(asset).balanceOf(address(vault));\\n        //TODO: denominator usage\\n        uint256 denominator = 10 ** (18 - IERC20Metadata(asset).decimals());\\n        currentAmount = currentAmount * denominator;\\n        return currentAmount;\\n    }\\n\\n\\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = _i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            bstr[k] = bytes1(uint8(48 + (_i % 10)));\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf04c9be83fed2ff71b07b349636bf770ad6c6a128d8fc7eea805a89ed94ae7be\",\"license\":\"MIT\"},\"contracts/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./connectors/aave/interfaces/IAaveIncentivesController.sol\\\";\\n\\n/**\\n * Vault address is used as owner for all tokens for Overnights.\\n * So you able to use Vault address to check any tokens balances.\\n * Vault doesn't know about what it has and how mauch.\\n * Vault can contain any tokens but only IERC20 could be transfered\\n * in real work.\\n * NOTE: currently work with ETH/MATIC or other payments not realised.\\n * NOTE: not used SafeERC20 and it may be changed in future\\n */\\ncontract Vault is AccessControl {\\n    // ---  fields\\n\\n    bytes32 public constant PORTFOLIO_MANAGER = keccak256(\\\"PORTFOLIO_MANAGER\\\");\\n    bytes32 public constant REWARD_MANAGER = keccak256(\\\"REWARD_MANAGER\\\");\\n\\n    // Only Vault can claiming aave rewards\\n    IAaveIncentivesController public aaveReward;\\n\\n    // ---  events\\n\\n    event PortfolioManagerUpdated(address portfolioManager);\\n    event RewardManagerUpdated(address rewardManager);\\n    event AaveRewardRemoved(address aaveReward);\\n\\n    // ---  modifiers\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    modifier onlyPortfolioManager() {\\n        require(hasRole(PORTFOLIO_MANAGER, msg.sender), \\\"Caller is not the PORTFOLIO_MANAGER\\\");\\n        _;\\n    }\\n\\n    modifier onlyRewardManager() {\\n        require(hasRole(REWARD_MANAGER, msg.sender), \\\"Caller is not the REWARD_MANAGER\\\");\\n        _;\\n    }\\n\\n    // ---  constructor\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    // ---  setters\\n\\n    function setPortfolioManager(address _portfolioManager) public onlyAdmin {\\n        require(_portfolioManager != address(0), \\\"Zero address not allowed\\\");\\n        grantRole(PORTFOLIO_MANAGER, _portfolioManager);\\n        emit PortfolioManagerUpdated(_portfolioManager);\\n    }\\n\\n    function setRewardManager(address _rewardManager) public onlyAdmin {\\n        require(_rewardManager != address(0), \\\"Zero address not allowed\\\");\\n        grantRole(REWARD_MANAGER, _rewardManager);\\n        emit RewardManagerUpdated(_rewardManager);\\n    }\\n\\n\\n    function setAaveReward(address _aaveReward) public onlyAdmin {\\n        require(_aaveReward != address(0), \\\"Zero address not allowed\\\");\\n        aaveReward = IAaveIncentivesController(_aaveReward);\\n        emit AaveRewardRemoved(_aaveReward);\\n    }\\n\\n    // ---  logic\\n\\n    function claimRewardAave(address[] calldata assets, uint256 amount) public onlyRewardManager {\\n        aaveReward.claimRewards(assets, amount, address(this));\\n    }\\n\\n\\n    /**\\n     * @dev proxy to IERC20().totalSupply();\\n     */\\n    function totalSupply(IERC20 token) external view returns (uint256) {\\n        return token.totalSupply();\\n    }\\n\\n    /**\\n     * @dev proxy to IERC20().balanceOf();\\n     */\\n    function balanceOf(IERC20 token, address account) external view returns (uint256) {\\n        return token.balanceOf(account);\\n    }\\n\\n    /**\\n     * @dev proxy to IERC20().allowance();\\n     */\\n    function allowance(\\n        IERC20 token,\\n        address owner,\\n        address spender\\n    ) external view returns (uint256) {\\n        return token.allowance(owner, spender);\\n    }\\n\\n    /**\\n     * @dev proxy to IERC20().approve();\\n     */\\n    function approve(\\n        IERC20 token,\\n        address spender,\\n        uint256 amount\\n    ) external onlyPortfolioManager returns (bool) {\\n        return token.approve(spender, amount);\\n    }\\n\\n    /**\\n     * @dev proxy to IERC20().transfer();\\n     */\\n    function transfer(\\n        IERC20 token,\\n        address recipient,\\n        uint256 amount\\n    ) external onlyPortfolioManager returns (bool) {\\n        return token.transfer(recipient, amount);\\n    }\\n\\n    /**\\n     * @dev proxy to IERC20().transferFrom();\\n     */\\n    function transferFrom(\\n        IERC20 token,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external onlyPortfolioManager returns (bool) {\\n        return token.transferFrom(sender, recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x75e9130134a82045cdb5b010c743047744b19db3a62faba1b4dcb94a2520dfba\",\"license\":\"MIT\"},\"contracts/connectors/aave/interfaces/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IAaveIncentivesController {\\n\\n    event RewardsAccrued(address indexed user, uint256 amount);\\n\\n    event RewardsClaimed(\\n        address indexed user,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    event RewardsClaimed(\\n        address indexed user,\\n        address indexed to,\\n        address indexed claimer,\\n        uint256 amount\\n    );\\n\\n    event ClaimerSet(address indexed user, address indexed claimer);\\n\\n    /**\\n     * @dev Whitelists an address to claim the rewards on behalf of another address\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n    function setClaimer(address user, address claimer) external;\\n\\n    /**\\n     * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n   * @param user The address of the user\\n   * @return The claimer address\\n   */\\n    function getClaimer(address user) external view returns (address);\\n\\n    /**\\n     * @dev Configure assets for a certain rewards emission\\n   * @param assets The assets to incentivize\\n   * @param emissionsPerSecond The emission for each asset\\n   */\\n    function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond)\\n    external;\\n\\n\\n    /**\\n     * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param asset The address of the user\\n   * @param userBalance The balance of the user of the asset in the lending pool\\n   * @param totalSupply The total supply of the asset in the lending pool\\n   **/\\n    function handleAction(\\n        address asset,\\n        uint256 userBalance,\\n        uint256 totalSupply\\n    ) external;\\n\\n    /**\\n     * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n   * @param user The address of the user\\n   * @return The rewards\\n   **/\\n    function getRewardsBalance(address[] calldata assets, address user)\\n    external\\n    view\\n    returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n   * @param amount Amount of rewards to claim\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n   * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param amount Amount of rewards to claim\\n   * @param user Address to check and claim rewards\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n    function claimRewardsOnBehalf(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address user,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev returns the unclaimed rewards of the user\\n   * @param user the address of the user\\n   * @return the unclaimed user rewards\\n   */\\n    function getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n    /**\\n    * @dev for backward compatibility with previous implementation of the Incentives controller\\n  */\\n    function REWARD_TOKEN() external view returns (address);\\n}\\n\",\"keccak256\":\"0xbf9877dc6ded4a81eb08f0db651e28b0789a03b38d1fe3afeb4e768894c66d77\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IMark2Market.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IMark2Market {\\n    struct AssetPrices {\\n        address asset;\\n        uint256 amountInVault; // balance on Vault\\n        uint256 usdcPriceInVault; // current total price of balance at USDC\\n        //\\n        uint256 usdcPriceDenominator;\\n        uint256 usdcSellPrice;\\n        uint256 usdcBuyPrice;\\n        //\\n        uint256 decimals;\\n        string name;\\n        string symbol;\\n    }\\n\\n    struct TotalAssetPrices {\\n        AssetPrices[] assetPrices;\\n        uint256 totalUsdcPrice;\\n    }\\n\\n    struct BalanceAssetPrices {\\n        address asset;\\n        int256 diffToTarget; // diff usdcPriceInVault to target in portfolio\\n        bool targetIsZero; // mean that we should trade all tokens to zero ownership\\n    }\\n\\n    function assetPrices() external view returns (TotalAssetPrices memory);\\n\\n    function totalUsdcPrice() external view returns (uint256);\\n\\n    function assetPricesForBalance() external view returns (BalanceAssetPrices[] memory);\\n\\n    function assetPricesForBalance(address withdrawToken, uint256 withdrawAmount) external view returns (BalanceAssetPrices[] memory);\\n}\\n\",\"keccak256\":\"0x4bb763b2c3623fc2857547a5970e09789fc193590a005b6693d3df9545d9e69a\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPriceGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IPriceGetter {\\n    /**\\n     * Token buy price at USDC. Amount of USDC we should spend to buy one token.\\n     * Returned value is [USDC/token]\\n     * Usage: tokenAmount = usdcAmount * denominator() / getUsdcBuyPrice()\\n     * Normilized to 10**18\\n     */\\n    function getUsdcBuyPrice() external view returns (uint256);\\n\\n    /**\\n     * Token sell price at USDC. Amount of USDC we got if sell one token.\\n     * Returned value is [USDC/token]\\n     * Usage: usdcAmount = tokenAmount * getUsdcSellPrice() / denominator()\\n     * Normilized to 10**18\\n     */\\n    function getUsdcSellPrice() external view returns (uint256);\\n\\n    /**\\n     * Denominator for normalization. Default 10**18.\\n     */\\n    function denominator() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2ffb91797f2de81cf176b8ebe0be12d7250279b61f1ee7f8d37ae41e00ecb04e\",\"license\":\"MIT\"},\"contracts/registries/Portfolio.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract Portfolio is AccessControl {\\n    uint256 public constant TOTAL_WEIGHT = 100000; // 100000 ~ 100%\\n\\n    mapping(address => uint256) public assetInfoPositions;\\n    AssetInfo[] public assetInfos;\\n    mapping(address => uint256) public assetWeightPositions;\\n    AssetWeight[] public assetWeights;\\n\\n    event UpdatedAssetWeight(\\n        uint256 index,\\n        address asset,\\n        uint256 minWeight,\\n        uint256 targetWeight,\\n        uint256 maxWeight\\n    );\\n    event UpdatedAssetInfo(uint256 index, address asset, address priceGetter);\\n\\n    struct AssetWeight {\\n        address asset;\\n        uint256 minWeight;\\n        uint256 targetWeight;\\n        uint256 maxWeight;\\n    }\\n\\n    struct AssetInfo {\\n        address asset;\\n        address priceGetter;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function setAssetInfos(AssetInfo[] calldata _assetInfos) external onlyAdmin {\\n        for (uint8 i = 0; i < _assetInfos.length; i++) {\\n            _addAssetInfoAt(_assetInfos[i], i);\\n        }\\n        // truncate array if needed\\n        if (assetInfos.length > _assetInfos.length) {\\n            uint256 removeCount = assetInfos.length - _assetInfos.length;\\n            for (uint8 i = 0; i < removeCount; i++) {\\n                //TODO: do we need remove from mapping?\\n                assetInfos.pop();\\n            }\\n        }\\n    }\\n\\n    function addAssetInfoAt(AssetInfo calldata assetInfo, uint256 index) external onlyAdmin {\\n        _addAssetInfoAt(assetInfo, index);\\n    }\\n\\n    function _addAssetInfoAt(AssetInfo calldata assetInfo, uint256 index) internal {\\n        uint256 currentlength = assetInfos.length;\\n        // expand array id needed\\n        if (currentlength == 0 || currentlength - 1 < index) {\\n            uint256 additionalCount = index - currentlength + 1;\\n            for (uint8 i = 0; i < additionalCount; i++) {\\n                assetInfos.push();\\n            }\\n        }\\n        assetInfos[index] = assetInfo;\\n        assetInfoPositions[assetInfo.asset] = index;\\n        emit UpdatedAssetInfo(index, assetInfo.asset, assetInfo.priceGetter);\\n    }\\n\\n    function setWeights(AssetWeight[] calldata _assetWeights) external onlyAdmin {\\n        uint256 totalTarget = 0;\\n        for (uint8 i = 0; i < _assetWeights.length; i++) {\\n            AssetWeight memory assetWeight = _assetWeights[i];\\n            require(assetWeight.asset != address(0), \\\"weight without asset\\\");\\n            require(\\n                assetWeight.minWeight <= assetWeight.targetWeight,\\n                \\\"minWeight shouldn't higher than targetWeight\\\"\\n            );\\n            require(\\n                assetWeight.targetWeight <= assetWeight.maxWeight,\\n                \\\"targetWeight shouldn't higher than maxWeight\\\"\\n            );\\n            totalTarget += assetWeight.targetWeight;\\n        }\\n        require(totalTarget == TOTAL_WEIGHT, \\\"Total target should equal to TOTAL_WEIGHT\\\");\\n\\n        for (uint8 i = 0; i < _assetWeights.length; i++) {\\n            _addWeightAt(_assetWeights[i], i);\\n            assetWeightPositions[assetWeights[i].asset] = i;\\n        }\\n\\n        // truncate if need\\n        if (assetWeights.length > _assetWeights.length) {\\n            uint256 removeCount = assetWeights.length - _assetWeights.length;\\n            for (uint8 i = 0; i < removeCount; i++) {\\n                assetWeights.pop();\\n            }\\n        }\\n    }\\n\\n    function _addWeightAt(AssetWeight memory assetWeight, uint256 index) internal {\\n        uint256 currentLength = assetWeights.length;\\n        // expand if need\\n        if (currentLength == 0 || currentLength - 1 < index) {\\n            uint256 additionalCount = index - currentLength + 1;\\n            for (uint8 i = 0; i < additionalCount; i++) {\\n                assetWeights.push();\\n            }\\n        }\\n        assetWeights[index] = assetWeight;\\n        emit UpdatedAssetWeight(\\n            index,\\n            assetWeight.asset,\\n            assetWeight.minWeight,\\n            assetWeight.targetWeight,\\n            assetWeight.maxWeight\\n        );\\n    }\\n\\n    function getAssetInfo(address asset) external view returns (AssetInfo memory) {\\n        return assetInfos[assetInfoPositions[asset]];\\n    }\\n\\n    function getAllAssetInfos() external view returns (AssetInfo[] memory) {\\n        return assetInfos;\\n    }\\n\\n    function getAssetWeight(address asset) external view returns (AssetWeight memory) {\\n        return assetWeights[assetWeightPositions[asset]];\\n    }\\n\\n    function getAllAssetWeights() external view returns (AssetWeight[] memory) {\\n        return assetWeights;\\n    }\\n}\\n\",\"keccak256\":\"0x4d8207ed3e77db4b6bb55c521645fa68af622fd6b49f88a6ada1e6743ce0a39a\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611c858061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063734bd75d11610071578063734bd75d146101235780638258c132146101365780638da5cb5b1461014c5780639a707d871461015d578063f2fde38b14610172578063fbfa77cf1461018557600080fd5b8063044337ca146100ae57806316ede016146100c357806358a8316c146100f35780636817031b14610108578063715018a61461011b575b600080fd5b6100c16100bc366004611416565b610198565b005b6002546100d6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100fb610271565b6040516100ea919061175a565b6100c1610116366004611416565b610283565b6100c161034c565b6100fb61013136600461143a565b610382565b61013e610673565b6040519081526020016100ea565b6000546001600160a01b03166100d6565b610165610905565b6040516100ea9190611806565b6100c1610180366004611416565b610e20565b6001546100d6906001600160a01b031681565b6000546001600160a01b031633146101cb5760405162461bcd60e51b81526004016101c2906117d1565b60405180910390fd5b6001600160a01b03811661021c5760405162461bcd60e51b815260206004820152601860248201527716995c9bc81859191c995cdcc81b9bdd08185b1b1bddd95960421b60448201526064016101c2565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527fd26983974b34482bf34320997312ff880f8cc6e27b9136e9bf2140b1b6ef46a5906020015b60405180910390a150565b606061027e600080610382565b905090565b6000546001600160a01b031633146102ad5760405162461bcd60e51b81526004016101c2906117d1565b6001600160a01b0381166102fe5760405162461bcd60e51b815260206004820152601860248201527716995c9bc81859191c995cdcc81b9bdd08185b1b1bddd95960421b60448201526064016101c2565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f161584aed96e7f34998117c9ad67e2d21ff46d2a42775c22b11ed282f3c7b2cd90602001610266565b6000546001600160a01b031633146103765760405162461bcd60e51b81526004016101c2906117d1565b6103806000610ebb565b565b60606001600160a01b0383161561042c576000836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156103ce57600080fd5b505afa1580156103e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040691906116a4565b610411906012611b40565b61041c90600a611a20565b90506104288184611acb565b9250505b6000610436610673565b9050828110156104895761044983610f0b565b61045282610f0b565b6040516020016104639291906116f3565b60408051601f198184030181529082905262461bcd60e51b82526101c2916004016117be565b6104938382611b29565b90506000600260009054906101000a90046001600160a01b03166001600160a01b0316633ff94f046040518163ffffffff1660e01b815260040160006040518083038186803b1580156104e557600080fd5b505afa1580156104f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610521919081019061150c565b805190915060008167ffffffffffffffff81111561054157610541611c24565b60405190808252806020026020018201604052801561058c57816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161055f5790505b50905060005b828160ff161015610666576000848260ff16815181106105b4576105b4611c0e565b602002602001015190506000806105cb8884611013565b909250905089158015906105f457508a6001600160a01b031683600001516001600160a01b0316145b15610606576106038a83611970565b91505b604051806060016040528084600001516001600160a01b03168152602001838152602001821515815250858560ff168151811061064557610645611c0e565b6020026020010181905250505050808061065e90611bae565b915050610592565b5093505050505b92915050565b600080600260009054906101000a90046001600160a01b03166001600160a01b0316633ff94f046040518163ffffffff1660e01b815260040160006040518083038186803b1580156106c457600080fd5b505afa1580156106d8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610700919081019061150c565b8051909150600090815b818160ff1610156108fc576000848260ff168151811061072c5761072c611c0e565b6020026020010151905060006107458260000151611290565b60025483516040516357d6970b60e11b81526001600160a01b03918216600482015292935060009291169063afad2e1690602401604080518083038186803b15801561079057600080fd5b505afa1580156107a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c8919061166f565b90506000816020015190506000816001600160a01b03166396ce07956040518163ffffffff1660e01b815260040160206040518083038186803b15801561080e57600080fd5b505afa158015610822573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610846919061168b565b90506000826001600160a01b0316632b8455f16040518163ffffffff1660e01b815260040160206040518083038186803b15801561088357600080fd5b505afa158015610897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bb919061168b565b90506000826108ca8388611acb565b6108d491906119c9565b90506108e0818b6119b1565b99505050505050505080806108f490611bae565b91505061070a565b50909392505050565b6040805180820190915260608152600060208201526002546040805163035d61bf60e31b815290516000926001600160a01b031691631aeb0df89160048083019286929190829003018186803b15801561095e57600080fd5b505afa158015610972573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261099a9190810190611466565b8051909150600090818167ffffffffffffffff8111156109bc576109bc611c24565b604051908082528060200260200182016040528015610a4557816020015b610a3260405180610120016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160608152602001606081525090565b8152602001906001900390816109da5790505b50905060005b828160ff161015610e03576000858260ff1681518110610a6d57610a6d611c0e565b602002602001015190506000610a868260000151611290565b90506000826020015190506000816001600160a01b03166396ce07956040518163ffffffff1660e01b815260040160206040518083038186803b158015610acc57600080fd5b505afa158015610ae0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b04919061168b565b90506000826001600160a01b0316632b8455f16040518163ffffffff1660e01b815260040160206040518083038186803b158015610b4157600080fd5b505afa158015610b55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b79919061168b565b90506000836001600160a01b031663ea2497846040518163ffffffff1660e01b815260040160206040518083038186803b158015610bb657600080fd5b505afa158015610bca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bee919061168b565b9050600083610bfd8488611acb565b610c0791906119c9565b9050610c13818c6119b1565b9a5060405180610120016040528088600001516001600160a01b0316815260200187815260200182815260200185815260200184815260200183815260200188600001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610c8f57600080fd5b505afa158015610ca3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc791906116a4565b60ff16815260200188600001516001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b158015610d0c57600080fd5b505afa158015610d20573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d4891908101906115e4565b815260200188600001516001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610d8a57600080fd5b505afa158015610d9e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610dc691908101906115e4565b815250898960ff1681518110610dde57610dde611c0e565b6020026020010181905250505050505050508080610dfb90611bae565b915050610a4b565b506040805180820190915290815260208101929092525092915050565b6000546001600160a01b03163314610e4a5760405162461bcd60e51b81526004016101c2906117d1565b6001600160a01b038116610eaf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101c2565b610eb881610ebb565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606081610f2f5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610f595780610f4381611b93565b9150610f529050600a836119c9565b9150610f33565b60008167ffffffffffffffff811115610f7457610f74611c24565b6040519080825280601f01601f191660200182016040528015610f9e576020820181803683370190505b509050815b851561100a57610fb4600182611b29565b9050610fc1600a87611bce565b610fcc9060306119b1565b60f81b828281518110610fe157610fe1611c0e565b60200101906001600160f81b031916908160001a905350611003600a876119c9565b9550610fa3565b50949350505050565b6000806000836000015190506000600260009054906101000a90046001600160a01b03166001600160a01b031663ed2a2f9d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561106f57600080fd5b505afa158015611083573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a7919061168b565b60408601516110b69088611acb565b6110c091906119c9565b6002546040516357d6970b60e11b81526001600160a01b0385811660048301529293506000929091169063afad2e1690602401604080518083038186803b15801561110a57600080fd5b505afa15801561111e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611142919061166f565b90506000816020015190506000816001600160a01b03166396ce07956040518163ffffffff1660e01b815260040160206040518083038186803b15801561118857600080fd5b505afa15801561119c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c0919061168b565b90506000826001600160a01b031663ea2497846040518163ffffffff1660e01b815260040160206040518083038186803b1580156111fd57600080fd5b505afa158015611211573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611235919061168b565b90506000816112448488611acb565b61124e91906119c9565b9050600061125b88611290565b905060008261126c57506001611270565b5060005b600061127c8385611aea565b9e919d50909b505050505050505050505050565b6001546040516370a0823160e01b81526001600160a01b0391821660048201526000918291908416906370a082319060240160206040518083038186803b1580156112da57600080fd5b505afa1580156112ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611312919061168b565b90506000836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561134f57600080fd5b505afa158015611363573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138791906116a4565b611392906012611b40565b61139d90600a611a20565b90506113a98183611acb565b949350505050565b6000604082840312156113c357600080fd5b6040516040810181811067ffffffffffffffff821117156113e6576113e6611c24565b806040525080915082516113f981611c3a565b8152602083015161140981611c3a565b6020919091015292915050565b60006020828403121561142857600080fd5b813561143381611c3a565b9392505050565b6000806040838503121561144d57600080fd5b823561145881611c3a565b946020939093013593505050565b6000602080838503121561147957600080fd5b825167ffffffffffffffff81111561149057600080fd5b8301601f810185136114a157600080fd5b80516114b46114af8261194c565b61191b565b80828252848201915084840188868560061b87010111156114d457600080fd5b600094505b83851015611500576114eb89826113b1565b835260019490940193918501916040016114d9565b50979650505050505050565b6000602080838503121561151f57600080fd5b825167ffffffffffffffff81111561153657600080fd5b8301601f8101851361154757600080fd5b80516115556114af8261194c565b80828252848201915084840188868560071b870101111561157557600080fd5b60009450845b848110156115d657608080838c031215611593578687fd5b61159b6118f2565b83516115a681611c3a565b8152838901518982015260408085015190820152606080850151908201528552938701939091019060010161157b565b509098975050505050505050565b6000602082840312156115f657600080fd5b815167ffffffffffffffff8082111561160e57600080fd5b818401915084601f83011261162257600080fd5b81518181111561163457611634611c24565b611647601f8201601f191660200161191b565b915080825285602082850101111561165e57600080fd5b61100a816020840160208601611b63565b60006040828403121561168157600080fd5b61143383836113b1565b60006020828403121561169d57600080fd5b5051919050565b6000602082840312156116b657600080fd5b815160ff8116811461143357600080fd5b600081518084526116df816020860160208601611b63565b601f01601f19169290920160200192915050565b7f5769746864726177206d6f7265207468616e20746f74616c3a2000000000000081526000835161172b81601a850160208801611b63565b620101f160ed1b601a91840191820152835161174e81601d840160208801611b63565b01601d01949350505050565b602080825282518282018190526000919060409081850190868401855b828110156117b157815180516001600160a01b03168552868101518786015285015115158585015260609093019290850190600101611777565b5091979650505050505050565b60208152600061143360208301846116c7565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208083526060808401855160408085880152828251808552608094508489019150848160051b8a0101878501945060005b828110156118dc578a8203607f19018452855180516001600160a01b03168352610120818b0151848c01528682015187850152898201518a850152888201518985015260a0808301519085015260c0808301519085015260e0808301518186018390526118a9838701826116c7565b9250505061010080830151925084820381860152506118c881836116c7565b978b0197958b01959350505060010161183a565b5096909901519190970152509195945050505050565b6040516080810167ffffffffffffffff8111828210171561191557611915611c24565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561194457611944611c24565b604052919050565b600067ffffffffffffffff82111561196657611966611c24565b5060051b60200190565b600080821280156001600160ff1b038490038513161561199257611992611be2565b600160ff1b83900384128116156119ab576119ab611be2565b50500190565b600082198211156119c4576119c4611be2565b500190565b6000826119d8576119d8611bf8565b500490565b600181815b80851115611a185781600019048211156119fe576119fe611be2565b80851615611a0b57918102915b93841c93908002906119e2565b509250929050565b600061143360ff841683600082611a395750600161066d565b81611a465750600061066d565b8160018114611a5c5760028114611a6657611a82565b600191505061066d565b60ff841115611a7757611a77611be2565b50506001821b61066d565b5060208310610133831016604e8410600b8410161715611aa5575081810a61066d565b611aaf83836119dd565b8060001904821115611ac357611ac3611be2565b029392505050565b6000816000190483118215151615611ae557611ae5611be2565b500290565b60008083128015600160ff1b850184121615611b0857611b08611be2565b6001600160ff1b0384018313811615611b2357611b23611be2565b50500390565b600082821015611b3b57611b3b611be2565b500390565b600060ff821660ff841680821015611b5a57611b5a611be2565b90039392505050565b60005b83811015611b7e578181015183820152602001611b66565b83811115611b8d576000848401525b50505050565b6000600019821415611ba757611ba7611be2565b5060010190565b600060ff821660ff811415611bc557611bc5611be2565b60010192915050565b600082611bdd57611bdd611bf8565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610eb857600080fdfea26469706673582212209bc62e04c4367b27a3da372333282a024a2a0cbc72c4c236118960b5e17397e164736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063734bd75d11610071578063734bd75d146101235780638258c132146101365780638da5cb5b1461014c5780639a707d871461015d578063f2fde38b14610172578063fbfa77cf1461018557600080fd5b8063044337ca146100ae57806316ede016146100c357806358a8316c146100f35780636817031b14610108578063715018a61461011b575b600080fd5b6100c16100bc366004611416565b610198565b005b6002546100d6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100fb610271565b6040516100ea919061175a565b6100c1610116366004611416565b610283565b6100c161034c565b6100fb61013136600461143a565b610382565b61013e610673565b6040519081526020016100ea565b6000546001600160a01b03166100d6565b610165610905565b6040516100ea9190611806565b6100c1610180366004611416565b610e20565b6001546100d6906001600160a01b031681565b6000546001600160a01b031633146101cb5760405162461bcd60e51b81526004016101c2906117d1565b60405180910390fd5b6001600160a01b03811661021c5760405162461bcd60e51b815260206004820152601860248201527716995c9bc81859191c995cdcc81b9bdd08185b1b1bddd95960421b60448201526064016101c2565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527fd26983974b34482bf34320997312ff880f8cc6e27b9136e9bf2140b1b6ef46a5906020015b60405180910390a150565b606061027e600080610382565b905090565b6000546001600160a01b031633146102ad5760405162461bcd60e51b81526004016101c2906117d1565b6001600160a01b0381166102fe5760405162461bcd60e51b815260206004820152601860248201527716995c9bc81859191c995cdcc81b9bdd08185b1b1bddd95960421b60448201526064016101c2565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f161584aed96e7f34998117c9ad67e2d21ff46d2a42775c22b11ed282f3c7b2cd90602001610266565b6000546001600160a01b031633146103765760405162461bcd60e51b81526004016101c2906117d1565b6103806000610ebb565b565b60606001600160a01b0383161561042c576000836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156103ce57600080fd5b505afa1580156103e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040691906116a4565b610411906012611b40565b61041c90600a611a20565b90506104288184611acb565b9250505b6000610436610673565b9050828110156104895761044983610f0b565b61045282610f0b565b6040516020016104639291906116f3565b60408051601f198184030181529082905262461bcd60e51b82526101c2916004016117be565b6104938382611b29565b90506000600260009054906101000a90046001600160a01b03166001600160a01b0316633ff94f046040518163ffffffff1660e01b815260040160006040518083038186803b1580156104e557600080fd5b505afa1580156104f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610521919081019061150c565b805190915060008167ffffffffffffffff81111561054157610541611c24565b60405190808252806020026020018201604052801561058c57816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161055f5790505b50905060005b828160ff161015610666576000848260ff16815181106105b4576105b4611c0e565b602002602001015190506000806105cb8884611013565b909250905089158015906105f457508a6001600160a01b031683600001516001600160a01b0316145b15610606576106038a83611970565b91505b604051806060016040528084600001516001600160a01b03168152602001838152602001821515815250858560ff168151811061064557610645611c0e565b6020026020010181905250505050808061065e90611bae565b915050610592565b5093505050505b92915050565b600080600260009054906101000a90046001600160a01b03166001600160a01b0316633ff94f046040518163ffffffff1660e01b815260040160006040518083038186803b1580156106c457600080fd5b505afa1580156106d8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610700919081019061150c565b8051909150600090815b818160ff1610156108fc576000848260ff168151811061072c5761072c611c0e565b6020026020010151905060006107458260000151611290565b60025483516040516357d6970b60e11b81526001600160a01b03918216600482015292935060009291169063afad2e1690602401604080518083038186803b15801561079057600080fd5b505afa1580156107a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c8919061166f565b90506000816020015190506000816001600160a01b03166396ce07956040518163ffffffff1660e01b815260040160206040518083038186803b15801561080e57600080fd5b505afa158015610822573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610846919061168b565b90506000826001600160a01b0316632b8455f16040518163ffffffff1660e01b815260040160206040518083038186803b15801561088357600080fd5b505afa158015610897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bb919061168b565b90506000826108ca8388611acb565b6108d491906119c9565b90506108e0818b6119b1565b99505050505050505080806108f490611bae565b91505061070a565b50909392505050565b6040805180820190915260608152600060208201526002546040805163035d61bf60e31b815290516000926001600160a01b031691631aeb0df89160048083019286929190829003018186803b15801561095e57600080fd5b505afa158015610972573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261099a9190810190611466565b8051909150600090818167ffffffffffffffff8111156109bc576109bc611c24565b604051908082528060200260200182016040528015610a4557816020015b610a3260405180610120016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160608152602001606081525090565b8152602001906001900390816109da5790505b50905060005b828160ff161015610e03576000858260ff1681518110610a6d57610a6d611c0e565b602002602001015190506000610a868260000151611290565b90506000826020015190506000816001600160a01b03166396ce07956040518163ffffffff1660e01b815260040160206040518083038186803b158015610acc57600080fd5b505afa158015610ae0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b04919061168b565b90506000826001600160a01b0316632b8455f16040518163ffffffff1660e01b815260040160206040518083038186803b158015610b4157600080fd5b505afa158015610b55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b79919061168b565b90506000836001600160a01b031663ea2497846040518163ffffffff1660e01b815260040160206040518083038186803b158015610bb657600080fd5b505afa158015610bca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bee919061168b565b9050600083610bfd8488611acb565b610c0791906119c9565b9050610c13818c6119b1565b9a5060405180610120016040528088600001516001600160a01b0316815260200187815260200182815260200185815260200184815260200183815260200188600001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610c8f57600080fd5b505afa158015610ca3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc791906116a4565b60ff16815260200188600001516001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b158015610d0c57600080fd5b505afa158015610d20573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d4891908101906115e4565b815260200188600001516001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610d8a57600080fd5b505afa158015610d9e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610dc691908101906115e4565b815250898960ff1681518110610dde57610dde611c0e565b6020026020010181905250505050505050508080610dfb90611bae565b915050610a4b565b506040805180820190915290815260208101929092525092915050565b6000546001600160a01b03163314610e4a5760405162461bcd60e51b81526004016101c2906117d1565b6001600160a01b038116610eaf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101c2565b610eb881610ebb565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606081610f2f5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610f595780610f4381611b93565b9150610f529050600a836119c9565b9150610f33565b60008167ffffffffffffffff811115610f7457610f74611c24565b6040519080825280601f01601f191660200182016040528015610f9e576020820181803683370190505b509050815b851561100a57610fb4600182611b29565b9050610fc1600a87611bce565b610fcc9060306119b1565b60f81b828281518110610fe157610fe1611c0e565b60200101906001600160f81b031916908160001a905350611003600a876119c9565b9550610fa3565b50949350505050565b6000806000836000015190506000600260009054906101000a90046001600160a01b03166001600160a01b031663ed2a2f9d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561106f57600080fd5b505afa158015611083573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a7919061168b565b60408601516110b69088611acb565b6110c091906119c9565b6002546040516357d6970b60e11b81526001600160a01b0385811660048301529293506000929091169063afad2e1690602401604080518083038186803b15801561110a57600080fd5b505afa15801561111e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611142919061166f565b90506000816020015190506000816001600160a01b03166396ce07956040518163ffffffff1660e01b815260040160206040518083038186803b15801561118857600080fd5b505afa15801561119c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c0919061168b565b90506000826001600160a01b031663ea2497846040518163ffffffff1660e01b815260040160206040518083038186803b1580156111fd57600080fd5b505afa158015611211573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611235919061168b565b90506000816112448488611acb565b61124e91906119c9565b9050600061125b88611290565b905060008261126c57506001611270565b5060005b600061127c8385611aea565b9e919d50909b505050505050505050505050565b6001546040516370a0823160e01b81526001600160a01b0391821660048201526000918291908416906370a082319060240160206040518083038186803b1580156112da57600080fd5b505afa1580156112ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611312919061168b565b90506000836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561134f57600080fd5b505afa158015611363573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138791906116a4565b611392906012611b40565b61139d90600a611a20565b90506113a98183611acb565b949350505050565b6000604082840312156113c357600080fd5b6040516040810181811067ffffffffffffffff821117156113e6576113e6611c24565b806040525080915082516113f981611c3a565b8152602083015161140981611c3a565b6020919091015292915050565b60006020828403121561142857600080fd5b813561143381611c3a565b9392505050565b6000806040838503121561144d57600080fd5b823561145881611c3a565b946020939093013593505050565b6000602080838503121561147957600080fd5b825167ffffffffffffffff81111561149057600080fd5b8301601f810185136114a157600080fd5b80516114b46114af8261194c565b61191b565b80828252848201915084840188868560061b87010111156114d457600080fd5b600094505b83851015611500576114eb89826113b1565b835260019490940193918501916040016114d9565b50979650505050505050565b6000602080838503121561151f57600080fd5b825167ffffffffffffffff81111561153657600080fd5b8301601f8101851361154757600080fd5b80516115556114af8261194c565b80828252848201915084840188868560071b870101111561157557600080fd5b60009450845b848110156115d657608080838c031215611593578687fd5b61159b6118f2565b83516115a681611c3a565b8152838901518982015260408085015190820152606080850151908201528552938701939091019060010161157b565b509098975050505050505050565b6000602082840312156115f657600080fd5b815167ffffffffffffffff8082111561160e57600080fd5b818401915084601f83011261162257600080fd5b81518181111561163457611634611c24565b611647601f8201601f191660200161191b565b915080825285602082850101111561165e57600080fd5b61100a816020840160208601611b63565b60006040828403121561168157600080fd5b61143383836113b1565b60006020828403121561169d57600080fd5b5051919050565b6000602082840312156116b657600080fd5b815160ff8116811461143357600080fd5b600081518084526116df816020860160208601611b63565b601f01601f19169290920160200192915050565b7f5769746864726177206d6f7265207468616e20746f74616c3a2000000000000081526000835161172b81601a850160208801611b63565b620101f160ed1b601a91840191820152835161174e81601d840160208801611b63565b01601d01949350505050565b602080825282518282018190526000919060409081850190868401855b828110156117b157815180516001600160a01b03168552868101518786015285015115158585015260609093019290850190600101611777565b5091979650505050505050565b60208152600061143360208301846116c7565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208083526060808401855160408085880152828251808552608094508489019150848160051b8a0101878501945060005b828110156118dc578a8203607f19018452855180516001600160a01b03168352610120818b0151848c01528682015187850152898201518a850152888201518985015260a0808301519085015260c0808301519085015260e0808301518186018390526118a9838701826116c7565b9250505061010080830151925084820381860152506118c881836116c7565b978b0197958b01959350505060010161183a565b5096909901519190970152509195945050505050565b6040516080810167ffffffffffffffff8111828210171561191557611915611c24565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561194457611944611c24565b604052919050565b600067ffffffffffffffff82111561196657611966611c24565b5060051b60200190565b600080821280156001600160ff1b038490038513161561199257611992611be2565b600160ff1b83900384128116156119ab576119ab611be2565b50500190565b600082198211156119c4576119c4611be2565b500190565b6000826119d8576119d8611bf8565b500490565b600181815b80851115611a185781600019048211156119fe576119fe611be2565b80851615611a0b57918102915b93841c93908002906119e2565b509250929050565b600061143360ff841683600082611a395750600161066d565b81611a465750600061066d565b8160018114611a5c5760028114611a6657611a82565b600191505061066d565b60ff841115611a7757611a77611be2565b50506001821b61066d565b5060208310610133831016604e8410600b8410161715611aa5575081810a61066d565b611aaf83836119dd565b8060001904821115611ac357611ac3611be2565b029392505050565b6000816000190483118215151615611ae557611ae5611be2565b500290565b60008083128015600160ff1b850184121615611b0857611b08611be2565b6001600160ff1b0384018313811615611b2357611b23611be2565b50500390565b600082821015611b3b57611b3b611be2565b500390565b600060ff821660ff841680821015611b5a57611b5a611be2565b90039392505050565b60005b83811015611b7e578181015183820152602001611b66565b83811115611b8d576000848401525b50505050565b6000600019821415611ba757611ba7611be2565b5060010190565b600060ff821660ff811415611bc557611bc5611be2565b60010192915050565b600082611bdd57611bdd611bf8565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610eb857600080fdfea26469706673582212209bc62e04c4367b27a3da372333282a024a2a0cbc72c4c236118960b5e17397e164736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "assetPricesForBalance(address,uint256)": {
        "params": {
          "withdrawAmount": "Not normalized amount to withdraw",
          "withdrawToken": "Token to withdraw"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 389,
        "contract": "contracts/Mark2Market.sol:Mark2Market",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3149,
        "contract": "contracts/Mark2Market.sol:Mark2Market",
        "label": "vault",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Vault)5436"
      },
      {
        "astId": 3152,
        "contract": "contracts/Mark2Market.sol:Mark2Market",
        "label": "portfolio",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(Portfolio)10725"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(Portfolio)10725": {
        "encoding": "inplace",
        "label": "contract Portfolio",
        "numberOfBytes": "20"
      },
      "t_contract(Vault)5436": {
        "encoding": "inplace",
        "label": "contract Vault",
        "numberOfBytes": "20"
      }
    }
  }
}