{
  "address": "0x0Ac85d55ebFc7f7b0cF4c13bb3BD6Eaf3909d62d",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "a3CrvPriceGetter",
          "type": "address"
        }
      ],
      "name": "UpdatedA3CrvPriceGetter",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "a3CrvPriceGetter",
      "outputs": [
        {
          "internalType": "contract A3CrvPriceGetter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "denominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUsdcBuyPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUsdcSellPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "rolemap",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_a3CrvPriceGetter",
          "type": "address"
        }
      ],
      "name": "setA3CrvPriceGetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_actor",
          "type": "address"
        }
      ],
      "name": "setRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x453fa8c02bb85478546eff1fd5b89df903b087e68677167dc71baa4148c50ab8",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x0Ac85d55ebFc7f7b0cF4c13bb3BD6Eaf3909d62d",
    "transactionIndex": 0,
    "gasUsed": "395455",
    "logsBloom": "0x
    "blockHash": "0x514a272bc21e5ef101c485e6001b6b64e63a4fb74bc5006e993fb6cb42d91e6d",
    "transactionHash": "0x453fa8c02bb85478546eff1fd5b89df903b087e68677167dc71baa4148c50ab8",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 21675024,
        "transactionHash": "0x453fa8c02bb85478546eff1fd5b89df903b087e68677167dc71baa4148c50ab8",
        "address": "0x0Ac85d55ebFc7f7b0cF4c13bb3BD6Eaf3909d62d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x514a272bc21e5ef101c485e6001b6b64e63a4fb74bc5006e993fb6cb42d91e6d"
      }
    ],
    "blockNumber": 21675024,
    "cumulativeGasUsed": "395455",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "4b2c02ad00a20f5dc92f2cdd9d4eb77f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a3CrvPriceGetter\",\"type\":\"address\"}],\"name\":\"UpdatedA3CrvPriceGetter\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"a3CrvPriceGetter\",\"outputs\":[{\"internalType\":\"contract A3CrvPriceGetter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsdcBuyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsdcSellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"rolemap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a3CrvPriceGetter\",\"type\":\"address\"}],\"name\":\"setA3CrvPriceGetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_actor\",\"type\":\"address\"}],\"name\":\"setRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"denominator()\":{\"notice\":\"Denominator for normalization. Default 10**18.\"},\"getUsdcBuyPrice()\":{\"notice\":\"Token buy price at USDC. Amount of USDC we should spend to buy one token. Returned value is [USDC/token] Usage: tokenAmount = usdcAmount * denominator() / getUsdcBuyPrice() Normilized to 10**18\"},\"getUsdcSellPrice()\":{\"notice\":\"Token sell price at USDC. Amount of USDC we got if sell one token. Returned value is [USDC/token] Usage: usdcAmount = tokenAmount * getUsdcSellPrice() / denominator() Normilized to 10**18\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/price_getters/A3CrvGaugePriceGetter.sol\":\"A3CrvGaugePriceGetter\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/OwnableExt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableExt is Context {\\n    address private _owner;\\n    mapping(bytes32 => address) public rolemap;\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"OwnableExt: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function setRole(bytes32 _role, address _actor) external onlyOwner {\\n        require(_actor != address(0), \\\"Zero address not allowed\\\");\\n        rolemap[_role] = _actor;\\n        //TODO: \\u0434\\u043e\\u0431\\u0430\\u0432\\u0438\\u0442\\u044c \\u0441\\u043e\\u0431\\u044b\\u0442\\u0438\\u0435\\n    }\\n\\n    modifier onlyRole(bytes32 _role) {\\n        require(rolemap[_role] == _msgSender(), \\\"OwnableExt: caller has not the role\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        require(newOwner != address(0), \\\"Zero address not allowed\\\");\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc1a82972bca3ffd2428a667ce77a7f33c0ebdf1f18eee615059eb57ca6f303c1\",\"license\":\"MIT\"},\"contracts/connectors/curve/interfaces/iCurvePool.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n/// @title Connector to curve->aave \\n/// @notice from https://github.com/curvefi/curve-contract-polygon/blob/master/contracts/pools/aave/StableSwapAave.vy\\n/// @dev check number of coins in pool and add functions  with nesessary  uint256[N_COINS]\\n\\ninterface iCurvePool {\\n\\n// def add_liquidity(_amounts: uint256[N_COINS], _min_mint_amount: uint256, _use_underlying: bool = False) -> uint256:\\nfunction add_liquidity (uint[3] memory _amounts, uint256 _min_mint_amount, bool _use_underlying) external returns (uint256); //check uint[3] memory or calldata\\n\\n /** def remove_liquidity(\\n    _amount: uint256,\\n    _min_amounts: uint256[N_COINS],\\n    _use_underlying: bool = False,\\n) -> uint256[N_COINS]:\\n */\\nfunction remove_liquidity (uint256 _amounts, uint[3] memory _min_amounts, bool _use_underlying) external returns (uint256[3] memory ); //check uint[3] memory or calldata\\nfunction underlying_coins (uint i ) external view returns (address);\\nfunction lp_token () external view returns (address);\\nfunction calc_token_amount(uint[3] memory _amounts, bool _is_deposite) external view  returns (uint256);\\nfunction coins(uint256 i) external view returns (address);\\nfunction get_virtual_price() external view returns (uint256);\\n// StableSwap.get_dy(i: int128, j: int128, _dx: uint256) \\u2192 uint256: view\\nfunction get_dy(int128 i, int128 j, uint256 _dx ) external view returns (uint256);\\nfunction calc_withdraw_one_coin(uint256 _amount, int128 i) external view returns (uint256);\\n//remove_liquidity_one_coin(_token_amount: uint256, i: int128, _min_amount: uint256) \\u2192 uint256\\nfunction remove_liquidity_one_coin(uint256 _token_amount , int128 i, uint256 _min_amount) external returns  (uint256);\\n// StableSwap.remove_liquidity_imbalance(_amounts: uint256[N_COINS], _max_burn_amount: uint256) \\u2192 uint256\\nfunction remove_liquidity_imbalance(uint[3] memory _amounts, uint256 _maxAmount ) external returns (uint256);\\n}\",\"keccak256\":\"0x3acb077e6be9787db66bcc16a0fd6315a81c940302e5f2b27858625b547e0bc8\"},\"contracts/interfaces/IConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/// @title Common inrterface to DeFi protocol connectors\\n/// @author @Stanta\\n/// @notice Every connector have to implement this function\\n/// @dev Choosing of connector releasing by changing address of connector's contract\\ninterface IConnector {\\n    function stake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiar\\n    ) external;\\n\\n    function unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _to\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xf418605c420c689e5cdd7cf9a49d8906f8c5631a629a5d6eea6d9f2eba79fdb8\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IPriceGetter {\\n    /**\\n     * Token buy price at USDC. Amount of USDC we should spend to buy one token.\\n     * Returned value is [USDC/token]\\n     * Usage: tokenAmount = usdcAmount * denominator() / getUsdcBuyPrice()\\n     * Normilized to 10**18\\n     */\\n    function getUsdcBuyPrice() external view returns (uint256);\\n\\n    /**\\n     * Token sell price at USDC. Amount of USDC we got if sell one token.\\n     * Returned value is [USDC/token]\\n     * Usage: usdcAmount = tokenAmount * getUsdcSellPrice() / denominator()\\n     * Normilized to 10**18\\n     */\\n    function getUsdcSellPrice() external view returns (uint256);\\n\\n    /**\\n     * Denominator for normalization. Default 10**18.\\n     */\\n    function denominator() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2ffb91797f2de81cf176b8ebe0be12d7250279b61f1ee7f8d37ae41e00ecb04e\",\"license\":\"MIT\"},\"contracts/price_getters/A3CrvGaugePriceGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../price_getters/AbstractPriceGetter.sol\\\";\\nimport \\\"../price_getters/A3CrvPriceGetter.sol\\\";\\nimport \\\"../interfaces/IConnector.sol\\\";\\nimport \\\"../connectors/curve/interfaces/iCurvePool.sol\\\";\\nimport \\\"../OwnableExt.sol\\\";\\n\\ncontract A3CrvGaugePriceGetter is AbstractPriceGetter, OwnableExt {\\n    A3CrvPriceGetter public a3CrvPriceGetter;\\n\\n    event UpdatedA3CrvPriceGetter(address a3CrvPriceGetter);\\n\\n    function setA3CrvPriceGetter(address _a3CrvPriceGetter) public onlyOwner {\\n        require(_a3CrvPriceGetter != address(0), \\\"Zero address not allowed\\\");\\n        a3CrvPriceGetter = A3CrvPriceGetter(_a3CrvPriceGetter);\\n        emit UpdatedA3CrvPriceGetter(_a3CrvPriceGetter);\\n    }\\n\\n    function getUsdcBuyPrice() external view override returns (uint256) {\\n        // a3CrvGauge is 1:1 to a3Crv\\n        return a3CrvPriceGetter.getUsdcBuyPrice();\\n    }\\n\\n    function getUsdcSellPrice() external view override returns (uint256) {\\n        // a3CrvGauge is 1:1 to a3Crv\\n        return a3CrvPriceGetter.getUsdcSellPrice();\\n    }\\n}\\n\",\"keccak256\":\"0x2f6d2aa261b6071efce4cd2d91951b5fa1377da476e82a27c2b2227d811bff06\",\"license\":\"MIT\"},\"contracts/price_getters/A3CrvPriceGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../price_getters/AbstractPriceGetter.sol\\\";\\nimport \\\"../connectors/curve/interfaces/iCurvePool.sol\\\";\\nimport \\\"../OwnableExt.sol\\\";\\n\\ncontract A3CrvPriceGetter is AbstractPriceGetter, OwnableExt {\\n    iCurvePool public pool;\\n\\n    event UpdatedPool(address pool);\\n\\n    function setPool(address _pool) public onlyOwner {\\n        require(_pool != address(0), \\\"Zero address not allowed\\\");\\n        pool = iCurvePool(_pool);\\n        emit UpdatedPool(_pool);\\n    }\\n\\n    function getUsdcBuyPrice() external view override returns (uint256) {\\n        uint256 virtualPrice = pool.get_virtual_price();\\n        return virtualPrice;\\n    }\\n\\n    function getUsdcSellPrice() external view override returns (uint256) {\\n        uint256 virtualPrice = pool.get_virtual_price();\\n        return virtualPrice;\\n    }\\n}\\n\",\"keccak256\":\"0x09e9aa8e76c01f7c8175782e23a07a20fbe69b1fce0816d29b8004c1bbc6ae43\",\"license\":\"MIT\"},\"contracts/price_getters/AbstractPriceGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../interfaces/IPriceGetter.sol\\\";\\n\\ncontract AbstractPriceGetter is IPriceGetter {\\n    uint256 public constant DENOMINATOR = 10**18;\\n\\n    function getUsdcBuyPrice() external view virtual override returns (uint256) {\\n        return DENOMINATOR;\\n    }\\n\\n    function getUsdcSellPrice() external view virtual override returns (uint256) {\\n        return DENOMINATOR;\\n    }\\n\\n    function denominator() external view virtual override returns (uint256) {\\n        return DENOMINATOR;\\n    }\\n}\\n\",\"keccak256\":\"0x71a4dc4a01bae2264bd097e07ea93ca929ca304390677644861fb8205cc0a705\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b6100c9565b6001600160a01b0381166100795760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604482015260640160405180910390fd5b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6105b6806100d86000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638da5cb5b116100715780638da5cb5b1461013a578063918f86741461014b57806396ce07951461015a578063dff8720314610168578063ea2497841461017b578063f2fde38b1461018357600080fd5b80632b8455f1146100ae5780632caa60af146100c95780632dc10a54146100f45780635d5c33821461011d578063715018a614610132575b600080fd5b6100b6610196565b6040519081526020015b60405180910390f35b6002546100dc906001600160a01b031681565b6040516001600160a01b0390911681526020016100c0565b6100dc6101023660046104a8565b6001602052600090815260409020546001600160a01b031681565b61013061012b366004610486565b610218565b005b6101306102c5565b6000546001600160a01b03166100dc565b6100b6670de0b6b3a764000081565b670de0b6b3a76400006100b6565b6101306101763660046104c1565b6102fb565b6100b6610379565b610130610191366004610486565b6103be565b60025460408051632b8455f160e01b815290516000926001600160a01b031691632b8455f1916004808301926020929190829003018186803b1580156101db57600080fd5b505afa1580156101ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021391906104ed565b905090565b6000546001600160a01b0316331461024b5760405162461bcd60e51b815260040161024290610506565b60405180910390fd5b6001600160a01b0381166102715760405162461bcd60e51b815260040161024290610549565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f141c66e26ced3b033749b13f5b0cdef42b6399f107ef096dafff2f23b557ae379060200160405180910390a150565b6000546001600160a01b031633146102ef5760405162461bcd60e51b815260040161024290610506565b6102f960006103f4565b565b6000546001600160a01b031633146103255760405162461bcd60e51b815260040161024290610506565b6001600160a01b03811661034b5760405162461bcd60e51b815260040161024290610549565b60009182526001602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b60025460408051633a8925e160e21b815290516000926001600160a01b03169163ea249784916004808301926020929190829003018186803b1580156101db57600080fd5b6000546001600160a01b031633146103e85760405162461bcd60e51b815260040161024290610506565b6103f1816103f4565b50565b6001600160a01b03811661041a5760405162461bcd60e51b815260040161024290610549565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461048157600080fd5b919050565b60006020828403121561049857600080fd5b6104a18261046a565b9392505050565b6000602082840312156104ba57600080fd5b5035919050565b600080604083850312156104d457600080fd5b823591506104e46020840161046a565b90509250929050565b6000602082840312156104ff57600080fd5b5051919050565b60208082526023908201527f4f776e61626c654578743a2063616c6c6572206973206e6f7420746865206f776040820152623732b960e91b606082015260800190565b60208082526018908201527f5a65726f2061646472657373206e6f7420616c6c6f776564000000000000000060408201526060019056fea2646970667358221220c630715d5cea025019ff2a381fa597fa64967c3a53d15ff3ab950f30bf283bba64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80638da5cb5b116100715780638da5cb5b1461013a578063918f86741461014b57806396ce07951461015a578063dff8720314610168578063ea2497841461017b578063f2fde38b1461018357600080fd5b80632b8455f1146100ae5780632caa60af146100c95780632dc10a54146100f45780635d5c33821461011d578063715018a614610132575b600080fd5b6100b6610196565b6040519081526020015b60405180910390f35b6002546100dc906001600160a01b031681565b6040516001600160a01b0390911681526020016100c0565b6100dc6101023660046104a8565b6001602052600090815260409020546001600160a01b031681565b61013061012b366004610486565b610218565b005b6101306102c5565b6000546001600160a01b03166100dc565b6100b6670de0b6b3a764000081565b670de0b6b3a76400006100b6565b6101306101763660046104c1565b6102fb565b6100b6610379565b610130610191366004610486565b6103be565b60025460408051632b8455f160e01b815290516000926001600160a01b031691632b8455f1916004808301926020929190829003018186803b1580156101db57600080fd5b505afa1580156101ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021391906104ed565b905090565b6000546001600160a01b0316331461024b5760405162461bcd60e51b815260040161024290610506565b60405180910390fd5b6001600160a01b0381166102715760405162461bcd60e51b815260040161024290610549565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f141c66e26ced3b033749b13f5b0cdef42b6399f107ef096dafff2f23b557ae379060200160405180910390a150565b6000546001600160a01b031633146102ef5760405162461bcd60e51b815260040161024290610506565b6102f960006103f4565b565b6000546001600160a01b031633146103255760405162461bcd60e51b815260040161024290610506565b6001600160a01b03811661034b5760405162461bcd60e51b815260040161024290610549565b60009182526001602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b60025460408051633a8925e160e21b815290516000926001600160a01b03169163ea249784916004808301926020929190829003018186803b1580156101db57600080fd5b6000546001600160a01b031633146103e85760405162461bcd60e51b815260040161024290610506565b6103f1816103f4565b50565b6001600160a01b03811661041a5760405162461bcd60e51b815260040161024290610549565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461048157600080fd5b919050565b60006020828403121561049857600080fd5b6104a18261046a565b9392505050565b6000602082840312156104ba57600080fd5b5035919050565b600080604083850312156104d457600080fd5b823591506104e46020840161046a565b90509250929050565b6000602082840312156104ff57600080fd5b5051919050565b60208082526023908201527f4f776e61626c654578743a2063616c6c6572206973206e6f7420746865206f776040820152623732b960e91b606082015260800190565b60208082526018908201527f5a65726f2061646472657373206e6f7420616c6c6f776564000000000000000060408201526060019056fea2646970667358221220c630715d5cea025019ff2a381fa597fa64967c3a53d15ff3ab950f30bf283bba64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "denominator()": {
        "notice": "Denominator for normalization. Default 10**18."
      },
      "getUsdcBuyPrice()": {
        "notice": "Token buy price at USDC. Amount of USDC we should spend to buy one token. Returned value is [USDC/token] Usage: tokenAmount = usdcAmount * denominator() / getUsdcBuyPrice() Normilized to 10**18"
      },
      "getUsdcSellPrice()": {
        "notice": "Token sell price at USDC. Amount of USDC we got if sell one token. Returned value is [USDC/token] Usage: usdcAmount = tokenAmount * getUsdcSellPrice() / denominator() Normilized to 10**18"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4391,
        "contract": "contracts/price_getters/A3CrvGaugePriceGetter.sol:A3CrvGaugePriceGetter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4395,
        "contract": "contracts/price_getters/A3CrvGaugePriceGetter.sol:A3CrvGaugePriceGetter",
        "label": "rolemap",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 9966,
        "contract": "contracts/price_getters/A3CrvGaugePriceGetter.sol:A3CrvGaugePriceGetter",
        "label": "a3CrvPriceGetter",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(A3CrvPriceGetter)10096"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(A3CrvPriceGetter)10096": {
        "encoding": "inplace",
        "label": "contract A3CrvPriceGetter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}